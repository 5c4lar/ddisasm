# -*- mode: ruby -*-
# vi: set ft=ruby :

Vagrant.configure("2") do |config|
  config.vm.box = "gusztavvargadr/windows-10"

  config.vm.provision "setup-gitlab-requirements", type: "shell", inline: <<-SHELL
    cd $HOME
    Invoke-WebRequest https://www.cygwin.com/setup-x86_64.exe -OutFile setup-x86_64.exe
    $startInfo = New-Object System.Diagnostics.ProcessStartInfo
    $startInfo.FileName = "C:\\Users\\vagrant\\setup-x86_64.exe"
    $startInfo.Arguments = "--no-shortcuts --no-desktop -q --site http://cygwin.mirror.constant.com --packages git,cygrunsrv,openssh,unzip,zip"
    $startInfo.UseShellExecute = $true
    $startInfo.CreateNoWindow = $false
    $process = New-Object System.Diagnostics.Process
    $process.StartInfo = $startInfo
    $process.Start()
    $process.WaitForExit()
    C:\\cygwin64\\bin\\bash.exe --login -c "/bin/ssh-host-config -y -c ntsec -p 22"
    C:\\cygwin64\\bin\\bash.exe --login -c "net stop sshd"
    cmd.exe /C "sc config ""sshd"" start= disabled"
    C:\\cygwin64\\bin\\bash.exe --login -c "net start cygsshd"
    cmd.exe /C "sc config ""cygsshd"" start=auto"
    choco install -y git-lfs
    C:\\cygwin64\\bin\\bash.exe --login -c  "mkdir ~/.ssh"
    C:\\cygwin64\\bin\\bash.exe --login -c  "echo 'git.grammatech.com' > ~/.ssh/known_hosts"
  SHELL

  config.vm.provision "setup-gitlab-runner", type: "shell", inline: <<-SHELL
    cd $HOME
    mkdir C:\\GitLab-Runner
    Invoke-WebRequest https://gitlab-runner-downloads.s3.amazonaws.com/latest/binaries/gitlab-runner-windows-amd64.exe -OutFile C:\\GitLab-Runner\\gitlab-runner.exe
    C:\\GitLab-Runner\\gitlab-runner.exe install
    C:\\GitLab-Runner\\gitlab-runner.exe start
    cmd.exe /C 'setx /M PATH "%PATH%;C:\\GitLab-Runner"'
  SHELL

  config.vm.provision "setup-dev-tools", type: "shell", inline: <<-SHELL
    choco install -y git
    choco install -y cmake --version=3.14.1
    choco install -y msys2
    choco install -y ninja
    choco install -y python3 --version=3.9.1
    choco install -y visualstudio2019community --version=16.8.4.0 --package-parameters "--installPath ""C:\\VS""  --passive --wait --add Microsoft.VisualStudio.Component.VC.Tools.x86.x64 --add Microsoft.VisualStudio.Component.VC.CoreBuildTools --add Microsoft.VisualStudio.Component.VC.Redist.14.Latest --add Microsoft.VisualStudio.Component.Windows10SDK --add Microsoft.VisualStudio.Component.Windows10SDK.18362 --includeRecommended"

    cd $HOME
    Invoke-WebRequest http://www.terraspace.co.uk/uasm252_x64.zip -OutFile uasm.zip
    Expand-Archive -Path uasm.zip -DestinationPath C:\\tools\\uasm
SHELL

  config.vm.provision :reload

  config.vm.provision "setup-conan", type: "shell", inline: <<-SHELL
    python -m pip install conan
  SHELL

  config.vm.provision "get-elf.h", type: "shell", inline: <<-SHELL
    $include_path= & C:\\cygwin64\\bin\\bash.exe --login -c 'find /cygdrive/c/VS/VC/Tools/MSVC/ -maxdepth 1 | tail -n +2 | cygpath -wf -'
     C:\\Windows\\System32\\curl.exe https://git.musl-libc.org/cgit/musl/plain/include/elf.h > "$include_path\\include\\elf.h"
  SHELL

  config.vm.provision "setup-wsl-1", type: "shell", inline: <<-SHELL
    Enable-WindowsOptionalFeature -Online -FeatureName Microsoft-Windows-Subsystem-Linux -NoRestart
  SHELL

  config.vm.provision :reload

  config.vm.provision "setup-wsl-2", type: "shell", inline: <<-SHELL
    $jobs = @()
    $jobs += Start-Job -Name AddUbuntuJob -ScriptBlock {
        Invoke-WebRequest -Uri https://aka.ms/wslubuntu2004 -OutFile Ubuntu.appx -UseBasicParsing
        Add-AppxPackage Ubuntu.appx
    }

    Wait-Job -Job $jobs
  SHELL

  config.vm.provision "generate-souffle-setup-script", type: "shell", inline: <<-SHELL
    cd $HOME
    $wsl_script = @"
apt-get update
apt-get -y install bison build-essential cmake flex libffi-dev libtool m4 mcpp zlib1g-dev
git clone  https://github.com/souffle-lang/souffle
cd souffle
git checkout e4184ab103bf4878d8fd85cb5373d690691bfe32
cmake . -Bbuild -DCMAKE_BUILD_TYPE=Release -DSOUFFLE_USE_CURSES=0 -DSOUFFLE_USE_SQLITE=0 -DSOUFFLE_DOMAIN_64BIT=1
cd build
make install -j8
"@
    Set-Content -Path setup-souffle.sh -Value $wsl_script

    $script = @"
ubuntu2004 install --root
wsl -- bash /mnt/c/Users/vagrant/setup-souffle.sh
"@
    Set-Content -Path setup-script.ps1 -Value $script

    echo @"
#################################
VM SETUP IS NOT COMPLETE

You must RDP into the VM and run the powershell script C:\\Users\\vagrant\\setup-script.ps1

This manual step is required because wsl cannot be setup through vagrant due to a windows permissions error.
#################################
"@
  SHELL
end
