variables:
  DOCKER_REGISTRY: "docker.grammatech.com:14850"
  LOCAL_IMAGE_NAME: '$CI_BUILD_REF_NAME-$CI_PIPELINE_ID'

stages:
  - build
  - test-and-tag
  - cleanup

.build-template: &build
  script:
    - (cd tests ; ./fetch_real_examples.sh)
    - git clone https://git.grammatech.com/debloat/gtirb.git
    - git clone https://git.grammatech.com/debloat/pretty-printer.git
    - docker build -f .ci/Dockerfile.$OS -t ${LOCAL_IMAGE_NAME}-${OS} .

build-ubuntu16:
  stage: build
  variables:
    OS: 'ubuntu16'
  <<: *build

run-ubuntu16:
  stage: test-and-tag
  variables:
    OS: 'ubuntu16'
  script:
    - docker run ${LOCAL_IMAGE_NAME}-${OS} /bin/bash -c \
      "cd tests/ && ./test_small.sh && ./test_assembler_examples.sh"
    - if [ "$CI_BUILD_REF_NAME" == "master" ] && [ "$OS" == "ubuntu16" ];
      then
        docker tag ${LOCAL_IMAGE_NAME}-${OS} $DOCKER_REGISTRY/$CI_PROJECT_PATH/${OS}:latest;
        docker login -u gitlab-ci-token -p $CI_BUILD_TOKEN $DOCKER_REGISTRY;
        docker push $DOCKER_REGISTRY/$CI_PROJECT_PATH/${OS}:latest;
      fi

cleanup-ubuntu16:
  stage: cleanup
  variables:
    OS: 'ubuntu16'
  script:
    - docker rmi -f ${LOCAL_IMAGE_NAME}-${OS}

# build-arch:
#   stage: build-deploy-cleanup
#   variables:
#     OS: 'arch'
#   <<: *build
