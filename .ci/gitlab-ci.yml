variables:
  DOCKER_REGISTRY: "docker.grammatech.com"
  LOCAL_IMAGE_NAME: '$CI_BUILD_REF_NAME-$CI_PIPELINE_ID'

stages:
  - check-format
  - build
  - test-and-tag-ubuntu16
  - test-and-tag-ubuntu18
  - test-and-tag-arch
  - cleanup

.build-template: &build
  script:
    - git clone https://git.grammatech.com/rewriting/gtirb.git
    - git clone https://git.grammatech.com/rewriting/gtirb-pprinter.git
    - git clone https://git.zephyr-software.com/opensrc/libehp
    - docker build -f .ci/Dockerfile.${OS}-${COMPILER} -t ${LOCAL_IMAGE_NAME}-${OS}-${COMPILER} .

.test-and-tag-template: &test-and-tag
  script:
    - if [ "$CI_COMMIT_REF_SLUG" = "master" ];
      then
          PUSH_TAG=latest;
      else
          PUSH_TAG=$CI_COMMIT_REF_SLUG;
      fi
    - docker run  --cpus=8 ${LOCAL_IMAGE_NAME}-${OS}-${COMPILER} /bin/bash -c \
      "cd tests/ && ./test_small.sh && ./test_small.sh -strip && ./test_assembler_examples.sh -strip"
    - docker tag ${LOCAL_IMAGE_NAME}-${OS}-${COMPILER} $DOCKER_REGISTRY/$CI_PROJECT_PATH/${OS}-${COMPILER}:${PUSH_TAG};
    - docker login -u gitlab-ci-token -p $CI_BUILD_TOKEN $DOCKER_REGISTRY;
    - docker push $DOCKER_REGISTRY/$CI_PROJECT_PATH/${OS}-${COMPILER}:${PUSH_TAG};

.test-arch-template: &test-arch
  script:
    - docker run --cpus=8 ${LOCAL_IMAGE_NAME}-${OS}-${COMPILER} /bin/bash -c \
      "cd tests/ && ./test_small.sh && ./test_small.sh -strip && ./test_assembler_examples.sh -strip && EXTRA_FLAGS=-fcf-protection ./test_small.sh"

.cleanup-template: &cleanup
  script:
    - docker rmi -f ${LOCAL_IMAGE_NAME}-${OS}-${COMPILER}

check-format:
  stage: check-format
  script:
    - docker build --rm -f .ci/Dockerfile.formatter .

build-ubuntu16-gcc:
  stage: build
  variables:
    OS: 'ubuntu16'
    COMPILER: 'gcc'
  <<: *build

build-ubuntu18-gcc:
  stage: build
  variables:
    OS: 'ubuntu18'
    COMPILER: 'gcc'
  <<: *build

build-arch-gcc:
  stage: build
  variables:
    OS: 'arch'
    COMPILER: 'gcc'
  <<: *build

build-ubuntu16-clang:
  stage: build
  variables:
    OS: 'ubuntu16'
    COMPILER: 'clang'
  <<: *build

build-ubuntu18-clang:
  stage: build
  variables:
    OS: 'ubuntu18'
    COMPILER: 'clang'
  <<: *build

build-arch-clang:
  stage: build
  variables:
    OS: 'arch'
    COMPILER: 'clang'
  <<: *build

run-ubuntu16-gcc:
  stage: test-and-tag-ubuntu16
  variables:
    OS: 'ubuntu16'
    COMPILER: 'gcc'
  <<: *test-and-tag

run-ubuntu18-gcc:
  stage: test-and-tag-ubuntu18
  variables:
    OS: 'ubuntu18'
    COMPILER: 'gcc'
  <<: *test-and-tag

run-arch-gcc:
  stage: test-and-tag-arch
  variables:
    OS: 'arch'
    COMPILER: 'gcc'
  <<: *test-arch

run-ubuntu16-clang:
  stage: test-and-tag-ubuntu16
  variables:
    OS: 'ubuntu16'
    COMPILER: 'clang'
  <<: *test-and-tag

run-ubuntu18-clang:
  stage: test-and-tag-ubuntu18
  variables:
    OS: 'ubuntu18'
    COMPILER: 'clang'
  <<: *test-and-tag

run-arch-clang:
  stage: test-and-tag-arch
  variables:
    OS: 'arch'
    COMPILER: 'clang'
  script:
  <<: *test-arch

cleanup-ubuntu16-gcc:
  stage: cleanup
  variables:
    OS: 'ubuntu16'
    COMPILER: 'gcc'
  <<: *cleanup

cleanup-ubuntu18-gcc:
  stage: cleanup
  variables:
    OS: 'ubuntu18'
    COMPILER: 'gcc'
  <<: *cleanup

cleanup-arch-gcc:
  stage: cleanup
  variables:
    OS: 'arch'
    COMPILER: 'gcc'
  <<: *cleanup

cleanup-ubuntu16-clang:
  stage: cleanup
  variables:
    OS: 'ubuntu16'
    COMPILER: 'clang'
  <<: *cleanup

cleanup-ubuntu18-clang:
  stage: cleanup
  variables:
    OS: 'ubuntu18'
    COMPILER: 'clang'
  <<: *cleanup

cleanup-arch-clang:
  stage: cleanup
  variables:
    OS: 'arch'
    COMPILER: 'clang'
  <<: *cleanup
