variables:
  GTIRB_BRANCH: "master"

stages:
  - check-format
  - build
  - build-packages
  - test-and-tag
  - setup-package-tests
  - package-tests
  - deploy

default:
  tags: [ddisasm-docker-executor]

check-format:
  stage: check-format
  image: $DOCKER_REGISTRY/rewriting/ddisasm/ubuntu18
  script:
    - pre-commit run --all-files

.build-template: &build
  artifacts:
    name: "$CI_COMMIT_REF_NAME-$CI_JOB_NAME"
    paths:
      - build
  script:
    - case $OS in
       ubuntu16) JOB_NAME='debian-installer-ubuntu16' ;;
       ubuntu18) JOB_NAME='debian-installer-ubuntu18' ;;
       arch) JOB_NAME='package-arch' ;;
       esac
    # Acquire gtirb artifacts
    - curl -L https://git.grammatech.com/rewriting/gtirb/-/jobs/artifacts/${GTIRB_BRANCH}/download?job=${JOB_NAME} --output "gtirb-${OS}-artifacts.zip"
    - unzip gtirb-${OS}-artifacts.zip
    # Acquire gtirb pprinter artifacts
    - GTIRB_PPRINTER_BRANCH=$((grep -Eo "check_gtirb_pprinter_branch\([^)]+" CMakeLists.txt | sed 's/check_gtirb_pprinter_branch(//') || echo "master")
    - "echo \"GTIRB_PPRINTER_BRANCH is: $GTIRB_PPRINTER_BRANCH\""
    - curl -L https://git.grammatech.com/rewriting/gtirb-pprinter/-/jobs/artifacts/${GTIRB_PPRINTER_BRANCH}/download?job=${JOB_NAME} --output "gtirb-pprinter-${OS}-artifacts.zip"
    - unzip gtirb-pprinter-${OS}-artifacts.zip
    # Install gtirb & pprinter
    - '[ $OS != "arch" ] || sudo pacman --noconfirm -U gtirb-git*.pkg.tar.xz gtirb-pprinter-git*.pkg.tar.xz'
    - '[[ ! "$OS" =~ ubuntu1[68] ]] || dpkg -i libgtirb.deb libgtirb-dev.deb libgtirb-pprinter.deb libgtirb-pprinter-dev.deb'
    # Build ddisasm
    - mkdir build
    - cd build
    - cmake -DCMAKE_CXX_COMPILER=${CXX_COMPILER} -DCMAKE_BUILD_TYPE=$BUILD_TYPE -DLIEF_ROOT=/usr/ ..
    - make

.build-windows-template: &build-windows
  artifacts:
    name: "$CI_COMMIT_REF_NAME-$CI_JOB_NAME"
    paths:
      - ./DDISASM-*-win64
  script:
    - systeminfo
    - git clone https://git.zephyr-software.com/opensrc/libehp.git
    - cd libehp && git reset --hard 953f45ba9fb4b1afe38b7c5ecd9b9fa55f17ff49 && cd ..
    - .ci/build-windows.sh ${BUILD_TYPE}

.test-and-tag-template: &test-and-tag
  script:
    - case $OS in
       ubuntu16) JOB_NAME='debian-installer-ubuntu16' ;;
       ubuntu18) JOB_NAME='debian-installer-ubuntu18' ;;
       arch) JOB_NAME='package-arch' ;;
       esac
    # Acquire gtirb artifacts
    - curl -L https://git.grammatech.com/rewriting/gtirb/-/jobs/artifacts/${GTIRB_BRANCH}/download?job=${JOB_NAME} --output "gtirb-${OS}-artifacts.zip"
    - unzip -o gtirb-${OS}-artifacts.zip
    # Acquire gtirb pprinter artifacts
    - GTIRB_PPRINTER_BRANCH=$((grep -Eo "check_gtirb_pprinter_branch\([^)]+" CMakeLists.txt | sed 's/check_gtirb_pprinter_branch(//') || echo "master")
    - curl -L https://git.grammatech.com/rewriting/gtirb-pprinter/-/jobs/artifacts/${GTIRB_PPRINTER_BRANCH}/download?job=${JOB_NAME} --output "gtirb-pprinter-${OS}-artifacts.zip"
    - unzip -o gtirb-pprinter-${OS}-artifacts.zip
    # Install gtirb and the pprinter
    - '[ $OS != "arch" ] || sudo pacman --noconfirm -U gtirb-git*.pkg.tar.xz gtirb-pprinter-git*.pkg.tar.xz'
    - '[[ ! "$OS" =~ ubuntu1[68] ]] || dpkg -i libgtirb.deb libgtirb-pprinter.deb gtirb-pprinter.deb'
    # Install gtirb python wheel
    - curl -L https://git.grammatech.com/rewriting/gtirb/-/jobs/artifacts/${GTIRB_BRANCH}/download?job=python-wheel --output "gtirb-wheel.zip"
    - unzip gtirb-wheel.zip
    - python3 -m pip install pip --upgrade && python3 -m pip install gtirb-*-py*.whl
    # Run tests
    - cd build && PATH=$(pwd)/bin:$PATH ctest -V

.build-ubuntu-packages-template: &build-ubuntu-packages
  stage: build-packages
  artifacts:
    name: "$CI_COMMIT_REF_NAME-$CI_JOB_NAME"
    paths:
      - build
  script:
    # Acquire gtirb artifacts
    - curl -L https://git.grammatech.com/rewriting/gtirb/-/jobs/artifacts/${GTIRB_BRANCH}/download?job=debian-installer-$OS --output "gtirb-${OS}-artifacts.zip"
    - unzip gtirb-${OS}-artifacts.zip
    # Acquire gtirb pprinter artifacts
    - GTIRB_PPRINTER_BRANCH=$((grep -Eo "check_gtirb_pprinter_branch\([^)]+" CMakeLists.txt | sed 's/check_gtirb_pprinter_branch(//') || echo "master")
    - "echo \"GTIRB_PPRINTER_BRANCH is: $GTIRB_PPRINTER_BRANCH\""
    - curl -L https://git.grammatech.com/rewriting/gtirb-pprinter/-/jobs/artifacts/${GTIRB_PPRINTER_BRANCH}/download?job=debian-installer-$OS --output "gtirb-pprinter-${OS}-artifacts.zip"
    - unzip gtirb-pprinter-${OS}-artifacts.zip
    - dpkg -i libgtirb.deb libgtirb-dev.deb libgtirb-pprinter.deb libgtirb-pprinter-dev.deb
    - cd build
    - cpack -G "DEB" -D CPACK_DDISASM_DEBIAN_PACKAGE=ddisasm
    - cpack -G "DEB" -D CPACK_DDISASM_DEBIAN_PACKAGE=debug

build-ubuntu16-gcc:
  stage: build
  image: $DOCKER_REGISTRY/rewriting/ddisasm/ubuntu16
  variables:
    OS: 'ubuntu16'
    CXX_COMPILER: 'g++-7'
    BUILD_TYPE: 'RelWithDebInfo'
  <<: *build

build-ubuntu18-gcc:
  stage: build
  image: $DOCKER_REGISTRY/rewriting/ddisasm/ubuntu18
  variables:
    OS: 'ubuntu18'
    CXX_COMPILER: 'g++-7'
    BUILD_TYPE: 'RelWithDebInfo'
  <<: *build

build-arch-gcc:
  stage: build
  image: $DOCKER_REGISTRY/rewriting/ddisasm/arch
  variables:
    OS: 'arch'
    CXX_COMPILER: 'g++'
    BUILD_TYPE: 'RelWithDebInfo'
  artifacts:
    name: "$CI_COMMIT_REF_NAME-$CI_JOB_NAME"
    paths:
      - build
  script:
    # Acquire gtirb artifacts
    - curl -L https://git.grammatech.com/rewriting/gtirb/-/jobs/artifacts/${GTIRB_BRANCH}/download?job=package-arch --output "gtirb-arch-artifacts.zip"
    - unzip -o gtirb-arch-artifacts.zip
    # Acquire gtirb pprinter artifacts
    - GTIRB_PPRINTER_BRANCH=$((grep -Eo "check_gtirb_pprinter_branch\([^)]+" CMakeLists.txt | sed 's/check_gtirb_pprinter_branch(//') || echo "master")
    - curl -L https://git.grammatech.com/rewriting/gtirb-pprinter/-/jobs/artifacts/${GTIRB_PPRINTER_BRANCH}/download?job=package-arch --output "gtirb-pprinter-arch-artifacts.zip"
    - unzip -o gtirb-pprinter-arch-artifacts.zip
    # Install gtirb and the pprinter
    - sudo pacman --noconfirm -U gtirb-git*.pkg.tar.xz gtirb-pprinter-git*.pkg.tar.xz
    # Install gtirb python wheel
    - curl -L https://git.grammatech.com/rewriting/gtirb/-/jobs/artifacts/${GTIRB_BRANCH}/download?job=python-wheel --output "gtirb-wheel.zip"
    - unzip gtirb-wheel.zip
    - python3 -m pip install pip --upgrade && python3 -m pip install gtirb-*-py*.whl
    # Build package and run tests
    - mkdir /home/ddisasm/ddisasm-aur
    - cp .ci/PKGBUILD /home/ddisasm/ddisasm-aur/PKGBUILD
    - cd /home/ddisasm/ddisasm-aur/
    - sed -i "s|git://github.com/grammatech/ddisasm.git|git+file://$CI_PROJECT_DIR|" PKGBUILD
    - makepkg
    - cd /home/ddisasm/ddisasm-aur/src/ddisasm/build && PATH=$(pwd)/bin:$PATH ctest -V
    - cd /home/ddisasm/ddisasm-aur/
    - sudo pacman --noconfirm -U *.pkg.tar.xz
    - cp -r /home/ddisasm/ddisasm-aur/src/ddisasm/build $CI_PROJECT_DIR/build/
    - cp *.pkg.tar.xz $CI_PROJECT_DIR/build/

build-arch-gcc-debug:
  stage: build
  image: $DOCKER_REGISTRY/rewriting/ddisasm/arch
  variables:
    OS: 'arch'
    CXX_COMPILER: 'g++'
    BUILD_TYPE: 'Debug'
  <<: *build

build-arch-clang-debug:
  stage: build
  image: $DOCKER_REGISTRY/rewriting/ddisasm/arch
  variables:
    OS: 'arch'
    CXX_COMPILER: 'clang++'
    BUILD_TYPE: 'Debug'
  <<: *build

build-windows-msvc-debug:
  stage: build
  tags:
    - ddisasm-windows
  variables:
    BUILD_TYPE: 'Debug'
  <<: *build-windows

build-windows-msvc-relwithdebinfo:
  stage: build
  tags:
    - ddisasm-windows
  variables:
    BUILD_TYPE: 'RelWithDebInfo'
  <<: *build-windows

build-ubuntu16-packages:
  image: $DOCKER_REGISTRY/rewriting/ddisasm/ubuntu16
  needs: ['build-ubuntu16-gcc']
  variables:
    OS: ubuntu16
  <<: *build-ubuntu-packages

build-ubuntu18-packages:
  image: $DOCKER_REGISTRY/rewriting/ddisasm/ubuntu18
  needs: ['build-ubuntu18-gcc']
  variables:
    OS: ubuntu18
  <<: *build-ubuntu-packages

run-ubuntu16-gcc:
  stage: test-and-tag
  image: $DOCKER_REGISTRY/rewriting/ddisasm/ubuntu16
  needs: ['build-ubuntu16-gcc']
  variables:
    OS: 'ubuntu16'
    BUILD_TYPE: 'RelWithDebInfo'
  <<: *test-and-tag

run-ubuntu18-gcc:
  stage: test-and-tag
  image: $DOCKER_REGISTRY/rewriting/ddisasm/ubuntu18
  needs: ['build-ubuntu18-gcc']
  variables:
    OS: 'ubuntu18'
    BUILD_TYPE: 'RelWithDebInfo'
  <<: *test-and-tag

run-arch-gcc-debug:
  stage: test-and-tag
  image: $DOCKER_REGISTRY/rewriting/ddisasm/arch
  needs: ['build-arch-gcc-debug']
  variables:
    OS: 'arch'
    BUILD_TYPE: 'Debug'
  <<: *test-and-tag

run-arch-clang-debug:
  stage: test-and-tag
  image: $DOCKER_REGISTRY/rewriting/ddisasm/arch
  needs: ['build-arch-clang-debug']
  variables:
    OS: 'arch'
    BUILD_TYPE: 'Debug'
  script:
  <<: *test-and-tag

test-make-install:
  stage: test-and-tag
  image: $DOCKER_REGISTRY/rewriting/ddisasm/ubuntu18
  needs: ['build-ubuntu18-gcc']
  variables:
    OS: 'ubuntu18'
    COMPILER: 'gcc'
    BUILD_TYPE: 'RelWithDebInfo'
  script:
    - case $OS in
       ubuntu16) JOB_NAME='debian-installer-ubuntu16' ;;
       ubuntu18) JOB_NAME='debian-installer-ubuntu18' ;;
       arch) JOB_NAME='package-arch' ;;
       esac
    # Acquire gtirb artifacts
    - curl -L https://git.grammatech.com/rewriting/gtirb/-/jobs/artifacts/${GTIRB_BRANCH}/download?job=${JOB_NAME} --output "gtirb-${OS}-artifacts.zip"
    - unzip -o gtirb-${OS}-artifacts.zip
    # Acquire gtirb pprinter artifacts
    - GTIRB_PPRINTER_BRANCH=$((grep -Eo "check_gtirb_pprinter_branch\([^)]+" CMakeLists.txt | sed 's/check_gtirb_pprinter_branch(//') || echo "master")
    - curl -L https://git.grammatech.com/rewriting/gtirb-pprinter/-/jobs/artifacts/${GTIRB_PPRINTER_BRANCH}/download?job=${JOB_NAME} --output "gtirb-pprinter-${OS}-artifacts.zip"
    - unzip -o gtirb-pprinter-${OS}-artifacts.zip
    # Install gtirb and the pprinter
    - dpkg -i libgtirb.deb libgtirb-dev.deb libgtirb-pprinter.deb gtirb-pprinter.deb libgtirb-pprinter-dev.deb
    - cd build && make -t && make install
    - cd .. && PYTHONPATH=$PYTHONPATH:$(pwd)/tests python3 -m unittest end2end_test.TestSmall.test_1

.setup-apt-repo-template: &setup-apt-repo
  stage: setup-package-tests
  artifacts:
    name: "$CI_COMMIT_REF_NAME-$CI_JOB_NAME"
    paths:
      - apt-repo
  script:
    # Acquire gtirb artifacts
    - curl -L https://git.grammatech.com/rewriting/gtirb/-/jobs/artifacts/${GTIRB_BRANCH}/download?job=debian-installer-$OS --output "gtirb-${OS}-artifacts.zip"
    - unzip gtirb-${OS}-artifacts.zip
    # Acquire gtirb pprinter artifacts
    - GTIRB_PPRINTER_BRANCH=$((grep -Eo "check_gtirb_pprinter_branch\([^)]+" CMakeLists.txt | sed 's/check_gtirb_pprinter_branch(//') || echo "master")
    - "echo \"GTIRB_PPRINTER_BRANCH is: $GTIRB_PPRINTER_BRANCH\""
    - curl -L https://git.grammatech.com/rewriting/gtirb-pprinter/-/jobs/artifacts/${GTIRB_PPRINTER_BRANCH}/download?job=debian-installer-$OS --output "gtirb-pprinter-${OS}-artifacts.zip"
    - unzip gtirb-pprinter-${OS}-artifacts.zip
    - mkdir apt-repo
    - cp build/*.deb apt-repo
    - cp *.deb apt-repo
    - cd apt-repo && dpkg-scanpackages . /dev/null > Packages

.test-ubuntu-ddisasm: &test-ubuntu-ddisasm
  stage: package-tests
  script:
    - if [ $(lsb_release -sc) == "bionic" ]; then TRUSTED="[trusted=yes]"; fi
    - echo -e "\ndeb $TRUSTED file:$(pwd)/apt-repo ./\n" >> /etc/apt/sources.list
    - apt-get update -y && apt-get install -y --allow-unauthenticated ddisasm
    - ddisasm --version

.test-ubuntu-ddisasm-dbg: &test-ubuntu-ddisasm-dbg
  stage: package-tests
  script:
    - if [ $(lsb_release -sc) == "bionic" ]; then TRUSTED="[trusted=yes]"; fi
    - echo -e "\ndeb $TRUSTED file:$(pwd)/apt-repo ./\n" >> /etc/apt/sources.list
    - apt-get update -y && apt-get install -y --allow-unauthenticated ddisasm-dbg
    - '[ -f /usr/lib/debug/.build-id/$(readelf -n /usr/bin/ddisasm | grep ''Build ID: '' | cut -d'':'' -f2 | sed -E ''s/ ([a-f0-9]{2,})([a-f0-9]{30,})/\1\/\2/g'').debug ]'

setup-ubuntu16-package-tests:
  image: $DOCKER_REGISTRY/rewriting/ddisasm/ubuntu16
  needs: ['build-ubuntu16-packages']
  variables:
    OS: ubuntu16
  <<: *setup-apt-repo

setup-ubuntu18-package-tests:
  image: $DOCKER_REGISTRY/rewriting/ddisasm/ubuntu18
  needs: ['build-ubuntu18-packages']
  variables:
    OS: ubuntu18
  <<: *setup-apt-repo

test-ubuntu16-ddisasm-package:
  image: $DOCKER_REGISTRY/rewriting/ddisasm/ubuntu16
  needs: ['setup-ubuntu16-package-tests']
  <<: *test-ubuntu-ddisasm

test-ubuntu18-ddisasm-package:
  image: $DOCKER_REGISTRY/rewriting/ddisasm/ubuntu18
  needs: ['setup-ubuntu18-package-tests']
  <<: *test-ubuntu-ddisasm

test-ubuntu16-ddisasm-dbg-package:
  image: $DOCKER_REGISTRY/rewriting/ddisasm/ubuntu16
  needs: ['setup-ubuntu16-package-tests']
  <<: *test-ubuntu-ddisasm-dbg

test-ubuntu18-ddisasm-dbg-package:
  image: $DOCKER_REGISTRY/rewriting/ddisasm/ubuntu18
  needs: ['setup-ubuntu18-package-tests']
  <<: *test-ubuntu-ddisasm-dbg

.debian-installer-ubuntu-template: &debian-installer-ubuntu-template
  stage: deploy
  artifacts:
    name: "$CI_COMMIT_REF_NAME-$CI_JOB_NAME"
    paths:
      - '*ddisasm*.deb'
  script:
    - cp build/*ddisasm*.deb ./

debian-installer-ubuntu16:
  image: $DOCKER_REGISTRY/rewriting/ddisasm/ubuntu16
  needs:
    - 'test-ubuntu16-ddisasm-package'
    - 'test-ubuntu16-ddisasm-dbg-package'
    - 'build-ubuntu16-packages'
  <<: *debian-installer-ubuntu-template

debian-installer-ubuntu18:
  image: $DOCKER_REGISTRY/rewriting/ddisasm/ubuntu18
  needs:
    - 'test-ubuntu18-ddisasm-package'
    - 'test-ubuntu18-ddisasm-dbg-package'
    - 'build-ubuntu18-packages'
  <<: *debian-installer-ubuntu-template

package-arch:
  stage: deploy
  image: $DOCKER_REGISTRY/rewriting/ddisasm/arch
  needs: ['build-arch-gcc']
  artifacts:
    name: "$CI_COMMIT_REF_NAME-$CI_JOB_NAME"
    paths:
      - '*ddisasm*.pkg.tar.xz'
  script:
    - cp build/*ddisasm*.pkg.tar.xz ./
