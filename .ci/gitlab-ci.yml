variables:
  DOCKER_REGISTRY: "docker.grammatech.com"
  LOCAL_IMAGE_NAME: '$CI_BUILD_REF_NAME-$CI_PIPELINE_ID'

stages:
  - check-format
  - build
  - test-and-tag
  - test-installers
  - deploy
  - cleanup

# The two build templates below ultimately call the build script for the
# appropriate platform & task (the .ci/build-*.sh scripts).
# For windows builds, this is done directly. For linux builds, the build script
# is called in the Dockerfile.

.build-template: &build
  script:
    - cp /u4/TARBALLS/debloat/pkgs/libcapstone-dev_4.0.1-1_amd64.deb ./
    - cp /u4/TARBALLS/debloat/pkgs/ehp_0.1.1-1_amd64.deb ./ # for ubuntu
    - git clone https://git.zephyr-software.com/opensrc/libehp.git # for arch
    # Acquire gtirb artifacts
    - GTIRB_BRANCH=$((grep -Eo "check_gtirb_branch\([^)]+" CMakeLists.txt || echo "v1.3.1") | sed 's/check_gtirb_branch(//')
    - "echo \"GTIRB_BRANCH is: $GTIRB_BRANCH\""
    - curl -L https://git.grammatech.com/rewriting/gtirb/-/jobs/artifacts/${GTIRB_BRANCH}/download?job=tar-arch --output "gtirb-arch-artifacts.zip"
    - unzip -l gtirb-arch-artifacts.zip
    - curl -L https://git.grammatech.com/rewriting/gtirb/-/jobs/artifacts/${GTIRB_BRANCH}/download?job=debian-installer-ubuntu16 --output "gtirb-ubuntu16-artifacts.zip"
    - unzip -l gtirb-ubuntu16-artifacts.zip
    - curl -L https://git.grammatech.com/rewriting/gtirb/-/jobs/artifacts/${GTIRB_BRANCH}/download?job=debian-installer-ubuntu18 --output "gtirb-ubuntu18-artifacts.zip"
    - unzip -l gtirb-ubuntu18-artifacts.zip
    # Acquire gtirb pprinter artifacts
    - GTIRB_PPRINTER_BRANCH=$((grep -Eo "check_gtirb_pprinter_branch\([^)]+" CMakeLists.txt || echo "master") | sed 's/check_gtirb_pprinter_branch(//')
    - "echo \"GTIRB_PPRINTER_BRANCH is: $GTIRB_PPRINTER_BRANCH\""
    - curl -L https://git.grammatech.com/rewriting/gtirb-pprinter/-/jobs/artifacts/${GTIRB_PPRINTER_BRANCH}/download?job=tar-arch --output "gtirb-pprinter-arch-artifacts.zip"
    - unzip -l gtirb-pprinter-arch-artifacts.zip
    - curl -L https://git.grammatech.com/rewriting/gtirb-pprinter/-/jobs/artifacts/${GTIRB_PPRINTER_BRANCH}/download?job=debian-installer-ubuntu16 --output "gtirb-pprinter-ubuntu16-artifacts.zip"
    - unzip -l gtirb-ubuntu16-artifacts.zip
    - curl -L https://git.grammatech.com/rewriting/gtirb-pprinter/-/jobs/artifacts/${GTIRB_PPRINTER_BRANCH}/download?job=debian-installer-ubuntu18 --output "gtirb-pprinter-ubuntu18-artifacts.zip"
    - unzip -l gtirb-ubuntu18-artifacts.zip
    - docker build -f .ci/Dockerfile.${OS}-${COMPILER} -t ${LOCAL_IMAGE_NAME}-${OS}-${COMPILER} --build-arg CPACK_GENERATOR=${CPACK_GENERATOR} .

.build-windows-template: &build-windows
  artifacts:
    name: "$CI_COMMIT_REF_NAME-$CI_JOB_NAME"
    paths:
      - ./DDISASM-*-win64.zip
  script:
    - git clone https://github.com/brianfairservice/libehp.git
    - .ci/build-windows.sh ${BUILD_TYPE}

.test-and-tag-template: &test-and-tag
  script:
    - if [ "$CI_COMMIT_REF_SLUG" = "master" ];
      then
          PUSH_TAG=latest;
      else
          PUSH_TAG=$CI_COMMIT_REF_SLUG;
      fi
    - GTIRB_BRANCH=$((grep -Eo "check_gtirb_branch\([^)]+" CMakeLists.txt || echo "v1.3.1") | sed 's/check_gtirb_branch(//')
    - curl -L https://git.grammatech.com/rewriting/gtirb/-/jobs/artifacts/${GTIRB_BRANCH}/download?job=build-windows-msvc-release --output "gtirb-artifacts.zip"
    - unzip gtirb-artifacts.zip
    - unzip GTIRB-*-win64.zip
    - mkdir gtirb-egg && cp *.egg gtirb-egg/
    - docker run -v $(pwd)/gtirb-egg:/gtirb-egg:ro --cpus=8 ${LOCAL_IMAGE_NAME}-${OS}-${COMPILER} /bin/bash -c "python3 -m pip install protobuf && wget https://bootstrap.pypa.io/ez_setup.py -O - | (sudo python3 || python3) && (easy_install /gtirb-egg/gtirb-*-py*.egg || true) && cd build/ && ctest -V"
    - docker tag ${LOCAL_IMAGE_NAME}-${OS}-${COMPILER} $DOCKER_REGISTRY/$CI_PROJECT_PATH/${OS}-${COMPILER}:${PUSH_TAG};
    - docker login -u gitlab-ci-token -p $CI_BUILD_TOKEN $DOCKER_REGISTRY;
    - docker push $DOCKER_REGISTRY/$CI_PROJECT_PATH/${OS}-${COMPILER}:${PUSH_TAG};

.cleanup-template: &cleanup
  script:
    - docker rmi -f ${LOCAL_IMAGE_NAME}-${OS}-${COMPILER}

check-format:
  stage: check-format
  script:
    - docker build --rm -f .ci/Dockerfile.formatter .

build-ubuntu16-gcc:
  stage: build
  variables:
    OS: 'ubuntu16'
    COMPILER: 'gcc'
  <<: *build

build-ubuntu18-gcc:
  stage: build
  variables:
    OS: 'ubuntu18'
    COMPILER: 'gcc'
    CPACK_GENERATOR: 'DEB'
  <<: *build

build-arch-gcc:
  stage: build
  variables:
    OS: 'arch'
    COMPILER: 'gcc'
  <<: *build

build-ubuntu16-clang:
  stage: build
  variables:
    OS: 'ubuntu16'
    COMPILER: 'clang'
  <<: *build

build-ubuntu18-clang:
  stage: build
  variables:
    OS: 'ubuntu18'
    COMPILER: 'clang'
  <<: *build

build-arch-clang:
  stage: build
  variables:
    OS: 'arch'
    COMPILER: 'clang'
  <<: *build

build-windows-debug:
  stage: build
  tags:
    - ddisasm-windows
  variables:
    BUILD_TYPE: 'Debug'
  <<: *build-windows

build-windows-release:
  stage: build
  tags:
    - ddisasm-windows
  variables:
    BUILD_TYPE: 'Release'
  <<: *build-windows

run-ubuntu16-gcc:
  stage: test-and-tag
  variables:
    OS: 'ubuntu16'
    COMPILER: 'gcc'
  <<: *test-and-tag

run-ubuntu18-gcc:
  stage: test-and-tag
  variables:
    OS: 'ubuntu18'
    COMPILER: 'gcc'
  <<: *test-and-tag

run-arch-gcc:
  stage: test-and-tag
  variables:
    OS: 'arch'
    COMPILER: 'gcc'
  <<: *test-and-tag

run-ubuntu16-clang:
  stage: test-and-tag
  variables:
    OS: 'ubuntu16'
    COMPILER: 'clang'
  <<: *test-and-tag

run-ubuntu18-clang:
  stage: test-and-tag
  variables:
    OS: 'ubuntu18'
    COMPILER: 'clang'
  <<: *test-and-tag

run-arch-clang:
  stage: test-and-tag
  variables:
    OS: 'arch'
    COMPILER: 'clang'
  script:
  <<: *test-and-tag

test-debian-installer:
  stage: test-installers
  variables:
    OS: 'ubuntu18'
    COMPILER: 'gcc'
  script:
    - docker build --rm -f .ci/Dockerfile.test-install --build-arg IMAGE=${LOCAL_IMAGE_NAME}-${OS}-${COMPILER} .

cleanup-ubuntu16-gcc:
  stage: cleanup
  variables:
    OS: 'ubuntu16'
    COMPILER: 'gcc'
  <<: *cleanup

cleanup-ubuntu18-gcc:
  stage: cleanup
  variables:
    OS: 'ubuntu18'
    COMPILER: 'gcc'
  <<: *cleanup

cleanup-arch-gcc:
  stage: cleanup
  variables:
    OS: 'arch'
    COMPILER: 'gcc'
  <<: *cleanup

cleanup-ubuntu16-clang:
  stage: cleanup
  variables:
    OS: 'ubuntu16'
    COMPILER: 'clang'
  <<: *cleanup

cleanup-ubuntu18-clang:
  stage: cleanup
  variables:
    OS: 'ubuntu18'
    COMPILER: 'clang'
  <<: *cleanup

cleanup-arch-clang:
  stage: cleanup
  variables:
    OS: 'arch'
    COMPILER: 'clang'
  <<: *cleanup


.linux-installer-template: &linux-installer
  stage: deploy
  artifacts:
    name: "$CI_COMMIT_REF_NAME-$CI_JOB_NAME"
    paths:
      - ./DDISASM-*-Linux.deb
  script:
    - export CONTAINER_FILE=$(mktemp -d)/cidfile
    - docker create --cidfile=${CONTAINER_FILE} ${LOCAL_IMAGE_NAME}-${OS}-${COMPILER}
    - docker cp $(cat ${CONTAINER_FILE}):/ddisasm/build ./build-artifacts
    - docker container rm -f $(cat ${CONTAINER_FILE})
    - rm -rf $(dirname ${CONTAINER_FILE})
    - mv ./build-artifacts/DDISASM-*-Linux.${EXTENSION} ./
    - rm -rf ./build-artifacts
    - if [ -f .ci/Dockerfile.test-${OS}-package ]; then docker build -f .ci/Dockerfile.test-${OS}-package -t ${LOCAL_IMAGE_NAME}-${OS}-package-test .; docker rmi ${LOCAL_IMAGE_NAME}-${OS}-package-test; fi

debian-installer-ubuntu16:
  variables:
    OS: 'ubuntu16'
    COMPILER: 'g++-7'
    EXTENSION: 'deb'
  <<: *linux-installer

debian-installer-ubuntu18:
  variables:
    OS: 'ubuntu18'
    COMPILER: 'g++-7'
    EXTENSION: 'deb'
  <<: *linux-installer

tar-arch:
  variables:
    OS: 'arch'
    COMPILER: 'g++'
    EXTENSION: 'tar.gz'
  <<: *linux-installer
