//===- arch.dl ----------------------------------------------*- datalog -*-===//
//
//  Copyright (C) 2019-2022 GrammaTech, Inc.
//
//  This code is licensed under the GNU Affero General Public License
//  as published by the Free Software Foundation, either version 3 of
//  the License, or (at your option) any later version. See the
//  LICENSE.txt file in the project root for license terms or visit
//  https://www.gnu.org/licenses/agpl.txt.
//
//  This program is distributed in the hope that it will be useful,
//  but WITHOUT ANY WARRANTY; without even the implied warranty of
//  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
//  GNU Affero General Public License for more details.
//
//  This project is sponsored by the Office of Naval Research, One Liberty
//  Center, 875 N. Randolph Street, Arlington, VA 22203 under contract #
//  N68335-17-C-0700.  The content of the information does not necessarily
//  reflect the position or policy of the Government and no official
//  endorsement should be inferred.
//
//===----------------------------------------------------------------------===//
/**
This module provides a generic implementation of arch component. This allows
declaring all relations of the interface, and defining default rules for some
of them.
*/

// Include architecture-specific code.
#ifdef ARCH_ARM64
    #include "../arm_binaries.dl"
    #include "../arm64_binaries.dl"
    #include "arm64/arch_arm64.dl"
    .init arch = ARM64
#elif defined(ARCH_IA32)
    #include "intel/arch_x86_32.dl"
    .init arch = X86_32
#elif defined(ARCH_AMD64)
    #include "intel/arch_x86_64.dl"
    .init arch = X86_64
#else
    #error "Undefined architecture"
#endif

/**
Define a standard interface for architecture components.
*/
.comp Arch {

// ===========================================================================
// Operation Types
// ===========================================================================

/**
Define a set of floating point operations
*/
.decl float_operation(Operation:symbol)

.decl interrupt_operation(Operation:symbol)

/**
An operation that may be a jump, depending on context. Use arch.jump(EA) for a
defintive list of jumps.
*/
.decl jump_operation(Operation:symbol)
.decl jump_equal_operation(Operation:symbol)
.decl jump_unequal_operation(Operation:symbol)

/**
Define all variants of the move operation.
*/
.decl move_operation(Operation:symbol)

.decl load_operation(Operation:symbol)

.decl load_word_operation(Operation:symbol)
load_word_operation(""):-
    false.

.decl store_operation(Operation:symbol)

.decl conditional_operation(Operation:symbol)

.decl conditional(EA:address)

conditional(EA):-
    instruction_get_operation(EA,Operation),
    arch.conditional_operation(Operation).

.decl op_does_not_read_dest_reg(Operation:symbol)

/**
This can include any multiplication operations, including shift-left operation.
*/
.decl multiplication_operation(Operation:symbol)

/**
This can include shift and rotation (right/left, arithmetic/logical)
operations.
*/
.decl shift_rotate_operation(Operation:symbol)

/**
This can include any kinds of arithmetic operations including arithmetic shifts
and multiplications.
*/
.decl arithmetic_operation(Operation:symbol)

/**
This can include logical operations including bitwise operations.
*/
.decl logic_operation(Operation:symbol)

.decl read_only_operation(Operation:symbol)

/**
This excludes a read of SP for adjusting stack-pointer: e.g., pop
*/
.decl write_only_operation(Operation:symbol)

.decl one_op_write(Operation:symbol)

.decl call_operation(operation:symbol)

.decl syscall_operation(Operation:symbol)

.decl return_operation(Operation:symbol)

.decl halt_operation(Operation:symbol)
halt_operation(""):-
    false.

.decl cmp_operation(Operation:symbol)

// ===========================================================================
// Operation Operand Indices
// ===========================================================================

.decl jump_operation_op_index(Operation:symbol,operand_index:operand_index)

.decl call_operation_op_index(Operation:symbol,operand_index:operand_index)

// ===========================================================================
// Address-targeted instruction properties
// ===========================================================================

/**
Find all addresses where a move instruction is used
*/
.decl mov(EA:address)

.decl is_nop(EA:address)

// Reg = Reg is effectively a nop, and may be used as padding.
is_nop(EA):-
    reg_arithmetic_operation(EA,Reg,Reg,1,0).

/**
Returns
*/
.decl return(EA:address) overridable
return(EA):-
    instruction_get_operation(EA,Operation),
    return_operation(Operation).

.decl jump(EA:address) overridable

jump(EA):-
    instruction_get_operation(EA,Operation),
    jump_operation(Operation),
    !arch.return(EA).

.decl call(EA:address)

call(EA):-
    instruction_get_operation(EA,Operation),
    call_operation(Operation).

.decl delay_slot(BranchEA:address,EA:address)

delay_slot(0,0):-
    false.

/**
These operations are either special like LEA (does not read memory) or
are not decoded corectly from capstone

* EA: Instruction address
* OpIndex: Operand index
* Size: Operand size in bytes
*/
.decl operation_size_exception(EA:address,OpIndex:operand_index,Size:unsigned)
operation_size_exception(0,0,0):-
    false.

/**
Arithmetic operation on one source register of the form Dst = Src * Mult + Offset
*/
.decl reg_arithmetic_operation(EA:address,Dst:register,Src:register,Mult:number,Offset:number)

// Simplify operations with two source registers where both registers are the same.
reg_arithmetic_operation(EA,Dst,Src,Mult+1,Offset):-
    Mult != -1,
    arch.reg_reg_arithmetic_operation(EA,Dst,Src,Src,Mult,Offset).

/**
Arithmetic operation on two source registers of the form Dst = Src1 + Src2 * Mult + Offset

Note: Src1 and Src2 *may* be the same register.
*/
.decl reg_reg_arithmetic_operation(EA:address,Dst:register,Src1:register,Src2:register,Mult:number,Offset:number)

// Commutative property
reg_reg_arithmetic_operation(EA,Dst,Reg2,Reg1,1,0):-
    reg_reg_arithmetic_operation(EA,Dst,Reg1,Reg2,1,0).

/**
The location and register where the address of main is loaded.
 */
.decl inferred_main_in_reg(EA:address,Reg:register)

/**
 * Locate where main() is dispatched (i.e., where __libc_start_main is called.)
 */
.decl inferred_main_dispatch(EA:address) overridable

// Most runtimes dispatch main with the first "call" from the binary entry point.
inferred_main_dispatch(CallEA):-
    do_infer_main_function(),
    CallEA = min EA:{
        start_function(Entry),
        instruction(EA,_,_,CallOp,_,_,_,_,_,_),
        arch.call_operation(CallOp),
        code(EA),
        EA >= Entry
    }.

// ===========================================================================
// Registers
// ===========================================================================

/**
Limit the registers that are tracked and transform the names to their 64-bit
versions.
*/
.decl track_register(RegName:register,RegGenericName:register)

/**
This specifies the registers whose value is not kept through a function call
according to the architecture's calling convention.
*/
.decl function_non_maintained_reg(Reg:register)

.decl pc_register(Reg:register)

.decl frame_pointer(Reg:register)

.decl stack_pointer(Reg:register)

.decl return_val_reg(Reg:register)

/**
A pc-relative address 'Val' is loaded into 'Reg' at address 'EA'.
*/
.decl pc_relative_addr(EA:address,Reg:register,Val:number)

pc_relative_addr(0,"",0):- false.


// ===========================================================================
// Other architectural attributes
// ===========================================================================

.decl loop_prefix(Prefix:symbol)
loop_prefix(""):-
    false.

.decl pointer_size(N:unsigned) inline

}
