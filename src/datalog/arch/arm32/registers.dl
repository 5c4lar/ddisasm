//===- registers.dl -----------------------------------------*- datalog -*-===//
//
//  Copyright (C) 2019 GrammaTech, Inc.
//
//  This code is licensed under the GNU Affero General Public License
//  as published by the Free Software Foundation, either version 3 of
//  the License, or (at your option) any later version. See the
//  LICENSE.txt file in the project root for license terms or visit
//  https://www.gnu.org/licenses/agpl.txt.
//
//  This program is distributed in the hope that it will be useful,
//  but WITHOUT ANY WARRANTY; without even the implied warranty of
//  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
//  GNU Affero General Public License for more details.
//
//  This project is sponsored by the Office of Naval Research, One Liberty
//  Center, 875 N. Randolph Street, Arlington, VA 22203 under contract #
//  N68335-17-C-0700.  The content of the information does not necessarily
//  reflect the position or policy of the Government and no official
//  endorsement should be inferred.
//
//===----------------------------------------------------------------------===//
/*
This module stablishes basic information about register:
 - Which registers and tracked/considered in the different analyses
 - Whether they all callee or caller saved according to the ABI
*/

track_register("R0","R0").
track_register("R1","R1").
track_register("R2","R2").
track_register("R3","R3").
track_register("R4","R4").
track_register("R5","R5").
track_register("R6","R6").
track_register("R7","R7").
track_register("R8","R8").

track_register("R9","SB").
track_register("SB","SB").

track_register("R10","SL").
track_register("SL","SL").

track_register("R11","FP").
track_register("FP","FP").

track_register("R12","IP").
track_register("IP","IP").

track_register("R13","SP").
track_register("SP","SP").

track_register("R14","LR").
track_register("LR","LR").

//track_register("R15","PC").
track_register("PC","PC").

track_register("CPSR", "CPSR").

.decl reg_index(RegName:register,Index:unsigned)

reg_index("R0",0).
reg_index("R1",1).
reg_index("R2",2).
reg_index("R3",3).
reg_index("R4",4).
reg_index("R5",5).
reg_index("R6",6).
reg_index("R7",7).
reg_index("R8",8).
reg_index("R9",9).
reg_index("R10",10).
reg_index("R11",11).
reg_index("R12",12).
reg_index("R13",13).
reg_index("R14",14).
reg_index("R15",15).

reg_index(Reg,Index):-
    track_register(Reg0,Reg),
    reg_index(Reg0,Index).

// Use the ARM calling convention.
function_non_maintained_reg("R0").
function_non_maintained_reg("R1").
function_non_maintained_reg("R2").
function_non_maintained_reg("R3").

function_non_maintained_reg("R12").
function_non_maintained_reg("R13").
function_non_maintained_reg("R14").

pc_register("PC").

frame_pointer("FP").

stack_pointer("SP").

return_val_reg("R0").

condition_flags_reg("CPSR").
