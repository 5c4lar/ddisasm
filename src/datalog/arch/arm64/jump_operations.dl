//===- jump_operations.dl -----------------------------------*- datalog -*-===//
//
//  Copyright (C) 2020 GrammaTech, Inc.
//
//  This code is licensed under the GNU Affero General Public License
//  as published by the Free Software Foundation, either version 3 of
//  the License, or (at your option) any later version. See the
//  LICENSE.txt file in the project root for license terms or visit
//  https://www.gnu.org/licenses/agpl.txt.
//
//  This program is distributed in the hope that it will be useful,
//  but WITHOUT ANY WARRANTY; without even the implied warranty of
//  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
//  GNU Affero General Public License for more details.
//
//  This project is sponsored by the Office of Naval Research, One Liberty
//  Center, 875 N. Randolph Street, Arlington, VA 22203 under contract #
//  N68335-17-C-0700.  The content of the information does not necessarily
//  reflect the position or policy of the Government and no official
//  endorsement should be inferred.
//
//===----------------------------------------------------------------------===//
/**
The set of jump operations in aarch64
*/

// Basic jump operations
jump_operation("B").
jump_operation("BR").

/**
Conditional branches
*/
.decl conditional_branch(c:symbol)
conditional_branch("B.EQ").
conditional_branch("B.NE").
conditional_branch("B.GT").
conditional_branch("B.LT").
conditional_branch("B.GE").
conditional_branch("B.LE").
conditional_branch("B.CS").
conditional_branch("B.HS").
conditional_branch("B.CC").
conditional_branch("B.LO").
conditional_branch("B.MI").
conditional_branch("B.PL").
conditional_branch("B.AL").
conditional_branch("B.NV").
conditional_branch("B.VS").
conditional_branch("B.VC").
conditional_branch("B.HI").
conditional_branch("B.LS").

jump_operation(Operation),
conditional_operation(Operation):-
    conditional_branch(Operation).

/**
ARM64 conditional test and jump operations
*/
.decl test_jump_operation(Operation:symbol)
test_jump_operation("CBZ").
test_jump_operation("CBNZ").
test_jump_operation("TBZ").
test_jump_operation("TBNZ").

jump_operation(Operation),
conditional_operation(Operation):-
    test_jump_operation(Operation).

jump_equal_operation("B.EQ").

jump_unequal_operation("B.NE").

jump_operation_op_index(Operation,1):-
    jump_operation(Operation).

call_operation_op_index(Operation,1):-
    call_operation(Operation).
