//===- arch_mips32.dl ---------------------------------------*- datalog -*-===//
//
//  Copyright (C) 2020 GrammaTech, Inc.
//
//  This code is licensed under the GNU Affero General Public License
//  as published by the Free Software Foundation, either version 3 of
//  the License, or (at your option) any later version. See the
//  LICENSE.txt file in the project root for license terms or visit
//  https://www.gnu.org/licenses/agpl.txt.
//
//  This program is distributed in the hope that it will be useful,
//  but WITHOUT ANY WARRANTY; without even the implied warranty of
//  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
//  GNU Affero General Public License for more details.
//
//  This project is sponsored by the Office of Naval Research, One Liberty
//  Center, 875 N. Randolph Street, Arlington, VA 22203 under contract #
//  N68335-17-C-0700.  The content of the information does not necessarily
//  reflect the position or policy of the Government and no official
//  endorsement should be inferred.
//
//===----------------------------------------------------------------------===//

.comp MIPS32 : Arch {

#include "jump_operations.dl"
#include "interrupt_operations.dl"
#include "float_operations.dl"
#include "registers.dl"

move_operation(Operation):-
  store_operation(Operation);
  load_operation(Operation).

move_operation("MOV").
move_operation("MOVE").
move_operation("MOVEP").
move_operation("MOVF").
move_operation("MOVN").
move_operation("MOVT").
move_operation("MOVZ").

store_operation("ST").
store_operation("ST.B").
store_operation("ST.H").
store_operation("ST.W").
store_operation("ST.D").
store_operation("SW").
store_operation("SW16").
store_operation("SWC1").
store_operation("SWC2").
store_operation("SWC3").
store_operation("SWL").
store_operation("SWM16").
store_operation("SWM32").
store_operation("SWP").
store_operation("SWR").
store_operation("SWXC1").
store_operation("SH").
store_operation("SH16").
store_operation("SB").
store_operation("SB16").
store_operation("SC").
store_operation("SCD").
store_operation("SD").
store_operation("SDBBP").
store_operation("SDBBP16").
store_operation("SDC1").
store_operation("SDC2").
store_operation("SDC3").
store_operation("SDL").
store_operation("SDR").
store_operation("SDXC1").

load_operation("LB").
load_operation("LBU16").
load_operation("LBUX").
load_operation("LBU").
load_operation("LD").
load_operation("LD.B").
load_operation("LD.H").
load_operation("LD.W").
load_operation("LD.D").
load_operation("LDC1").
load_operation("LDC2").
load_operation("LDC3").
load_operation("LDI").
load_operation("LDL").
load_operation("LDPC").
load_operation("LDR").
load_operation("LDXC1").
load_operation("LH").
load_operation("LHU16").
load_operation("LHX").
load_operation("LHU").
load_operation("LI16").
load_operation("LL").
load_operation("LLD").
load_operation("LUXC1").
load_operation("LW").
load_operation("LW16").
load_operation("LWC1").
load_operation("LWC2").
load_operation("LWC3").
load_operation("LWL").
load_operation("LWM16").
load_operation("LWM32").
load_operation("LWPC").
load_operation("LWP").
load_operation("LWR").
load_operation("LWUPC").
load_operation("LWU").
load_operation("LWX").
load_operation("LWXC1").
load_operation("LWXS").
load_operation("LI").

mov(EA):-
    instruction_get_operation(EA,Operation),
    move_operation(Operation).

// Do not treat nop in delay_slot as padding:
// see the usage of is_nop in code_inference*.dl
is_nop(EA):-
    instruction_get_operation(EA,"NOP"),
    !delay_slot(_,EA).

return(EA):-
    arch.return_operation(Operation),
    instruction(EA,_,_,Operation,Op,_,_,_,_,_),
    op_regdirect_contains_reg(Op,"RA").

// Conditional moves
conditional_operation("MOVZ").
conditional_operation("MOVN").
// Conditional stores
conditional_operation("SC").
conditional_operation("SCD").
// Conditional traps
conditional_operation("TGE").
conditional_operation("TGEU").
conditional_operation("TLT").
conditional_operation("TLTU").
conditional_operation("TEQ").
conditional_operation("TNE").
conditional_operation("TGEI").
conditional_operation("TGEIU").
conditional_operation("TLTI").
conditional_operation("TLTIU").
conditional_operation("TEQI").
conditional_operation("TNEI").

// Extend jump - don't override.
jump(EA):-
    instruction_get_operation(EA,Operation),
    // JR and JR16 are returns only if the target register is RA.
    // Otherwise, it's a jump.
    return_operation(Operation),
    !return(EA).

delay_slot(BranchEA,EA):-
    next(BranchEA, EA),
    instruction_get_operation(BranchEA,Operation),
    return_operation(Operation),
    !compact_branch_operation(Operation).

delay_slot(BranchEA,EA):-
    next(BranchEA, EA),
    instruction_get_operation(BranchEA,Operation),
    (
        jump_operation(Operation);
        call_operation(Operation)
    ),
    !compact_branch_operation(Operation),
    // indirect jump or indirect call
    !direct_jump(BranchEA,_),
    !direct_call(BranchEA,_).

delay_slot(BranchEA,EA):-
    // direct jump or direct call
    (
        direct_jump(BranchEA,Dest);
        direct_call(BranchEA,Dest)
    ),
    instruction_get_operation(BranchEA,Operation),
    !compact_branch_operation(Operation),
    // Filter invalid BranchEA ----------------------------
    (
        instruction(Dest,_,_,_,_,_,_,_,_,_)
        ;
        Dest = 0, !binary_type("EXEC")
    ),
    next(BranchEA, EA),
    Dest != EA.

op_does_not_read_dest_reg(Operation):-
    instruction_get_operation(_, Operation).


arithmetic_operation("ADD").
arithmetic_operation("ADDIUPC").
arithmetic_operation("ADDIUR1SP").
arithmetic_operation("ADDIUR2").
arithmetic_operation("ADDIUS5").
arithmetic_operation("ADDIUSP").
arithmetic_operation("ADDQH").
arithmetic_operation("ADDQH_R").
arithmetic_operation("ADDQ").
arithmetic_operation("ADDQ_S").
arithmetic_operation("ADDSC").
arithmetic_operation("ADDS_A").
arithmetic_operation("ADDS_S").
arithmetic_operation("ADDS_U").
arithmetic_operation("ADDU16").
arithmetic_operation("ADDUH").
arithmetic_operation("ADDUH_R").
arithmetic_operation("ADDU").
arithmetic_operation("ADDU_S").
arithmetic_operation("ADDVI").
arithmetic_operation("ADDV").
arithmetic_operation("ADDWC").
arithmetic_operation("ADD_A").
arithmetic_operation("ADDI").
arithmetic_operation("ADDIU").
arithmetic_operation("ALUIPC").
arithmetic_operation("AUI").
arithmetic_operation("AUIPC").

arithmetic_operation("DADD").
arithmetic_operation("DADDI").
arithmetic_operation("DADDIU").
arithmetic_operation("DADDIU").

arithmetic_operation("LSA").
arithmetic_operation("LUI").
arithmetic_operation("DAUI").
arithmetic_operation("DAHI").
arithmetic_operation("DATI").
arithmetic_operation("ALUIPC").
arithmetic_operation("SUB").
arithmetic_operation("DSUB").
arithmetic_operation("SUBU").
arithmetic_operation("DSUBU").

// shift/rotate
arithmetic_operation("SLL").
arithmetic_operation("SLL16").
arithmetic_operation("SLLI").
arithmetic_operation("SLLV").
arithmetic_operation("SRA").
arithmetic_operation("SRAI").
arithmetic_operation("SRARI").
arithmetic_operation("SRAR").
arithmetic_operation("SRAV").
arithmetic_operation("SRL").
arithmetic_operation("SRL16").
arithmetic_operation("SRLI").
arithmetic_operation("SRLRI").
arithmetic_operation("SRLR").
arithmetic_operation("SRLV").
arithmetic_operation("ROTR").
arithmetic_operation("ROTRV").
arithmetic_operation("DSLL").
arithmetic_operation("DSLL32").
arithmetic_operation("DSLLV").
arithmetic_operation("DSRA").
arithmetic_operation("DSRA32").
arithmetic_operation("DSRAv").
arithmetic_operation("DSRL").
arithmetic_operation("DSRL32").
arithmetic_operation("DSRV").
arithmetic_operation("DROTR").
arithmetic_operation("DROTR32").
arithmetic_operation("DROTRV").


multiplication_operation("MUL").
multiplication_operation("MULEQ_S").
multiplication_operation("MULEU_S").
multiplication_operation("MULQ_RS").
multiplication_operation("MULQ_S").
multiplication_operation("MULR_Q").
multiplication_operation("MULSAQ_S").
multiplication_operation("MULSA").
multiplication_operation("MULT").
multiplication_operation("MULTU").
multiplication_operation("MULU").
multiplication_operation("MULV").
multiplication_operation("MUL_Q").
multiplication_operation("MUL_S").
multiplication_operation("DMUH").
multiplication_operation("DMUHU").
multiplication_operation("DMUL").
multiplication_operation("DMULT").
multiplication_operation("DMULTU").
multiplication_operation("DMULU").

multiplication_operation("MADD").
multiplication_operation("MADD.S").
multiplication_operation("MADDU").
multiplication_operation("MSUB").
multiplication_operation("MSUBU").
multiplication_operation("MSUBV").
multiplication_operation("MSUBV.H").

arithmetic_operation("DIV").
arithmetic_operation("DDIV").
arithmetic_operation("DIVU").
arithmetic_operation("DDIVU").

arithmetic_operation("MOD").
arithmetic_operation("DMOD").
arithmetic_operation("MODU").
arithmetic_operation("DMODU").


logic_operation("AND").
logic_operation("AND16").
logic_operation("ANDI16").
logic_operation("ANDI").
logic_operation("ANDI.B").
logic_operation("OR").
logic_operation("OR.V").
logic_operation("OR16").
logic_operation("ORI").
logic_operation("ORI.B").
logic_operation("NOR").
logic_operation("NOR.V").
logic_operation("NORI").
logic_operation("NORI.B").
logic_operation("NOT16").
logic_operation("NOT").
logic_operation("XOR").
logic_operation("XOR16").
logic_operation("XORI").
logic_operation("EXT").
logic_operation("EXTP").
logic_operation("EXTPDP").
logic_operation("EXTPDPV").
logic_operation("EXTPV").
logic_operation("EXTRV_RS").
logic_operation("EXTRV_R").
logic_operation("EXTRV_S").
logic_operation("EXTRV").
logic_operation("EXTR_RS").
logic_operation("EXTR_R").
logic_operation("EXTR_S").
logic_operation("EXTR").
logic_operation("EXTS").
logic_operation("EXTS32").
logic_operation("DEXT").
logic_operation("DEXTM").
logic_operation("DEXTU").


read_only_operation(Operation):-
    jump_operation(Operation).

// TODO:
write_only_operation(""):-
    false.

// TODO:
one_op_write(""):-
    false.

pointer_size(4).

call_operation(Operation):-
    call_operation_1op(Operation);
    call_operation_2op(Operation).

.decl call_operation_1op(operation:symbol)

call_operation_1op("JAL").
call_operation_1op("JALC").
call_operation_1op("JALRC").
call_operation_1op("JALR").
call_operation_1op("JALRS16").
call_operation_1op("JALRS").
call_operation_1op("JALS").
call_operation_1op("JALX").
call_operation_1op("JIALC").
call_operation_1op("BAL").
call_operation_1op("BALC").

.decl call_operation_2op(operation:symbol)

call_operation_2op("BEQZALC").
call_operation_2op("BGEZAL").
call_operation_2op("BGEZALC").
call_operation_2op("BGEZALL").
call_operation_2op("BGEZALS").
call_operation_2op("BGTZALC").
call_operation_2op("BLEZALC").
call_operation_2op("BLTZAL").
call_operation_2op("BLTZALC").
call_operation_2op("BLTZALL").
call_operation_2op("BLTZALS").
call_operation_2op("BNEZALC").

syscall_operation("SYSCALL").

return_operation("JR").
return_operation("JR16").
return_operation("JRC").
return_operation("JRADDIUSP").

// No cmp operation.
cmp_operation(""):-
    false.

// CHECK: Do we want to put the followings here?
//cmp_operation("SLT").
//cmp_operation("SLTU").
//cmp_operation("SLTI").
//cmp_operation("SLTIU").

// ADDIU <Register> <Register> <Immediate>
reg_reg_arithmetic_operation(EA,Reg,Reg2,"NONE",1,Immediate):-
    instruction(EA,_,_,"ADDIU",Op1,Op2,Op3,0,_,_),
    op_regdirect_contains_reg(Op3,Reg),
    op_regdirect_contains_reg(Op1,Reg2),
    op_immediate(Op2,Immediate).

// ADDU <Register> <Register> <Register>
reg_reg_arithmetic_operation(EA,Reg,Reg1,Reg2,1,0):-
    instruction(EA,_,_,"ADDU",SrcOp1,SrcOp2,DestOp,0,_,_),
    instruction_get_operation(EA, "ADDU"),
    op_regdirect_contains_reg(DestOp,Reg),
    op_regdirect_contains_reg(SrcOp1,Reg1),
    op_regdirect_contains_reg(SrcOp2,Reg2).

main_load_reg(Main_dispatch,"A0"):-
    main_function_dispatch(Main_dispatch).

}
