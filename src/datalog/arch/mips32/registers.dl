//===- registers.dl -----------------------------------------*- datalog -*-===//
//
//  Copyright (C) 2020 GrammaTech, Inc.
//
//  This code is licensed under the GNU Affero General Public License
//  as published by the Free Software Foundation, either version 3 of
//  the License, or (at your option) any later version. See the
//  LICENSE.txt file in the project root for license terms or visit
//  https://www.gnu.org/licenses/agpl.txt.
//
//  This program is distributed in the hope that it will be useful,
//  but WITHOUT ANY WARRANTY; without even the implied warranty of
//  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
//  GNU Affero General Public License for more details.
//
//  This project is sponsored by the Office of Naval Research, One Liberty
//  Center, 875 N. Randolph Street, Arlington, VA 22203 under contract #
//  N68335-17-C-0700.  The content of the information does not necessarily
//  reflect the position or policy of the Government and no official
//  endorsement should be inferred.
//
//===----------------------------------------------------------------------===//
/*
This module establishes basic information about register:
 - Which registers and tracked/considered in the different analyses
 - Whether they all callee or caller saved according to the ABI
*/

// TODO: does capstone really generate both names?

reg_map_rule("R0","ZERO").
reg_map_rule("R1","AT").
reg_map_rule("R2","V0").
reg_map_rule("R3","V1").
reg_map_rule("R4","A0").
reg_map_rule("R5","A1").
reg_map_rule("R6","A2").
reg_map_rule("R7","A3").
reg_map_rule("R8","T0").
reg_map_rule("R9","T1").
reg_map_rule("R10","T2").
reg_map_rule("R11","T3").
reg_map_rule("R12","T4").
reg_map_rule("R13","T5").
reg_map_rule("R14","T6").
reg_map_rule("R15","T7").
reg_map_rule("R16","S0").
reg_map_rule("R17","S1").
reg_map_rule("R18","S2").
reg_map_rule("R19","S3").
reg_map_rule("R20","S4").
reg_map_rule("R21","S5").
reg_map_rule("R22","S6").
reg_map_rule("R23","S7").
reg_map_rule("R24","T8").
reg_map_rule("R25","T9").
reg_map_rule("R26","K0").
reg_map_rule("R27","K1").
reg_map_rule("R28","GP").
reg_map_rule("R29","SP").
reg_map_rule("R30","FP").
reg_map_rule("R31","RA").
reg_map_rule("RA","RA").

// TODO: what are these? does capstone generate these names?
// should they be tracked?
reg_map_rule("HI0","AC0").
reg_map_rule("HI1","AC1").
reg_map_rule("HI2","AC2").
reg_map_rule("HI3","AC3").

// TODO: what are these? does capstone generate these names?
// should they be tracked?
// AFPR128
/*
reg_map_rule("W0","W0").
reg_map_rule("W1","W1").
reg_map_rule("W2","W2").
reg_map_rule("W3","W3").
reg_map_rule("W4","W4").
reg_map_rule("W5","W5").
reg_map_rule("W6","W6").
reg_map_rule("W7","W7").
reg_map_rule("W8","W8").
reg_map_rule("W9","W9").
reg_map_rule("W10","W10").
reg_map_rule("W11","W11").
reg_map_rule("W12","W12").
reg_map_rule("W13","W13").
reg_map_rule("W14","W14").
reg_map_rule("W15","W15").
reg_map_rule("W16","W16").
reg_map_rule("W17","W17").
reg_map_rule("W18","W18").
reg_map_rule("W19","W19").
reg_map_rule("W20","W20").
reg_map_rule("W21","W21").
reg_map_rule("W22","W22").
reg_map_rule("W23","W23").
reg_map_rule("W24","W24").
reg_map_rule("W25","W25").
reg_map_rule("W26","W26").
reg_map_rule("W27","W27").
reg_map_rule("W28","W28").
reg_map_rule("W29","W29").
reg_map_rule("W30","W30").
reg_map_rule("W31","W31").
*/

general_purpose_reg("AT").
general_purpose_reg("V0").
general_purpose_reg("V1").
general_purpose_reg("A0").
general_purpose_reg("A1").
general_purpose_reg("A2").
general_purpose_reg("A3").
general_purpose_reg("T0").
general_purpose_reg("T1").
general_purpose_reg("T2").
general_purpose_reg("T3").
general_purpose_reg("T4").
general_purpose_reg("T5").
general_purpose_reg("T6").
general_purpose_reg("T7").
general_purpose_reg("S0").
general_purpose_reg("S1").
general_purpose_reg("S2").
general_purpose_reg("S3").
general_purpose_reg("S4").
general_purpose_reg("S5").
general_purpose_reg("S6").
general_purpose_reg("S7").
general_purpose_reg("T8").
general_purpose_reg("T9").
general_purpose_reg("K0").
general_purpose_reg("K1").
general_purpose_reg("GP").
general_purpose_reg("FP").

// Use the MIPS calling convention.

function_non_maintained_reg("AT").

function_non_maintained_reg("V0").
function_non_maintained_reg("V1").

function_non_maintained_reg("A0").
function_non_maintained_reg("A1").
function_non_maintained_reg("A2").
function_non_maintained_reg("A3").

function_non_maintained_reg("T0").
function_non_maintained_reg("T1").
function_non_maintained_reg("T2").
function_non_maintained_reg("T3").
function_non_maintained_reg("T4").
function_non_maintained_reg("T5").
function_non_maintained_reg("T6").
function_non_maintained_reg("T7").

function_non_maintained_reg("T8").
function_non_maintained_reg("T9").

function_non_maintained_reg("K0").
function_non_maintained_reg("K1").

function_non_maintained_reg("RA").

pc_reg(""):-
    false.

frame_pointer("FP").

stack_pointer("SP").

return_reg("V0").
return_reg("V1").

// Instead of a condition flags register, conditional MIPS instructions check
// the condition directly, e.g.:
// BEQ $t0, $t1, .label
condition_flags_reg(""):-
    false.

zero_reg("ZERO").
