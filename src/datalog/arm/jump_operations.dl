//===- jump_operations.dl -----------------------------------*- datalog -*-===//
//
//  Copyright (C) 2019 GrammaTech, Inc.
//
//  This code is licensed under the GNU Affero General Public License
//  as published by the Free Software Foundation, either version 3 of
//  the License, or (at your option) any later version. See the
//  LICENSE.txt file in the project root for license terms or visit
//  https://www.gnu.org/licenses/agpl.txt.
//
//  This program is distributed in the hope that it will be useful,
//  but WITHOUT ANY WARRANTY; without even the implied warranty of
//  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
//  GNU Affero General Public License for more details.
//
//  This project is sponsored by the Office of Naval Research, One Liberty
//  Center, 875 N. Randolph Street, Arlington, VA 22203 under contract #
//  N68335-17-C-0700.  The content of the information does not necessarily
//  reflect the position or policy of the Government and no official
//  endorsement should be inferred.
//
//===----------------------------------------------------------------------===//
/**
The set of jump operations in x64
*/
.decl jump_operation(n:symbol)
.decl unconditional_jump_operation(n:symbol)

.decl jump_equal_operation(n:symbol)
.decl jump_unequal_operation(n:symbol)

jump_operation("B").
jump_operation("B.W").
jump_operation("BEQ").
jump_operation("BNE").
jump_operation("BCS").
jump_operation("BCC").
jump_operation("BMI").
jump_operation("BPL").
jump_operation("BVS").
jump_operation("BVC").
jump_operation("BHI").
jump_operation("BLS").
jump_operation("BGE").
jump_operation("BLT").
jump_operation("BGT").
jump_operation("BLE").
jump_operation("BAL").
jump_operation("BHS"). // equivalent to BCS
jump_operation("BLO"). // equivalent to BCC

jump_operation("BX").
jump_operation("BXEQ").
jump_operation("BXNE").
jump_operation("BXCS").
jump_operation("BXCC").
jump_operation("BXMI").
jump_operation("BXPL").
jump_operation("BXVS").
jump_operation("BXVC").
jump_operation("BXHI").
jump_operation("BXLS").
jump_operation("BXGE").
jump_operation("BXLT").
jump_operation("BXGT").
jump_operation("BXLE").
jump_operation("BXAL").

jump_operation("TBB").
jump_operation("TBH").

jump_operation("CBZ").
jump_operation("CBNZ").

unconditional_jump_operation("B").
unconditional_jump_operation("B.W").

jump_equal_operation("BEQ").

jump_unequal_operation("BNE").

.decl jump_operation_op_index(Operation:symbol,operand_index:operand_index)

jump_operation_op_index(Operation,1):-
    jump_operation(Operation).

.decl call_operation_op_index(Operation:symbol,operand_index:operand_index)

call_operation_op_index(Operation,1):-
    call_operation(Operation).
