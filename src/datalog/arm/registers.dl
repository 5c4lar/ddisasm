//===- registers.dl -----------------------------------------*- datalog -*-===//
//
//  Copyright (C) 2019 GrammaTech, Inc.
//
//  This code is licensed under the GNU Affero General Public License
//  as published by the Free Software Foundation, either version 3 of
//  the License, or (at your option) any later version. See the
//  LICENSE.txt file in the project root for license terms or visit
//  https://www.gnu.org/licenses/agpl.txt.
//
//  This program is distributed in the hope that it will be useful,
//  but WITHOUT ANY WARRANTY; without even the implied warranty of
//  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
//  GNU Affero General Public License for more details.
//
//  This project is sponsored by the Office of Naval Research, One Liberty
//  Center, 875 N. Randolph Street, Arlington, VA 22203 under contract #
//  N68335-17-C-0700.  The content of the information does not necessarily
//  reflect the position or policy of the Government and no official
//  endorsement should be inferred.
//
//===----------------------------------------------------------------------===//
/*
This module stablishes basic information about register:
 - Which registers and tracked/considered in the different analyses
 - Whether they all callee or caller saved according to the ABI
*/

// Limit the registers that are tracked and transform the names to their 64-bit
// versions.
.decl track_register(RegName:register,RegGenericName:register)

track_register("R0","R0").
track_register("R1","R1").
track_register("R2","R2").
track_register("R3","R3").
track_register("R4","R4").
track_register("R5","R5").
track_register("R6","R6").
track_register("R7","R7").
track_register("R8","R8").

track_register("R9","SB").
track_register("SB","SB").

track_register("R10","R10").

track_register("R11","FP").
track_register("FP","FP").

track_register("R12","IP").
track_register("IP","IP").

track_register("R13","SP").
track_register("SP","SP").

track_register("R14","LR").
track_register("LR","LR").

//track_register("R15","PC").
track_register("PC","PC").

// This specifies the registers whose value is not kept through a function call
// according to the ARM calling convention.
.decl function_non_maintained_reg(reg:register)

function_non_maintained_reg("R0").
function_non_maintained_reg("R1").
function_non_maintained_reg("R2").
function_non_maintained_reg("R3").

function_non_maintained_reg("R12").
function_non_maintained_reg("R13").
function_non_maintained_reg("R14").

.decl pc_register(reg:register)

pc_register("PC").

.decl frame_pointer(reg:register)

frame_pointer("FP").

.decl stack_pointer(reg:register)

stack_pointer("SP").

.decl return_val_reg(reg:register)

return_val_reg("R0").
