//===- boundary_value_analysis.dl ---------------------------*- datalog -*-===//
//
//  Copyright (C) 2022 GrammaTech, Inc.
//
//  This code is licensed under the GNU Affero General Public License
//  as published by the Free Software Foundation, either version 3 of
//  the License, or (at your option) any later version. See the
//  LICENSE.txt file in the project root for license terms or visit
//  https://www.gnu.org/licenses/agpl.txt.
//
//  This program is distributed in the hope that it will be useful,
//  but WITHOUT ANY WARRANTY; without even the implied warranty of
//  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
//  GNU Affero General Public License for more details.
//
//  This project is sponsored by the Office of Naval Research, One Liberty
//  Center, 875 N. Randolph Street, Arlington, VA 22203 under contract #
//  N68335-17-C-0700.  The content of the information does not necessarily
//  reflect the position or policy of the Government and no official
//  endorsement should be inferred.
//
//===----------------------------------------------------------------------===//
/**
This analysis looks for comparisons of a register to an immediate in order to
bound the possible values of that register.

For example, in the following jump table code, AL is bounded as less than or
equal to 11 due to the comparison. This boundary value can be used by the
jumptable propagation to determine a max size.

    cmp AL,11
    ja jumptable_default
    lea RDI,QWORD PTR [RIP+.L_jumptable]
    movzx EAX,AL
    movsxd RAX,DWORD PTR [RDI+RAX*4]
    add RAX,RDI
    jmp RAX

*/

/**
A pair of instructions that sets the flags register and then conditionally jump.

Empty on architectures where a flags register is not used.
*/
.decl flags_and_jump_pair(EA_flags:address,EA_jmp:address,CC:condition_code)
.output flags_and_jump_pair

flags_and_jump_pair(EA_flags,EA_jmp,CC):-
    arch.condition_flags_reg(Reg),
    def_used(EA_flags,Reg,EA_jmp,_),
    arch.jump(EA_jmp),
    arch.conditional(EA_jmp,CC).

/**
A pair of instructions that compares a register to an immediate and then
conditionally jumps.
*/
.decl compare_and_jump_immediate(EA_cmp:address,EA_jmp:address,CC:condition_code,Reg:register,Immediate:number)
.output compare_and_jump_immediate

// Branch instruction that uses the result of a compare-to-immediate
compare_and_jump_immediate(EA_cmp,EA_jmp,CC,Reg,Immediate):-
    flags_and_jump_pair(EA_cmp,EA_jmp,CC),
    instruction_get_operation(EA_cmp,Operation),
    arch.cmp_operation(Operation),
    cmp_immediate_to_reg(EA_cmp,Reg,_,Immediate).

// Branch instructions with built-in zero comparisons
compare_and_jump_immediate(EA,EA,CC,Reg,0):-
    instruction_get_operation(EA,Operation),
    arch.cmp_zero_operation(Operation),
    arch.jump(EA),
    arch.conditional(EA,CC),
    instruction_get_op(EA,_,Op),
    (
        // Explicit register
        op_regdirect_contains_reg(Op,Reg)
        ;
        // Implicit register (e.g., Intel "JECXZ")
        register_access(EA,"R",RawReg),
        arch.track_register(RawReg,Reg),
        !op_regdirect_contains_reg(Op,Reg)
    ).

/**
A pair of instructions that compares a register to another register and then
conditionally jumps.
*/
.decl compare_and_jump_register(EA_cmp:address,EA_jmp:address,CC:condition_code,Reg1:register,Reg2:register)

// cmp-and-branch pairs using a flags register
compare_and_jump_register(EA_cmp,EA_jmp,CC,Reg1,Reg2):-
    flags_and_jump_pair(EA_cmp,EA_jmp,CC),
    cmp_reg_to_reg(EA_cmp,Reg1,Reg2).

// Single instruction that compares and branches
compare_and_jump_register(EA,EA,CC,Reg1,Reg2):-
    cmp_reg_to_reg(EA,Reg1,Reg2),
    arch.jump(EA),
    arch.conditional(EA,CC).

/**
Either "MIN", "MAX", "EQ", "NE"
*/
.type limit_type <: symbol

/**
An instruction at EA limits the value of Reg at some MIN or MAX value.

The limit is effective after address EA_limited.
*/
.decl value_reg_limit(EA_cmp:address,EA_jmp:address,EA_limited:address,Reg:register,Value:number,LimitType:limit_type)
.output value_reg_limit

// Each comparison generates two limits - the fallthough case is limited one
// way, and the branch case is limited the other.
// BLT/FLT = "branch/fallthrough limit type"
value_reg_limit(EA_cmp,EA_jmp,EA_branch,Reg,BValue,BLT),
value_reg_limit(EA_cmp,EA_jmp,EA_fallthrough,Reg,FValue,FLT):-
    compare_and_jump_immediate(EA_cmp,EA_jmp,CC,Reg,Immediate),
    direct_jump(EA_jmp,EA_branch),
    may_fallthrough(EA_jmp,EA_fallthrough),
    (
        CC = "E", BLT = "EQ", FLT = "NE", BValue = Immediate, FValue = Immediate;
        CC = "NE", BLT = "NE", FLT = "EQ", BValue = Immediate, FValue = Immediate;

        (CC="A"; CC="G"), BLT = "MIN", FLT = "MAX", BValue = Immediate + 1, FValue = Immediate;
        (CC="AE"; CC="GE"), BLT = "MIN", FLT = "MAX", BValue = Immediate, FValue = Immediate - 1;

        (CC="B"; CC="L"), BLT = "MAX", FLT = "MIN", BValue = Immediate - 1, FValue = Immediate;
        (CC="BE"; CC="LE"), BLT = "MAX", FLT = "MIN", BValue = Immediate, FValue = Immediate + 1
    ).

/**
Jumps where generating a value_reg_limit is not supported.
*/
.decl no_value_reg_limit(EA_jmp:address)
.output no_value_reg_limit

no_value_reg_limit(EA_jmp):-
    compare_and_jump_immediate(_,EA_jmp,CC,_,_),
    (
        CC="O";
        CC="NO";
        CC="P";
        CC="PE";
        CC="S";
        CC="NS"
    ).

// Reg-reg comparisons
no_value_reg_limit(EA_jmp):-
    compare_and_jump_register(_,EA_jmp,_,_,_).

// Flags set by a non-compare instruction
no_value_reg_limit(EA_jmp):-
    flags_and_jump_pair(EA_cmp,EA_jmp,_),
    instruction_get_operation(EA_cmp,Operation),
    !arch.cmp_operation(Operation).

// Flags set by comparison with indirect operand.
no_value_reg_limit(EA_jmp):-
    flags_and_jump_pair(EA_cmp,EA_jmp,_),
    instruction_get_operation(EA_cmp,Operation),
    arch.cmp_operation(Operation),
    instruction_get_op(EA_cmp,_,Op),
    op_indirect(Op,_,_,_,_,_,_).

/**
Basic-block propagation of value_reg_limit

Limits can only exist at CFG edges (from conditional jumps) so this simplifies propagation a bit.
*/
.decl last_value_reg_limit(Block:address,Reg:register,Value:number,LimitType:limit_type)
.output last_value_reg_limit

last_value_reg_limit(EA_limited,Reg,Value,LimitType):-
    value_reg_limit(_,_,EA_limited,Reg,Value,LimitType).

last_value_reg_limit(BlockNext,PropagatedReg,PropagatedVal,PropagatedType):-
    last_value_reg_limit(Block,PropagatedReg,PropagatedVal,PropagatedType),
    block_last_instruction(Block,BlockEnd),
    block_next(BlockEnd,BlockNext),
    !defined_in_block(Block,PropagatedReg),
    (
        // If there is no conditional jump at this CFG edge, then there is no new value_reg_limit.
        !conditional_jump(BlockEnd);
        // The conditional branch does not support generating value_reg_limit.
        no_value_reg_limit(BlockEnd);
        // A compatible value_reg_limit exists
        value_reg_limit(_,BlockEnd,BlockNext,Reg,Val,Type),
        (
            // Different registers.
            Reg != PropagatedReg;

            // Min and max always propagate through a NE check, since they provide more information.
            Reg = PropagatedReg, PropagatedType = "MAX", Type = "NE";
            Reg = PropagatedReg, PropagatedType = "MIN", Type = "NE";

            // The new limit is a less restrictive min or max.
            Reg = PropagatedReg, PropagatedType = "MAX", Type = "MAX", PropagatedVal < Val;
            Reg = PropagatedReg, PropagatedType = "MIN", Type = "MIN", PropagatedVal > Val;

            // We have a NE value that isn't eliminated by the new check.
            Reg = PropagatedReg, PropagatedType = "NE", Type = "NE", PropagatedVal != Val;
            Reg = PropagatedReg, PropagatedType = "NE", Type = "MAX", PropagatedVal <= Val;
            Reg = PropagatedReg, PropagatedType = "NE", Type = "MIN", PropagatedVal >= Val;

            // We have a known value that passes the new check.
            Reg = PropagatedReg, PropagatedType = "E", Type = "MAX", PropagatedVal <= Val;
            Reg = PropagatedReg, PropagatedType = "E", Type = "MIN", PropagatedVal >= Val;
            Reg = PropagatedReg, PropagatedType = "E", Type = "NE", PropagatedVal != Val
        )
    ).
