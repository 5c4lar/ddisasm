/**
 The data_access analysis computes:

-'data_access_patterns' which represent that the address 'Address' is
 accessed with size 'Size' and multiplier 'Multiplier' from an
 instruction in 'FromWhere'.

-'preferred_data_access' the address is most likely accessed from the data access
  pattern located at ea_data_access.

data_access_patterns are computed by checking memory accesses and with the help of the
value analysis. Some special cases are checked explicitly.

data_access_patterns give us very sparse information, but if an
address 'ea' is accessed with a multiplier, it is likely that
'ea'+multiplier, 'ea'+2*multiplier, etc are also accessed the same way.
Unfortunately, we do not know until when.


*/


//////////////////////////////////////////////////////////////////////////////////


.decl data_access_pattern(Address:address,Size:number,Multiplier:number,FromWhere:address)
.output data_access_pattern

.decl preferred_data_access(ea:address,ea_data_access:address)
.output preferred_data_access

//////////////////////////////////////////////////


//single access
data_access_pattern(Address,Size/8 ,0,EA):-
	code(EA),
	instruction_get_op(EA,_Op_index,Op),
	op_indirect(Op,NullSReg,NullReg1,NullReg2,_,Address,Size),
	null_reg(NullSReg),
	null_reg(NullReg1),
	null_reg(NullReg2),

	data_section(Section),
	section(Section,SizeSect,Base),
	Address>=Base,
	Address<=Base+SizeSect.

// directly computed
data_access_pattern(Address+(Offset2*Multiplier),Size/8 ,Multiplier*Multiplier2,EA):-
	code(EA),
	instruction_get_op(EA,Op_index,Op),
	op_indirect(Op,NullSReg,RegBase,RegMult,Multiplier,Address1,Size),
	null_reg(NullSReg),
	!null_reg(RegMult),

	
	def_used(EA_def,RegMult,EA,Op_index),
	best_value_reg(EA_def,RegMult,Multiplier2,Offset_aux2,Type),
	(
	Type!="incomplete",
	Offset2=Offset_aux2
	;
	Type="incomplete",
	Offset2=0
	),

	max(Multiplier*Multiplier2,Multiplier*Multiplier2*(-1))>1,

	(
	null_reg(RegBase),
	Address=Address1
	;
	!null_reg(RegBase),
	def_used(EA_base,RegBase,EA,Op_index),
	best_value_reg(EA_base,RegBase,0,Address2,"complete"),
	Address=Address1+Address2
	),
	
	data_section(Section),
	section(Section,SizeSect,Base),
	Address+(Offset2*Multiplier)>=Base,
	Address+(Offset2*Multiplier)<=Base+SizeSect.

// indirectly computed
data_access_pattern(Offset+Address,Size/8 ,Multiplier,EA):-
	code(EA),
	instruction_get_op(EA,Op_index,Op),
	op_indirect(Op,NullSReg,Reg,RegBase,MultiplierBase,Address1,Size),
	null_reg(NullSReg),
	def_used(EA_def,Reg,EA,Op_index),
	best_value_reg(EA_def,Reg,Multiplier,Offset_aux,Type),
	(
	Type!="incomplete",
	Offset=Offset_aux
	;
	Type="incomplete",
	Offset=0
	),
	(
	null_reg(RegBase),
	Address=Address1
	;
	!null_reg(RegBase),
	MultiplierBase=1,
	def_used(EA_base,RegBase,EA,Op_index),
	best_value_reg(EA_base,RegBase,0,Address2,"complete"),
	Address=Address1+Address2
	),
	data_section(Section),
	section(Section,SizeSect,Base),
	Offset+Address>=Base,
	Offset+Address<=Base+SizeSect.

// pc relative
data_access_pattern(Address,Size/8 ,0,EA):-
	code(EA),
	pc_relative_operand_complete(EA,_,Address,Size),
	data_section(Section),
	section(Section,SizeSect,Base),
	Address>=Base,
	Address<=Base+SizeSect.
	
//typical byte index
data_access_pattern(Address,1,1,EA):-
	code(EA),
	instruction_get_op(EA,Index,Op),
	op_indirect(Op,NullSReg,Reg,NullReg1,_,Address,8),
	null_reg(NullSReg),
	null_reg(NullReg1),
	!null_reg(Reg),

	def_used(EA_def,Reg,EA,Index),	
	best_value_reg(EA_def,Reg,1,0,_),

	data_section(Section),
	section(Section,SizeSect,Base),
	Address>=Base,
	Address<=Base+SizeSect.

//typical word index
data_access_pattern(Address,2,2,EA):-
	code(EA),
	instruction_get_op(EA,Index,Op),
	op_indirect(Op,NullSReg,Reg,Reg,1,Address,16),
	null_reg(NullSReg),
	!null_reg(Reg),
	def_used(EA_def,Reg,EA,Index),	
	best_value_reg(EA_def,Reg,1,0,_),

	data_section(Section),
	section(Section,SizeSect,Base),
	Address>=Base,
	Address<=Base+SizeSect.

	

///////////////////////////////////////////////////////////////////////////////
//If threre are two nearby memory accesses with the same multiplier
// so their accesses are interleaved
// we consider they access the same data structure array
// so we propagate them together

// data_access_pattern at 'EA1' with size 'Size1' and multiplier 'Multiplier'
// is paired with data_access_pattern at 'EA2' with size 'Size2' and multiplier 'Multiplier'
.decl paired_data_access(EA1:address,Size1:number,Multiplier:number,
			 EA2:address,Size2:number,Diff:number)
// size in bytes			 
.output paired_data_access			 
paired_data_access(EA1,Size1,Multiplier,EA2,Size2,Diff):-
			 data_access_pattern(EA1,Size1,Multiplier,Ref1),
			 data_access_pattern(EA2,Size2,Multiplier,Ref2),
			 EA1<EA2,
			 EA1+Multiplier>=EA2+Size2,
			 Diff=EA2-EA1,
			 Ref1+200>=max(Ref1,Ref2),
			 Ref2+200>=max(Ref1,Ref2).


.decl next_paired_data_access(EA1:address,Size1:number,Multiplier:number,
			 EA2:address,Size2:number,Diff:number)
			 
next_paired_data_access(EA1,Size1,Multiplier,EA2,Size2,Diff2):-
	data_access_pattern(EA1,Size1,Multiplier,_),
	Min_diff=min Diff : paired_data_access(EA1,Size1,Multiplier,_,_,Diff),
	paired_data_access(EA1,Size1,Multiplier,EA2,Size2,Diff2),
	Min_diff>= Diff2.

.decl restart_paired_data_access(EA1:address,Size1:number,Multiplier:number,
			 EA2:address,Size2:number,Diff:number)
			 
restart_paired_data_access(EA1,Size1,Multiplier,EA2,Size2,Diff2):-
	data_access_pattern(EA1,Size1,Multiplier,_),
	!paired_data_access(_,_,Multiplier,EA1,Size1,_),
	
	Max_diff=max Diff : paired_data_access(EA1,Size1,Multiplier,_,_,Diff),
	paired_data_access(EA1,Size1,Multiplier,EA2,Size2,Diff2),
	Max_diff<= Diff2.
	


// the addresses that are covered by data_access_patterns
.decl taken_by_data_access_pattern(EA:address,Offset:number)

taken_by_data_access_pattern(EA,Size):-
	data_access_pattern(EA,Size,_,_).
taken_by_data_access_pattern(EA+1,Rem-1):-
	taken_by_data_access_pattern(EA,Rem),
	Rem>1.


// group data according to labels
.decl individual_propagated_data_access(ea:address,ea_label:address,offset:number,multiplier:number)

individual_propagated_data_access(EA,EA,0,Mult):-
	data_access_pattern(EA,Size,Mult,_Ref),
	!paired_data_access(EA,Size,Mult,_,_,_),
	!paired_data_access(_,_,Mult,EA,Size,_).	
	
individual_propagated_data_access(EA+Multiplier,EA_label,EA+Multiplier-EA_label,Multiplier):-
	individual_propagated_data_access(EA,EA_label,_,Multiplier),
	data_byte(EA+Multiplier,_),
	//do not cross data access or labels
	(!symbolic_data_operand_candidate(_,_,EA+Multiplier)
	;
	//unless is a label generated by the same access
	symbolic_data_operand_candidate(Ref,_,EA+Multiplier),
	data_access_pattern(EA_label,_,Mult,Ref)
	),
	!address_in_data_refined(_,EA+Multiplier),
	(
  	   !taken_by_data_access_pattern(EA+Multiplier,_)
	;
	   //is an access that matches the existing
	   data_access_pattern(EA+Multiplier,Size,Multiplier,Ref),
	   data_access_pattern(EA_label,Size,Multiplier,Reg)
	),
	pointer_size(Pt_size),
	address_array_range.no_overlap(EA,Pt_size).


// group data according to labels
.decl paired_propagated_data_access(ea:address,ea_label:address,offset:number,multiplier:number)


paired_propagated_data_access(EA,EA,0,Mult):-
	data_access_pattern(EA,Size,Mult,_),
	next_paired_data_access(EA,Size,Mult,_,_,_).
	
paired_propagated_data_access(EA,EA,0,Mult):-
	data_access_pattern(EA,Size,Mult,_),
	restart_paired_data_access(_,_,Mult,EA,Size,_).	
	
paired_propagated_data_access(EA+Multiplier,EA_label,EA+Multiplier-EA_label,Multiplier):-
	paired_propagated_data_access(EA,EA_label,_,Multiplier),
	data_byte(EA+Multiplier,_),
	//do not cross data access or labels	
	!symbolic_data_operand_candidate(_,_,EA+Multiplier),
	!address_in_data_refined(_,EA+Multiplier),
	(
	   !taken_by_data_access_pattern(EA+Multiplier,_)
	;
	   //is an access that matches the existing
	   data_access_pattern(EA+Multiplier,Size,Multiplier,Ref),
	   data_access_pattern(EA_label,Size,Multiplier,Reg)
	),
	pointer_size(Pt_size),
	address_array_range.no_overlap(EA,Pt_size),
//propagate paired accesses together
	(
	    next_paired_data_access(EA_paired,_,Multiplier,EA_label,_,Diff),
	    paired_propagated_data_access(EA+Multiplier-Diff,EA_paired,_,Multiplier)
	;
	    restart_paired_data_access(EA_label,_,Multiplier,EA_paired,_,Diff),
	    paired_propagated_data_access(EA+Diff,EA_paired,_,Multiplier)
	).
	
.decl propagated_data_access(ea:address,ea_label:address,distance:number,multiplier:number)


// count offset after the first propagation so patterns
// with higher multiplier prevail in the first propagation

propagated_data_access(EA,EA_label,Distance,Multiplier):-
	paired_propagated_data_access(EA,EA_label,_,Multiplier),
	Reference=EA_label+Multiplier,
	Distance=max(Reference-EA,EA-Reference).
propagated_data_access(EA,EA_label,Distance,Multiplier):-
	individual_propagated_data_access(EA,EA_label,_,Multiplier),
	Reference=EA_label+Multiplier,
	Distance=max(Reference-EA,EA-Reference).
	

.decl initial_preferred_data_access(EA:address,EA_label:address)

initial_preferred_data_access(EA,EA_label):-
	Min_Distance= min Distance:{propagated_data_access(EA,_,Distance,_)},
	propagated_data_access(EA,EA_label,Selected_distance,_),
	Min_Distance>=Selected_distance.


.decl discarded_propagated_access(EA:address,EA_label:address,Multiplier:number)


discarded_propagated_access(EA,EA_label2,Multiplier):-
	initial_preferred_data_access(EA,EA_label),
	propagated_data_access(EA,EA_label2,_,Multiplier),
	EA_label2!=EA_label.

discarded_propagated_access(EA+Multiplier,EA_label,Multiplier):-
	discarded_propagated_access(EA,EA_label,Multiplier),
	propagated_data_access(EA+Multiplier,EA_label,_,Multiplier).


preferred_data_access(EA,EA_label):-
	initial_preferred_data_access(EA,EA_label),
	!discarded_propagated_access(EA,EA_label,_).
	
