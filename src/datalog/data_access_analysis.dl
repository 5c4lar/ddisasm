//////////////////////////////////////////////////////////////////////////////////
// The address 'Address' is accessed with size 'Size' and multiplier 'Multiplier'
// from an instruction in 'FromWhere'

.decl data_access_pattern(Address:address,Size:number,Multiplier:number,FromWhere:address)
.output data_access_pattern

.decl preferred_data_access(ea:address,ea_label:address)
.output preferred_data_access

//////////////////////////////////////////////////


//single access
data_access_pattern(Address,Size/8 ,0,EA):-
	code(EA),
	instruction_get_op(EA,_Op_index,Op),
	op_indirect(Op,NullSReg,NullReg1,NullReg2,_,Address,Size),
	null_reg(NullSReg),
	null_reg(NullReg1),
	null_reg(NullReg2),

	data_section(Section),
	section(Section,SizeSect,Base),
	Address>=Base,
	Address<=Base+SizeSect.

// directly computed
data_access_pattern(Address,Size/8 ,Multiplier,EA):-
	code(EA),
	instruction_get_op(EA,_Op_index,Op),
	op_indirect(Op,NullSReg,NullReg1,RegMult,Multiplier,Address,Size),
	null_reg(NullSReg),
	null_reg(NullReg1),
	!null_reg(RegMult),

	data_section(Section),
	section(Section,SizeSect,Base),
	Address>=Base,
	Address<=Base+SizeSect.


// pc relative
data_access_pattern(Address,Size/8 ,0,EA):-
	code(EA),
	pc_relative_operand_complete(EA,_,Address,Size),

	data_section(Section),
	section(Section,SizeSect,Base),
	Address>=Base,
	Address<=Base+SizeSect.
	
//typical byte index
data_access_pattern(Address,1,1,EA):-
	code(EA),
	instruction_get_op(EA,Index,Op),
	op_indirect(Op,NullSReg,Reg,NullReg1,_,Address,8),
	null_reg(NullSReg),
	null_reg(NullReg1),
	!null_reg(Reg),

	def_used(EA_def,Reg,EA,Index),	
	!value_reg(EA_def,Reg,_,_,_,_,_),

	data_section(Section),
	section(Section,SizeSect,Base),
	Address>=Base,
	Address<=Base+SizeSect.


//typical word index
data_access_pattern(Address,2,2,EA):-
	code(EA),
	instruction_get_op(EA,Index,Op),
	op_indirect(Op,NullSReg,Reg,Reg,1,Address,16),
	null_reg(NullSReg),
	!null_reg(Reg),
	def_used(EA_def,Reg,EA,Index),	
	!value_reg(EA_def,Reg,_,_,_,_,_),

	data_section(Section),
	section(Section,SizeSect,Base),
	Address>=Base,
	Address<=Base+SizeSect.


// indirectly computed
data_access_pattern(Offset+Address,Size/8 ,Multiplier,EA):-
	code(EA),
	instruction_get_op(EA,Op_index,Op),
	op_indirect(Op,NullSReg,Reg,NullReg1,_,Address,Size),
	null_reg(NullSReg),
	null_reg(NullReg1),
	def_used(EA_def,Reg,EA,Op_index),
	Max_steps=max Steps:{value_reg(EA_def,Reg,_,_,_,_,Steps)},	
	value_reg(EA_def,Reg,_,_,Multiplier,Offset,St),
	St>=Max_steps,

	data_section(Section),
	section(Section,SizeSect,Base),
	Offset+Address>=Base,
	Offset+Address<=Base+SizeSect.

	

///////////////////////////////////////////////////////////////////////////////
//If threre are two nearby memory accesses with the same multiplier
// so their accesses are interleaved
// we consider they access the same data structure array
// so we propagate them together

// data_access_pattern at 'EA1' with size 'Size1' and multiplier 'Multiplier'
// is paired with data_access_pattern at 'EA2' with size 'Size2' and multiplier 'Multiplier'
.decl paired_data_access(EA1:address,Size1:number,Multiplier:number,
			 EA2:address,Size2:number,Diff:number)
// size in bytes			 
.output paired_data_access			 
paired_data_access(EA1,Size1,Multiplier,EA2,Size2,Diff):-
			 data_access_pattern(EA1,Size1,Multiplier,Ref1),
			 data_access_pattern(EA2,Size2,Multiplier,Ref2),
			 EA1<EA2,
			 EA1+Multiplier>=EA2+Size2,
			 Diff=EA2-EA1,
			 (
			 Ref1<Ref2,
			 Ref1+200>=Ref2
			 ;
			 Ref2<Ref1,
			 Ref2+200>=Ref1
			 ).

// the addresses that are covered by data_access_patterns
.decl taken_by_data_access_pattern(EA:address,Offset:number)

taken_by_data_access_pattern(EA,Size):-
	data_access_pattern(EA,Size,_,_).
taken_by_data_access_pattern(EA+1,Rem-1):-
	taken_by_data_access_pattern(EA,Rem),
	Rem>1.


// group data according to labels
.decl individual_propagated_data_access(ea:address,ea_label:address,offset:number,multiplier:number)

individual_propagated_data_access(EA,EA,0,Mult):-
	data_access_pattern(EA,Size,Mult,_Ref),
	!paired_data_access(EA,Size,Mult,_,_,_),
	!paired_data_access(_,_,Mult,EA,Size,_).	
	
individual_propagated_data_access(EA+Multiplier,EA_label,EA+Multiplier-EA_label,Multiplier):-
	individual_propagated_data_access(EA,EA_label,_,Multiplier),
	data_byte(EA+Multiplier,_),
	//do not cross data access or labels
	!symbolic_data_operand_candidate(_,_,EA+Multiplier),
	!address_in_data_refined(_,EA+Multiplier),
	!taken_by_data_access_pattern(EA+Multiplier,_),
	address_array_range.no_overlap(EA,8).


// group data according to labels
.decl paired_propagated_data_access(ea:address,ea_label:address,offset:number,multiplier:number)


paired_propagated_data_access(EA,EA,0,Mult):-
	data_access_pattern(EA,Size,Mult,_),
	paired_data_access(EA,Size,Mult,_,_,_).
	
paired_propagated_data_access(EA,EA,0,Mult):-
	data_access_pattern(EA,Size,Mult,_),
	paired_data_access(_,_,Mult,EA,Size,_).	
	
paired_propagated_data_access(EA+Multiplier,EA_label,EA+Multiplier-EA_label,Multiplier):-
	paired_propagated_data_access(EA,EA_label,_,Multiplier),
	data_byte(EA+Multiplier,_),
	//do not cross data access or labels	
	!symbolic_data_operand_candidate(_,_,EA+Multiplier),
	!address_in_data_refined(_,EA+Multiplier),	
	!taken_by_data_access_pattern(EA+Multiplier,_),
	address_array_range.no_overlap(EA,8),
//propagate paired accesses together
	(
	  paired_data_access(EA_label,_,Multiplier,EA_paired,_,Diff),
 	  paired_propagated_data_access(EA+Diff,EA_paired,_,Multiplier)
	;
	   !paired_data_access(EA_label,_,Multiplier,_,_,_)
	),
 	(
          paired_data_access(EA_paired2,_,Multiplier,EA_label,_,Diff2),
          paired_propagated_data_access(EA+Multiplier-Diff2,EA_paired2,_,Multiplier)
	   ;
           !paired_data_access(_,_,Multiplier,EA_label,_,_)
	).
	
.decl propagated_data_access(ea:address,ea_label:address,offset:number,multiplier:number)


propagated_data_access(EA,EA_label,Offset,Multiplier):-
	paired_propagated_data_access(EA,EA_label,Offset,Multiplier).
propagated_data_access(EA,EA_label,Offset,Multiplier):-
	individual_propagated_data_access(EA,EA_label,Offset,Multiplier).
	


preferred_data_access(EA,EA_label):-
	Min_Offset= min Offset:{propagated_data_access(EA,_,Offset,_)},
	propagated_data_access(EA,EA_label,Selected_offset,_),
	Min_Offset>=Selected_offset.
