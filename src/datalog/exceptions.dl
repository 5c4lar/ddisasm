//===- exceptions.dl --------------------------------------------------*- datalog -*-===//
//
//  Copyright (C) 2019 GrammaTech, Inc.
//
//  This code is licensed under the GNU Affero General Public License
//  as published by the Free Software Foundation, either version 3 of
//  the License, or (at your option) any later version. See the
//  LICENSE.txt file in the project root for license terms or visit
//  https://www.gnu.org/licenses/agpl.txt.
//
//  This program is distributed in the hope that it will be useful,
//  but WITHOUT ANY WARRANTY; without even the implied warranty of
//  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
//  GNU Affero General Public License for more details.
//
//  This project is sponsored by the Office of Naval Research, One Liberty
//  Center, 875 N. Randolph Street, Arlington, VA 22203 under contract #
//  N68335-17-C-0700.  The content of the information does not necessarily
//  reflect the position or policy of the Government and no official
//  endorsement should be inferred.
//
//===----------------------------------------------------------------------===//

.decl cie_entry(addr: address, length:number,codeAlignmentFactor:number,DataAlignmentFactor:number)
.input cie_entry

.decl cie_encoding(addr: address, FdeEncoding:number, LsdaEncoding:number)
.input cie_encoding

.decl cie_personality(addr:address,Personality:address,PersonalityPos:address,PersonalitySize:number,Encoding:number)
.input cie_personality

.decl fde_entry(addr: address,length:number,cie:address, start:address, end:address,lsda:address)
.input fde_entry

.decl fde_pointer_locations(addr:address,startLocation:address,endLocation:address,
                            endSize:number,lsdaLocation:address,lsdaSize:number)
.input fde_pointer_locations

.decl fde_instruction(addr:address,index:number,size:number,insn:symbol,op1:number,op2:number)
.input fde_instruction

.decl lsda(lsdaAddress:address,callsiteTable:address,callsiteTableEncoding:number,
           typeTable:address, typeTableEncoding:number, landingPadBaseAddress: address)
.input lsda

.decl lsda_pointer_locations(lsdaAddress:address,typeTablePointerLocation:address,callsiteTablePointerLoc:address)
.input lsda_pointer_locations

.decl lsda_callsite(CallSiteTable_address:address,EA_start:address, start:address,
    EA_end:address,end:address,
    EA_landingPad:address,landingPad:address,EA_endLandindPad:address)
.input lsda_callsite

.decl lsda_type_entry(lsdaTypeTableAddress:address, index:number,address:address)
.input lsda_type_entry
/////////////////////////////////////////////////////////////////////////////////
// output predicates

.decl cfi_directive(BlockAddress:address,Offset:number,LocalIndex:number,directive:symbol,Reference:address, Nargs:number,arg1:number,arg2:number)
.output cfi_directive

// symbol_special_encoding marks symbols that are encoded with uleb128 or sleb128.
.decl symbol_special_encoding(EA:address,encoding:symbol)
.output symbol_special_encoding

/////////////////////////////////////////////////////////////////////////////////
// Extract information important for disassembly
.decl fde_addresses(start:address, end:address)

fde_addresses(Start,End):-
    fde_entry(_,_,_,Start,End,_).

.decl lsda_callsite_addresses(Start:address,End:address,LandingPad:address)

lsda_callsite_addresses(Start,End,LandingPad):-
    lsda_callsite(_,_,Start,_,End,_,LandingPad,_).


/////////////////////////////////////////////////////////////////////////////////
// Symbols in lsda callsite table

symbol_special_encoding(EA_start,EncodingName),
symbol_special_encoding(EA_end,EncodingName),
symbol_special_encoding(EA_landingPad,EncodingName):-
    lsda_callsite(CallSiteTable_address,EA_start,_,EA_end,_,EA_landingPad,_,_),
    lsda(_,CallSiteTable_address,CallSiteEncoding,_,_,_),
    special_encoding(Encoding,EncodingName),
    CallSiteEncoding % 16 = Encoding.


//region beginning
symbol_minus_symbol(EA_start,Size,LandingPadBaseAddress,StartRegion):-
    lsda_callsite(CallSiteTable_address, EA_start, StartRegion,EA_end,_,_,_,_),
    lsda(_,CallSiteTable_address,_,_,_,LandingPadBaseAddress),
    Size= EA_end-EA_start.

//region end
symbol_minus_symbol(EA_end,Size,StartRegion,EndRegion):-
    lsda_callsite(_, _, StartRegion,EA_end,EndRegion,EA_landingPad,_,_),
    Size= EA_landingPad-EA_end.

//landing pad
symbol_minus_symbol(EA_landingPad,Size,LandingPadBaseAddress,LandingPad):-
    lsda_callsite(CallSiteTable_address, _, _,_,_,EA_landingPad,LandingPad,EA_endLandingPad),
    lsda(_,CallSiteTable_address,_,_,_,LandingPadBaseAddress),
    LandingPad!=0,
    Size= EA_endLandingPad-EA_landingPad.

// Symbols in lsda typetable
symbolic_data(EAType,EncodingSize,Type):-
    lsda_type_entry(LsdaTypeTableAddress, Index,Type),
    lsda(_,_,_,LsdaTypeTableAddress, TypeTableEncoding, _),
    TypeTableEncoding % 16 = Encoding,
    dwarf_encoding_size(Encoding,EncodingSize),
    EAType=LsdaTypeTableAddress-(EncodingSize*(Index+1)),
    Type!=0.

////////////////////////////////////////////////////////////////////////////////
// cie symbols

// cie size
symbol_minus_symbol(Addr,4,Addr+4,Addr+Length+4):-
    cie_entry(Addr,Length,_,_).

// personality
symbol_special_encoding(PersonalityPos,EncodingName):-
    cie_personality(_,Personality,PersonalityPos,_,PersonalityEncoding),
    Personality!=0,
    special_encoding(Encoding,EncodingName),
    PersonalityEncoding % 16 = Encoding.

symbolic_data(PersonalityPos,Size,Personality):-
    cie_personality(_,Personality,PersonalityPos,Size,_),
    Personality!=0.

/////////////////////////////////////////////////////////////////////////////////
// fde symbols

// fde size
symbol_minus_symbol(Addr,4,Addr+4,Addr+Length+4):-
    fde_entry(Addr,Length,_, _, _,_),
    !last_fde(Addr).

symbol_minus_symbol(Addr,4,Addr+4,StartSection+Size):-
    fde_entry(Addr,_,_, _, _,_),
    last_fde(Addr),
    section(".eh_frame",Size,StartSection).

//cie offset
symbol_minus_symbol(Addr+4,4,Cie,Addr+4):-
    fde_entry(Addr,_,Cie, _, _,_).

// begin pointer
symbol_special_encoding(StartLocation,EncodingName),
symbol_special_encoding(EndLocation,EncodingName):-
    fde_pointer_locations(Addr,StartLocation,EndLocation, _,_,_),
    fde_entry(Addr,_,Cie, StartFunction, _,_),
    cie_encoding(Cie,FdeEncoding,_),
    special_encoding(Encoding,EncodingName),
    FdeEncoding % 16 = Encoding.


symbolic_data(StartLocation,EndLocation-StartLocation,StartFunction):-
    fde_entry(Addr,_,Cie, StartFunction, _,_),
    cie_encoding(Cie,FdeEncoding,_),
    // absolute encoding
    FdeEncoding / 16 =0,
    fde_pointer_locations(Addr,StartLocation,EndLocation, _,_,_).

symbol_minus_symbol(StartLocation,EndLocation-StartLocation,StartLocation,StartFunction):-
    fde_entry(Addr,_,Cie, StartFunction, _,_),
    cie_encoding(Cie,FdeEncoding,_),
    // pc-relative encoding
    FdeEncoding / 16 =1,
    fde_pointer_locations(Addr,StartLocation,EndLocation, _,_,_).


// end pointer
symbol_minus_symbol(EndLocation,EndSize,StartFunction,EndFunction):-
    fde_entry(Addr,_,_, StartFunction, EndFunction,_),
    fde_pointer_locations(Addr,_,EndLocation, EndSize,_,_).

// lsda pointer
symbol_special_encoding(LsdaLocation,EncodingName):-
    fde_pointer_locations(Addr,_,_, _,LsdaLocation,_),
    fde_entry(Addr,_,Cie, _, _,_),
    cie_encoding(Cie,_,LsdaEncoding),
    special_encoding(Encoding,EncodingName),
    LsdaEncoding % 16 = Encoding.

symbolic_data(LsdaLocation,LsdaSize,LsdaAddress):-
    fde_entry(Addr,_,Cie, _, _,LsdaAddress),
    fde_pointer_locations(Addr,_,_, _,LsdaLocation,LsdaSize),
    LsdaSize > 0,
    cie_encoding(Cie,_,LsdaEncoding),
    // absolute encoding
    LsdaEncoding / 16 =0.

symbol_minus_symbol(LsdaLocation,LsdaSize,LsdaLocation,LsdaAddress):-
    fde_entry(Addr,_,Cie, _, _,LsdaAddress),
    fde_pointer_locations(Addr,_,_, _,LsdaLocation,LsdaSize),
    cie_encoding(Cie,_,LsdaEncoding),
    // pc-relative enconding
    LsdaEncoding / 16 =1.


// instructions
symbol_minus_symbol(InstructionAddr+1,Size-1,Addr+Advance,Addr):-
    fde_instruction(FdeAddr,Index,Size,"advance_loc",Advance,_),
    Size>1,
    fde_instruction_pos(FdeAddr,Index,InstructionAddr),
    fde_instruction_ref(FdeAddr,Index,_,Addr),
    fde_entry(FdeAddr,_,Cie,_,_,_),
    cie_entry(Cie,_,1,_).

/////////////////////////////////////////////////////////////////
// Auxiliary predicates for symbols
.decl special_encoding(Code:number,Name:symbol)

special_encoding(1,"uleb128").
special_encoding(9,"sleb128").

.decl dwarf_encoding_size(Encoding:number,Size:number)

dwarf_encoding_size(2,2).
dwarf_encoding_size(3,4).
dwarf_encoding_size(4,8).

dwarf_encoding_size(10,2).
dwarf_encoding_size(11,4).
dwarf_encoding_size(12,8).

.decl last_fde(Addr:address)

last_fde(Addr):-
    fde_entry(Addr,Length,_, _, _,_),
    !fde_entry(Addr+Length+4,_,_, _, _,_),
    !cie_entry(Addr+Length+4,_,_,_).

//////////////////////////////////////////////////////////////////////////////////
// position of the instruction in the fde entry

.decl fde_instruction_pos(FdeAddr:address,Index:number,InstructionAddr:address)
.output fde_instruction_pos

fde_instruction_pos(FdeAddr,0,InstructionAddr):-
    fde_pointer_locations(FdeAddr,_,_, _,LsdaLocation,LsdaSize),
    InstructionAddr=LsdaLocation+LsdaSize.

fde_instruction_pos(FdeAddr,Index+1,InstructionAddr+Size):-
    fde_instruction_pos(FdeAddr,Index,InstructionAddr),
    fde_instruction(FdeAddr,Index,Size,_,_,_).

// location to which the instruction refers
.decl fde_instruction_ref(FdeAddr:address,Index:number,LocalIndex:number,ReferenceAddr:address)

// LocalIndex is 3 because the instruction comes after startproc, lsda and personality.
fde_instruction_ref(FdeAddr,0,3,StartFunction):-
    fde_entry(FdeAddr,_, _,StartFunction,_,_).

fde_instruction_ref(FdeAddr,Index+1,LocalIndex+1,Addr):-
    fde_instruction_ref(FdeAddr,Index,LocalIndex,Addr),
    fde_instruction(FdeAddr,Index,_,Insn,_,_),
    Insn!="advance_loc",
    Insn!="cf_advance_loc".

fde_instruction_ref(FdeAddr,Index+1,0,Addr+(CodeAlignmentFactor*Advance)):-
    fde_instruction_ref(FdeAddr,Index,_,Addr),
    fde_entry(FdeAddr,_,Cie,_,_,_),
    cie_entry(Cie,_,CodeAlignmentFactor,_),
    (fde_instruction(FdeAddr,Index,_,"advance_loc",Advance,_);
    fde_instruction(FdeAddr,Index,_,"cf_advance_loc",Advance,_)).

//////////////////////////////////////////////////////////////////////////////////
// Computation of cfi directives


// special directives
cfi_directive(StartFunction,0,0,".cfi_startproc",0,0,0,0):-
    fde_addresses(StartFunction, _),
    refined_block(StartFunction).


cfi_directive(StartFunction,0,1,".cfi_lsda",Lsda,1,Encoding,0):-
    fde_entry(_,_,_,StartFunction,_,Lsda),
    (Lsda!=0,Encoding=3;
     Lsda=0, Encoding=255).

cfi_directive(StartFunction,0,2,".cfi_personality",Personality,1,Encoding,0):-
    fde_entry(_,_,Cie,StartFunction,_,_),
    cie_personality(Cie,Personality,_,_,_),
    (Personality!=0,Encoding=3;
     Personality=0, Encoding=255).


cfi_directive(Block,BlockSize,0,".cfi_endproc",0,0,0,0):-
    block_information(Block,BlockSize),
    fde_addresses(_, Block+BlockSize).

// directives that correspond to an instruction
cfi_directive(Block,Addr-Block,LocalIndex,cat(".cfi_",Insn),0,NOperands,ScaledOp1,ScaledOp2):-
    fde_instruction(FdeAddr,Index,_,Insn,Op1,Op2),
    cie_noperands(Insn,NOperands),
    Insn!="advance_loc",
    Insn!="cf_advance_loc",
    Insn!="nop",
    Insn!="unhandled_instruction",
    fde_entry(FdeAddr,_,Cie,_,_,_),
    cie_entry(Cie,_,_,DataAlignmentFactor),
    (
        !cie_operand_is_register(Insn,1),
        ScaledOp1=Op1*DataAlignmentFactor
        ;
        cie_operand_is_register(Insn,1),
        ScaledOp1=Op1
    ),
    (
        !cie_operand_is_register(Insn,2),
        ScaledOp2=Op2*DataAlignmentFactor
        ;
        cie_operand_is_register(Insn,2),
        ScaledOp2=Op2
    ),
    fde_instruction_ref(FdeAddr,Index,LocalIndex,Addr),
    code_in_refined_block(Addr,Block).

// instructions that are encoded as a block of bytes (because they don't have their own cfi directive)
cfi_directive(Block,Addr-Block,LocalIndex,".cfi_escape",InstructionBytesAddr,Size,0,0):-
    fde_instruction(FdeAddr,Index,Size,"unhandled_instruction",_,_),
    fde_instruction_pos(FdeAddr,Index,InstructionBytesAddr),
    fde_instruction_ref(FdeAddr,Index,LocalIndex,Addr),
    code_in_refined_block(Addr,Block).

/////////////////////////////////////////////////////////////////
// Auxiliary predicates for cfi directives

.decl cie_operand_is_register(Insn:symbol,OpNumber:number)

cie_operand_is_register("def_cfa_offset",1).
cie_operand_is_register("def_cfa_register",1).
cie_operand_is_register("def_cfa",1).
cie_operand_is_register("def_cfa",2).
cie_operand_is_register("offset",1).
cie_operand_is_register("val_offset",1).
cie_operand_is_register("rel_offset",1).
cie_operand_is_register("register",1).
cie_operand_is_register("register",2).
cie_operand_is_register("restore",1).
cie_operand_is_register("undefined",1).
cie_operand_is_register("same_value",1).
cie_operand_is_register("return_column",1).

.decl cie_noperands(Insn:symbol,OpNumber:number)

cie_noperands("offset",2).
cie_noperands("restore",1).
cie_noperands("nop",0).
cie_noperands("def_cfa",2).
cie_noperands("offset_extended",2).
cie_noperands("restore_extended",1).
cie_noperands("undefined",1).
cie_noperands("same_value",1).
cie_noperands("register",2).
cie_noperands("remember_state",0).
cie_noperands("restore_state",0).
cie_noperands("def_cfa",2).
cie_noperands("def_cfa_register",1).
cie_noperands("def_cfa_offset",1).
cie_noperands("offset_extended_sf",2).
cie_noperands("def_cfa_sf",2).
cie_noperands("def_cfa_offset_sf",1).
cie_noperands("val_offset",2).
cie_noperands("val_offset_sf",2).