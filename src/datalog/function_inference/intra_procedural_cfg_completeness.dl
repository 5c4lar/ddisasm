//===- intra_procedural_cfg_completeness.dl ---------------------*- C++ -*-===//
//
//  Copyright (C) 2019 GrammaTech, Inc.
//
//  This code is licensed under the GNU Affero General Public License
//  as published by the Free Software Foundation, either version 3 of
//  the License, or (at your option) any later version. See the
//  LICENSE.txt file in the project root for license terms or visit
//  https://www.gnu.org/licenses/agpl.txt.
//
//  This program is distributed in the hope that it will be useful,
//  but WITHOUT ANY WARRANTY; without even the implied warranty of
//  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
//  GNU Affero General Public License for more details.
//
//  This project is sponsored by the Office of Naval Research, One Liberty
//  Center, 875 N. Randolph Street, Arlington, VA 22203 under contract #
//  N68335-17-C-0700.  The content of the information does not necessarily
//  reflect the position or policy of the Government and no official
//  endorsement should be inferred.
//
//===----------------------------------------------------------------------===//
/**
Perform a intra-procedural completeness analysis.

*/

//////////////////////////////////////////////////////////////////////////////
// record blocks that have jumps that are not resolved
.decl incomplete_block(block:address,Cause:address)

incomplete_block(Block,EA):-
    code_in_refined_block(EA,Block),
    (
        reg_jump(EA);
        indirect_jump(EA)
    ),
    !resolved_jump(EA,_).

.decl complete_block(block:address)

complete_block(Block):-
    refined_block(Block),
    !incomplete_block(Block,_).

// record blocks that contain a ret instruction
.decl block_contains_ret(block:address)
.output block_contains_ret

block_contains_ret(Block):-
    code_in_refined_block(EA,Block),
    return(EA).

//////////////////////////////////////////////////////////////////////////////
// compute reachability without crossing function boundaries
// This is computed without knowing all the functions though to avoid
// a cyclic dependency
.decl intra_reachable(Block:address,Function:address)

intra_reachable(Block,Block):-
    refined_block(Block).

intra_reachable(Src,Dest):-
    intra_reachable(Src,A),
    intra_edge(A,Dest),
    Dest >= Src.


.decl intra_edge(Block_src:address,Block_dest:address)
.output intra_edge

intra_edge(Src,Dest):-
    code_in_refined_block(EA,Src),
    direct_jump(EA,Dest),
    !function_entry(Dest).

intra_edge(Src,Dest):-
    code_in_refined_block(EA,Src),
    pc_relative_jump(EA,Dest),
    !function_entry(Dest).

intra_edge(Src,Dest):-
    code_in_refined_block(EA,Src),
    may_fallthrough(EA,Dest),
    !no_return_call(EA),
    code_in_refined_block(Dest,Dest).

intra_edge(Src,Dest):-
    code_in_refined_block(EA,Src),
    resolved_jump(EA,Dest).

.decl intra_edge_dir(Src:address,Dest:address,Dir:symbol)

intra_edge_dir(Src,Dest,"fwd"):-
    intra_edge(Src,Dest),Dest >= Src.
intra_edge_dir(Src,Dest,"back"):-
    intra_edge(Src,Dest),Dest < Src.

//////////////////////////////////////////////////////////////////////////////
// underapproximation of reachable blocks
// form a function candidate block

.decl must_intra_reachable(Block:address,Next:address)

must_intra_reachable(Block,Block):-
    refined_block(Block),
    after_function_end(Block,_).

must_intra_reachable(Block,Next):-
    must_intra_reachable(Block,Reach),
    code_in_refined_block(EA,Reach),
    may_fallthrough(EA,Next),
    !no_return_call(EA),
    refined_block(Next).


// a restricted version of common ancestor
// where one side uses the over-approximating intra_reachable
// and the other side uses the under-approximating must_intra_reachable
.decl reaches_segment(Block:address,Segment:address)

reaches_segment(Block,Segment):-
    intra_reachable(Block,Reached),
    !arch.is_nop(Block),
    must_intra_reachable(Segment,Reached).


// under-approximate the fact that a block goes back (to an address before itself)
// it under-approximates because it tries to discard things that might be
// tail calls
.decl goes_back(Src:address,Dest:address,how:symbol)

goes_back(Src,Dest,"cjump"):-
    intra_reachable(Src,Middle),
    intra_edge(Middle,Dest),
    Dest < Src,
    // try to discard tail calls
    (
        !unconditional_jump(Middle);
        //not a call to the beginning of a function
        !after_function_end(Dest,_)
    ).
//////////////////////////////////////////////////////////////////////////////
// use reachability to compute incomplete and complete cfg

.decl incomplete_cfg(Block:address)
.output incomplete_cfg

incomplete_cfg(Block):-
    intra_reachable(Block,Dest),
    incomplete_block(Dest,_).

.decl complete_cfg(Block:address)

complete_cfg(Block):-
    refined_block(Block),
    !incomplete_cfg(Block).
