//===- jump_operations.dl -----------------------------------*- datalog -*-===//
//
//  Copyright (C) 2020 GrammaTech, Inc.
//
//  This code is licensed under the GNU Affero General Public License
//  as published by the Free Software Foundation, either version 3 of
//  the License, or (at your option) any later version. See the
//  LICENSE.txt file in the project root for license terms or visit
//  https://www.gnu.org/licenses/agpl.txt.
//
//  This program is distributed in the hope that it will be useful,
//  but WITHOUT ANY WARRANTY; without even the implied warranty of
//  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
//  GNU Affero General Public License for more details.
//
//  This project is sponsored by the Office of Naval Research, One Liberty
//  Center, 875 N. Randolph Street, Arlington, VA 22203 under contract #
//  N68335-17-C-0700.  The content of the information does not necessarily
//  reflect the position or policy of the Government and no official
//  endorsement should be inferred.
//
//===----------------------------------------------------------------------===//
/**
The set of jump operations in MIPS32
*/

.decl jump_operation(n:symbol)

jump_operation("J").
jump_operation("JIC").
jump_operation("B16").
jump_operation("BC").
jump_operation("BC0F").
jump_operation("BC0FL").
jump_operation("BC0T").
jump_operation("BC0TL").
jump_operation("BC1EQZ").
jump_operation("BC1F").
jump_operation("BC1FL").
jump_operation("BC1NEZ").
jump_operation("BC1T").
jump_operation("BC1TL").
jump_operation("BC2EQZ").
jump_operation("BC2F").
jump_operation("BC2FL").
jump_operation("BC2NEZ").
jump_operation("BC2T").
jump_operation("BC2TL").
jump_operation("BC3F").
jump_operation("BC3FL").
jump_operation("BC3T").
jump_operation("BC3TL").
jump_operation("BEQ").
jump_operation("BEQC").
jump_operation("BEQL").
jump_operation("BEQZ16").
jump_operation("BEQZC").
jump_operation("BGEC").
jump_operation("BGEUC").
jump_operation("BGEZ").
jump_operation("BGEZC").
jump_operation("BGEZL").
jump_operation("BGTZ").
jump_operation("BGTZC").
jump_operation("BGTZL").
jump_operation("BLEZ").
jump_operation("BLEZC").
jump_operation("BLEZL").
jump_operation("BLTC").
jump_operation("BLTUC").
jump_operation("BLTZ").
jump_operation("BLTZC").
jump_operation("BLTZL").
jump_operation("BNE").
jump_operation("BNEC").
jump_operation("BNEGI").
jump_operation("BNEG").
jump_operation("BNEL").
jump_operation("BNEZ16").
jump_operation("BNEZC").
jump_operation("BNVC").
jump_operation("BOVC").
jump_operation("BPOSGE32").
jump_operation("BZ").
jump_operation("BEQZ").
jump_operation("B").
jump_operation("BNEZ").
jump_operation("BTEQZ").
jump_operation("BTNEZ").

.decl unconditional_jump_operation(n:symbol)

unconditional_jump_operation("J").
unconditional_jump_operation("JIC").
unconditional_jump_operation("B").
unconditional_jump_operation("B16").
unconditional_jump_operation("BC").

// Return operations are returns only if the target register is RA.
// Otherwise, it can be considered as unconditional jump.
// The caller is responsible for checking the target register.
unconditional_jump_operation(N):-
    return_operation(N).

.decl jump_comp_operation(n:symbol)

jump_comp_operation("BGEC").
jump_comp_operation("BGEUC").
jump_comp_operation("BGEZ").
jump_comp_operation("BGEZC").
jump_comp_operation("BGEZL").
jump_comp_operation("BGTZ").
jump_comp_operation("BGTZC").
jump_comp_operation("BGTZL").
jump_comp_operation("BLEZ").
jump_comp_operation("BLEZC").
jump_comp_operation("BLEZL").
jump_comp_operation("BLTC").
jump_comp_operation("BLTUC").
jump_comp_operation("BLTZ").
jump_comp_operation("BLTZC").
jump_comp_operation("BLTZL").

.decl jump_equal_operation(n:symbol)

jump_equal_operation("BEQ").
jump_equal_operation("BEQC").
jump_equal_operation("BEQL").
jump_equal_operation("BEQZ").
jump_equal_operation("BEQZ16").
jump_equal_operation("BEQZC").
jump_equal_operation("BC1EQZ").
jump_equal_operation("BC2EQZ").

.decl jump_unequal_operation(n:symbol)

jump_unequal_operation("BNE").
jump_unequal_operation("BNEC").
jump_unequal_operation("BNEL").
jump_unequal_operation("BNEZ").
jump_unequal_operation("BNEZ16").
jump_unequal_operation("BNEZC").
jump_unequal_operation("BC1NEZ").
jump_unequal_operation("BC2NEZ").

// Compact branches don't have a delay slot.
.decl compact_branch_operation(n:symbol)

compact_branch_operation("BC").
compact_branch_operation("BEQC").
compact_branch_operation("BNEC").
compact_branch_operation("BGEC").
compact_branch_operation("BGEUC").
compact_branch_operation("BGTC").
compact_branch_operation("BLEC").
compact_branch_operation("BLTC").
compact_branch_operation("BLTUC").
compact_branch_operation("BOVC").
compact_branch_operation("BNVC").
compact_branch_operation("JC").

.decl jump_target_op(EA:address,operator:operand_code)

jump_target_op(EA,Op):-
    instruction_get_operation(EA,Operation),
    (
        (
            (jump_unequal_operation(Operation);
             jump_equal_operation(Operation);
             jump_comp_operation(Operation)
            ),
            instruction(EA,_,_,_,Op1,Op2,Op3,_,_,_),
            Op = Op2
        )
        ;
        (
            Operation != "BEQ",
            Operation != "BNE",
            instruction(EA,_,_,_,Op,_,_,_,_,_)
        )
    ).
