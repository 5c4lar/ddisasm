//===- mips_binaries.dl --------------------------------------*- datalog -*-===//
//
//  Copyright (C) 2020 GrammaTech, Inc.
//
//  This code is licensed under the GNU Affero General Public License
//  as published by the Free Software Foundation, either version 3 of
//  the License, or (at your option) any later version. See the
//  LICENSE.txt file in the project root for license terms or visit
//  https://www.gnu.org/licenses/agpl.txt.
//
//  This program is distributed in the hope that it will be useful,
//  but WITHOUT ANY WARRANTY; without even the implied warranty of
//  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
//  GNU Affero General Public License for more details.
//
//  This project is sponsored by the Office of Naval Research, One Liberty
//  Center, 875 N. Randolph Street, Arlington, VA 22203 under contract #
//  N68335-17-C-0700.  The content of the information does not necessarily
//  reflect the position or policy of the Government and no official
//  endorsement should be inferred.
//
//===----------------------------------------------------------------------===//
/**
Define a set predicates to abstract from MIPS specific instruction set
and characteristics
*/

instruction_get_dest_op(EA,Index,Op):-
    arch.store_operation(Operation),
    (
        instruction(EA,_,_,Operation,Op,_,_,_,_,_), Op != 0, Index = 1;
        instruction(EA,_,_,Operation,_,Op,Op3,_,_,_), Op != 0, Op3 != 0, Index = 2;
        instruction(EA,_,_,Operation,_,_,Op,Op4,_,_), Op != 0, Op4 != 0, Index = 3
    ),
    !arch.read_only_operation(Operation).

instruction_get_dest_op(EA,Index,Op):-
    !arch.jump_operation(Operation),
    !arch.store_operation(Operation),
    instruction(EA,_,_,Operation,_,Op2,Op3,Op4,_,_),
    !arch.read_only_operation(Operation),
    (
        Op4 = 0,
        Op3 = 0,
        Op2 != 0,
        Op = Op2,
        Index = 2
        ;
        Op4 = 0,
        Op3 != 0,
        Op = Op3,
        Index = 3
        ;
        Op4 != 0,
        Op = Op4,
        Index = 4
    ).

instruction_get_src_op(EA,Index,Op):-
    arch.store_operation(Operation),
    instruction(EA,_,_,Operation,_,Op2,Op3,Op4,_,_),
    !arch.write_only_operation(Operation),
    (
        Op4 = 0,
        Op3 = 0,
        Op2 != 0,
        Op = Op2,
        Index = 2
        ;
        Op4 = 0,
        Op3 != 0,
        Op = Op3,
        Index = 3
        ;
        Op4 != 0,
        Op = Op4,
        Index = 4
    ).

instruction_get_src_op(EA,Index,Op):-
    !arch.store_operation(Operation),
    (
        instruction(EA,_,_,Operation,Op,_,_,_,_,_), Op != 0, Index = 1;
        instruction(EA,_,_,Operation,_,Op,Op3,_,_,_), Op != 0, Op3 != 0, Index = 2;
        instruction(EA,_,_,Operation,_,_,Op,Op4,_,_), Op != 0, Op4 != 0, Index = 3
    ),
    !arch.write_only_operation(Operation).

// NOTE: For jump instructions, treat all ops as src.
// E.g., bne $v0, $v1, L_xxx
//       Both v0 and v1 are sources.
// See mips' read_only_operation
instruction_get_src_op(EA,Index,Op):-
    instruction_get_operation(EA, Operation),
    arch.read_only_operation(Operation),
    instruction_get_op(EA,Index,Op).

// e.g., sw gp, 16(sp)
reg_stored_in_stack(EA,Reg,StackPos,StackFrameDefinedAt):-
    def_used(StackFrameDefinedAt,"SP",EA,_),
    StackFrameDefinedAt != EA,
    arch.mov(EA),
    instruction_get_dest_op(EA,_,DestOp),
    op_indirect(DestOp,"NONE","SP","NONE",_,StackPos,_),
    instruction_get_src_op(EA,_,SrcOp),
    op_regdirect_contains_reg(SrcOp,Reg).

// e.g., lw gp, 16(fp)
reg_loaded_from_stack(EA,Reg,Base,StackPos,StackFrameDefinedAt):-
    (
        Base = "FP"
        ;
        Base = "SP"
    ),
    def_used(StackFrameDefinedAt,Base,EA,_),
    StackFrameDefinedAt != EA,
    arch.mov(EA),
    instruction_get_src_op(EA,_,SrcOp),
    op_indirect(SrcOp,"NONE",Base,"NONE",_,StackPos,_),
    instruction_get_dest_op(EA,_,DestOp),
    op_regdirect_contains_reg(DestOp,Reg).

// e.g., sw gp, 16(sp)
//       ...
//       move fp, sp
//       ...
//       lw gp, 16(fp)
value_reg_edge(EALoad,"GP",EAPrev,"GP",1,0):-
    reg_stored_in_stack(EAStore,"GP",StackPos,StackFrameDefinedAt),
    reg_loaded_from_stack(EALoad,"GP","FP",StackPos,StackFrameDefinedAt2),
    def_used(EAPrev,"GP",EAStore,_),
    EAPrev != EAStore,
    // StackFrameDefinedAt2: move fp, sp
    def_used(StackFrameDefinedAt,Reg_origin,StackFrameDefinedAt2,_),
    StackFrameDefinedAt != StackFrameDefinedAt2,
    arch.mov(StackFrameDefinedAt2),
    instruction_get_op(StackFrameDefinedAt2,1,Op1),
    op_regdirect_contains_reg(Op1,Reg_origin),
    instruction_get_op(StackFrameDefinedAt2,2,Op2),
    op_regdirect_contains_reg(Op2,Reg),
    StackFrameDefinedAt2 != StackFrameDefinedAt.

value_reg_edge(EA,Reg,EA,"NONE",0,Immediate):-
    arch.reg_reg_arithmetic_operation(EA,Reg,"ZERO","NONE",_,Immediate).

// move reg, zero
value_reg_edge(EA,Reg,EA,"NONE",0,0):-
    arch.move_operation(Operation),
    instruction(EA,_,_,Operation,Op1,Op2,_,0,_,_),
    op_regdirect(Op1,Reg),
    op_regdirect(Op2,"ZERO").

// lui reg immediate
value_reg_edge(EA,Reg,EA,"NONE",0,Immediate*(2^16)):-
    op_immediate_and_reg(EA,"LUI",Reg,_,Immediate).

// E.g., addiu reg reg2 immediate
value_reg_edge(EA,Reg,EA_prev,Reg2,1,Immediate):-
    def_used(EA_prev,Reg2,EA,_),
    EA_prev != EA,
    arch.reg_reg_arithmetic_operation(EA,Reg,Reg2,"NONE",_,Immediate).

// load word from got table: e.g., lw v0, -32696(gp)
value_reg_edge(EA,Reg,EA,"NONE",0,Val):-
    instruction(EA,_,_,"LW",Op1,Op2,0,0,_,_),
    op_regdirect_contains_reg(Op2,Reg),
    gp_relative_operand(EA,1,Offset_addr),
    data_word(Offset_addr, 4, Val).

// lui reg3, hi(xxx)
// addiu reg2, reg3, lo(xxx)
// addu reg, reg2, t9 <--- (A)
// Get the value of reg at (A)
// NOTE: This assumes t9 holds the address of the current function, and
//       lui is the first instruction of the current function.
// TODO: Find a way of safely getting the function-entry address for t9.
value_reg_edge(EA,Reg,PrevEA1,Reg,1,as(PrevEA0,number)):-
    split_load(PrevEA0, PrevEA1, _, "ADDU"), // check on the idiom
    next(PrevEA1,EA),
    instruction_get_operation(EA, "ADDU"),
    instruction_get_dest_op(EA,_,DestOp),
    op_regdirect_contains_reg(DestOp,Reg).

.decl gp_relative_operand(src:address,index:operand_index, dest:address)
.output gp_relative_operand

// e.g., lw v0, -32696(gp)
gp_relative_operand(EA,Index,as(GpValue+Offset,address)):-
    instruction_get_op(EA, Index, Op),
    op_indirect(Op,"NONE","GP","NONE",1,Offset,_),
    def_used(EA_gp_def,"GP",EA,_),
    EA_gp_def != EA,
    value_reg(EA_gp_def,"GP",_,"NONE",_,GpValue,_).

// In case when gp def is not found, use _gp value instead.
// NOTE: This is a hacky trial:
// Assume that at load instructions with the source with gp as base register,
// gp holds the address of _gp (global pointer)
gp_relative_operand(EA,Index,GpValue+as(Offset,address)):-
    instruction(EA,_,_,Operation,Op1,_,0,0,_,_),
    (
        arch.load_operation(Operation),
        Index = 1
        ;
        arch.store_operation(Operation),
        Index = 2
    ),
    op_indirect(Op1,"NONE","GP","NONE",_,Offset,_),
    symbol(GpValue,_,_,_,_,_,_,"_gp").

gp_relative_operand(EA, 1, as(Dest,address)):-
    split_load(EA, _, Dest, _).

gp_relative_operand(EA, 2, as(Dest,address)):-
    split_load(_, EA, Dest, _).

gp_relative_operand(EA, 1, as(Dest,address)):-
    split_loadstore(EA, _, Dest).

gp_relative_operand(EA, 1, as(Dest,address)):-
    split_loadstore(_, EA, Dest).

// Global entries
got_reference(GotEntry,Symbol):-
    symbol(_,_,_,_,_, ".dynsym",Index,Symbol),
    dynamic_entry("MIPS_GOTSYM",FirstIndex),
    dynamic_entry("MIPS_LOCAL_GOTNO",NumLocalEntries),
    Index >= FirstIndex,
    section(".got",Size,Beg),
    GotEntry = Beg + NumLocalEntries*4 + (Index-FirstIndex)*4.

// Local entries
got_reference(Got_entry,Symbol):-
    symbolic_data(Got_entry,4,Dest),
    section(".got",Size,Beg),
    Got_entry >= Beg,
    dynamic_entry("MIPS_LOCAL_GOTNO",NumLocalEntries),
    Got_entry < Beg+4*NumLocalEntries,
    symbol(Dest,_,_,_,_,_,_,Symbol).

.decl hi_load(ea:address, reg:register, upper:number)

// LUI <Register> <Immediate>
hi_load(EA,Reg,Upper):-
    instruction_get_operation(EA, "LUI"),
    instruction_get_op(EA, 1, BaseOp),
    instruction_get_op(EA, 2, RegOp),
    op_immediate(BaseOp, Upper),
    op_regdirect_contains_reg(RegOp,Reg).

.decl hi_load_prop(reg_restore_ea:address, ea:address, reg:register, upper:number)

hi_load_prop(EA,EA,Reg,Upper):-
    hi_load(EA,Reg,Upper).

hi_load_prop(RegRestoreEA,EA,Reg2,Upper):-
    hi_load(EA,Reg,Upper),
    def_used(EA,Reg,RegStoreEA,_),
    reg_stored_in_stack(RegStoreEA,Reg,StackPos,StackFrameDefinedAt),
    reg_loaded_from_stack(RegRestoreEA,Reg2,"SP",StackPos,StackFrameDefinedAt).

// Compute an immediate load performed across two consecutive instructions
.decl split_load(ea:address, nextea:address, dest:address, type:symbol)
.output split_load

// E.g., lui reg, hi(xxx)
//       addiu reg2, reg, lo(xxx)
split_load(EA, NextEA, as(Upper*2^16+Offset,address), "ADDIU") :-
    // lui reg, hi(xxx)
    hi_load(EA,Reg,Upper),

    def_used(EA,Reg,NextEA,_),
    EA != NextEA,

    // addiu reg2, reg, lo(xxx)
    arch.reg_reg_arithmetic_operation(NextEA,_,Reg,"NONE",_,Offset).

// E.g., lui reg, hi(xxx)
//       sw reg, n(sp)
//       lw reg2, n(sp)
//       addiu reg3, reg2, lo(xxx)
// reg is store to stack and restored
split_load(EA, NextEA, as(Upper*2^16+Offset,address), "ADDIU") :-
    hi_load_prop(RegRestoreEA,EA,Reg2,Upper),
    def_used(RegRestoreEA,Reg2,NextEA,_),
    arch.reg_reg_arithmetic_operation(NextEA,_,Reg2,"NONE",_,Offset).

// PIC
// E.g., lui reg, hi(xxx)
//       addiu reg2, reg, lo(xxx)
//       addu reg3, reg2, t9
split_load(EA, NextEA, as(Upper*2^16+Offset+T9Value,address), "ADDU") :-
    // lui reg, hi(xxx)
    hi_load(EA,Reg,Upper),

    def_used(EA,Reg,NextEA,_),
    EA != NextEA,

    // addiu reg2, reg, lo(xxx)
    arch.reg_reg_arithmetic_operation(NextEA,Reg2,Reg,"NONE",_,Offset),

    def_used(NextEA,Reg2,NextEA2,_),
    NextEA != NextEA2,

    // addu reg3, reg2, t9
    arch.reg_reg_arithmetic_operation(NextEA2,_,Reg2,"T9",1,0),

    // NOTE: This assumes t9 holds the address of the current function, and
    //       lui is the first instruction of the current function.
    // TODO: Find a way of safely getting the function-entry address for t9.
    T9Value = as(EA, number).

// Compute an immediate load/store performed across two separateinstructions
.decl split_loadstore(ea:address, nextea:address, dest:address)
.output split_loadstore

// E.g., lui reg, hi(xxx)
//       lw/sw reg2, lo(xxx)(reg)
// (lw, lwc1, ldc1, etc.)
// (sw, swc1, sdc1, etc.)
split_loadstore(EA, NextEA, as(Upper*2^16+Offset,address)) :-
    // lui reg, hi(xxx)
    hi_load(EA,Reg,Upper),

    def_used(EA,Reg,NextEA,_),
    EA != NextEA,

    // lw/sw reg2, lo(xxx)(reg)
    instruction_get_operation(NextEA, Operation),
    (
        arch.store_operation(Operation),
        instruction_get_dest_op(NextEA,_,Op)
        ;
        arch.load_operation(Operation),
        instruction_get_src_op(NextEA,_,Op)
    ),
    op_indirect(Op,"NONE",Reg,"NONE",1,Offset,_).

// E.g., lui reg, hi(xxx)
//       sw reg, n(sp)
//       lw reg2, n(sp)
//       lw/sw reg3, lo(xxx)(reg2)
// reg is store to stack and restored
split_loadstore(EA, NextEA, as(Upper*2^16+Offset,address)) :-
    hi_load_prop(RegRestoreEA,EA,Reg2,Upper),
    def_used(RegRestoreEA,Reg2,NextEA,_),

    // lw/sw reg3, lo(xxx)(reg2)
    instruction_get_operation(NextEA, Operation),
    (
        arch.load_operation(Operation),
        instruction_get_src_op(NextEA,_,Op)
        ;
        arch.store_operation(Operation),
        instruction_get_dest_op(NextEA,_,Op)
    ),
    op_indirect(Op,"NONE",Reg2,"NONE",1,Offset,_).

.decl base_addr_offset_operand(ea:address, next_ea:address, dest:address)
.output base_addr_offset_operand

// e.g., lw v0, -32696(gp)  <-- v0: MIPS_BASE_ADDRESS
//       addiu a0, v0, 2560 <-- 2560: offset from MIPS_BASE_ADDRESS to target L
// ->
//       lw v0, %got(L)(gp)
//       addiu a0, v0, %lo(L)
base_addr_offset_operand(EA,NextEA,as(Value+Offset,address)):-
    value_reg(EA,Reg,_,"NONE",_,Value,_),
    instruction_get_operation(EA, Operation),
    arch.load_operation(Operation),
    dynamic_entry("MIPS_BASE_ADDRESS",Val),
    Value = as(Val,number),

    def_used(EA,Reg,NextEA,_),
    EA != NextEA,

    // ADDIU <Register> <Register> <Offset>
    // e.g. addiu reg2, reg, Offset
    arch.reg_reg_arithmetic_operation(NextEA,_,Reg,"NONE",_,Offset).

symbolic_operand_attribute(EA,1,"AddrRelGot"):-
    base_addr_offset_operand(EA,_,_).

symbolic_operand_attribute(EA,2,"Part0"):-
    base_addr_offset_operand(_,EA,_).

symbolic_operand_attribute(EA,1,"Part1"):-
    split_load(EA,_,_,"ADDU").

symbolic_operand_attribute(EA,2,"Part0"):-
    split_load(_,EA,_,"ADDU").

// Hi
symbolic_operand_attribute(EA, 1, "Part1"):-
    (
        split_load(EA, _, Dest_addr, _)
        ;
        split_loadstore(EA, _, Dest_addr)
    ),
    (
        data_segment(Begin,End),
        Dest_addr >= Begin,
        Dest_addr <= End
        ;
        symbol(Dest_addr,_,_,_,_,_,_,_)
        ;
        got_reference(Dest_addr,_)
    ).

// Lo
symbolic_operand_attribute(EA, Index, "Part0"):-
    (
        split_load(PrevEA, EA, Dest_addr, _),
        Index = 2
        ;
        split_loadstore(PrevEA, EA, Dest_addr),
        Index = 1
    ),
    (
        data_segment(Begin,End),
        Dest_addr >= Begin,
        Dest_addr <= End
        ;
        symbol(Dest_addr,_,_,_,_,_,_,_)
        ;
        got_reference(Dest_addr,_)
    ).

// E.g., lw t9, %got(puts)(gp)
symbolic_operand_attribute(EA,Index,"AddrRelGot"):-
    gp_relative_operand(EA,Index,Dest_addr),
    got_reference(Dest_addr,_).

symbolic_operand(EA,1,Dest_addr,"data"):-
    base_addr_offset_operand(EA,_,Dest_addr).

symbolic_operand(EA,2,Dest_addr,"data"):-
    base_addr_offset_operand(_,EA,Dest_addr).

symbol_minus_symbol(EA,4,GP_addr,EA,1):-
    split_load(EA,_,_,"ADDU"),
    symbol(GP_addr,_,_,_,_,_,_,"_gp").

symbol_minus_symbol(EA,4,GP_addr,PrevEA,1):-
    split_load(PrevEA,EA,_,"ADDU"),
    symbol(GP_addr,_,_,_,_,_,_,"_gp").

symbolic_operand_candidate(EA,Op_index,Dest_addr,Type):-
  binary_type("EXEC"),
    code(EA),
    instruction_get_op(EA,Op_index,Op),
    gp_relative_operand(EA,Op_index,Dest_addr),
    (
        code(Dest_addr), Type="code"
        ;
        data_segment(Begin,End),
        Dest_addr >= Begin, Dest_addr <= End,
        Type = "data"
        ;
        symbol(Dest_addr,_,_,_,_,_,_,_),
        Type = "data"
    ).

symbolic_operand_point(EA,Op_index,1,"lookup-got"):-
    symbolic_operand_candidate(EA,Op_index,_,_),
    instruction_get_op(EA,Op_index,Op),
    op_indirect(Op,"NONE","GP","NONE",1,Offset,_),
    def_used_for_address(EA,_).
