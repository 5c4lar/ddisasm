//===- pe_binaries.dl --------------------------------------------------*- datalog -*-===//
//
//  Copyright (C) 2019 GrammaTech, Inc.
//
//  This code is licensed under the GNU Affero General Public License
//  as published by the Free Software Foundation, either version 3 of
//  the License, or (at your option) any later version. See the
//  LICENSE.txt file in the project root for license terms or visit
//  https://www.gnu.org/licenses/agpl.txt.
//
//  This program is distributed in the hope that it will be useful,
//  but WITHOUT ANY WARRANTY; without even the implied warranty of
//  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
//  GNU Affero General Public License for more details.
//
//  This project is sponsored by the Office of Naval Research, One Liberty
//  Center, 875 N. Randolph Street, Arlington, VA 22203 under contract #
//  N68335-17-C-0700.  The content of the information does not necessarily
//  reflect the position or policy of the Government and no official
//  endorsement should be inferred.
//
//===----------------------------------------------------------------------===//


// This module defines predicates specific of PE binaries

.decl data_directory(Address:address,Size:number,Type:symbol)
.input data_directory
.output data_directory


.decl import_entry(Address:address,Ordinal:number,Function:symbol,Library:symbol)
.input import_entry
.output import_entry

.decl pe_section_characteristics(Name:symbol,Mask:number)

pe_section_characteristics("IMAGE_SCN_TYPE_NO_PAD",0x00000008).
pe_section_characteristics("IMAGE_SCN_CNT_CODE",0x00000020).
pe_section_characteristics("IMAGE_SCN_CNT_INITIALIZED_DATA",0x00000040).
pe_section_characteristics("IMAGE_SCN_CNT_UNINITIALIZED_DATA",0x00000080).
pe_section_characteristics("IMAGE_SCN_LNK_OTHER",0x00000100).
pe_section_characteristics("IMAGE_SCN_LNK_INFO",0x00000200).
pe_section_characteristics("IMAGE_SCN_LNK_REMOVE",0x00000800).
pe_section_characteristics("IMAGE_SCN_LNK_COMDAT",0x00001000).
pe_section_characteristics("IMAGE_SCN_GPREL",0x00008000).
pe_section_characteristics("IMAGE_SCN_MEM_PURGEABLE",0x00020000).
pe_section_characteristics("IMAGE_SCN_MEM_16BIT",0x00020000).
pe_section_characteristics("IMAGE_SCN_MEM_LOCKED",0x00040000).
pe_section_characteristics("IMAGE_SCN_MEM_PRELOAD",0x00080000).
pe_section_characteristics("IMAGE_SCN_ALIGN_1BYTES",0x00100000).
pe_section_characteristics("IMAGE_SCN_ALIGN_2BYTES",0x00200000).
pe_section_characteristics("IMAGE_SCN_ALIGN_4BYTES",0x00300000).
pe_section_characteristics("IMAGE_SCN_ALIGN_8BYTES",0x00400000).
pe_section_characteristics("IMAGE_SCN_ALIGN_16BYTES",0x00500000).
pe_section_characteristics("IMAGE_SCN_ALIGN_32BYTES",0x00600000).
pe_section_characteristics("IMAGE_SCN_ALIGN_64BYTES",0x00700000).
pe_section_characteristics("IMAGE_SCN_ALIGN_128BYTES",0x00800000).
pe_section_characteristics("IMAGE_SCN_ALIGN_256BYTES",0x00900000).
pe_section_characteristics("IMAGE_SCN_ALIGN_512BYTES",0x00A00000).
pe_section_characteristics("IMAGE_SCN_ALIGN_1024BYTES",0x00B00000).
pe_section_characteristics("IMAGE_SCN_ALIGN_2048BYTES",0x00C00000).
pe_section_characteristics("IMAGE_SCN_ALIGN_4096BYTES",0x00D00000).
pe_section_characteristics("IMAGE_SCN_ALIGN_8192BYTES",0x00E00000).
pe_section_characteristics("IMAGE_SCN_LNK_NRELOC_OVFL",0x01000000).
pe_section_characteristics("IMAGE_SCN_MEM_DISCARDABLE",0x02000000).
pe_section_characteristics("IMAGE_SCN_MEM_NOT_CACHED",0x04000000).
pe_section_characteristics("IMAGE_SCN_MEM_NOT_PAGED",0x08000000).
pe_section_characteristics("IMAGE_SCN_MEM_SHARED",0x10000000).
pe_section_characteristics("IMAGE_SCN_MEM_EXECUTE",0x20000000).
pe_section_characteristics("IMAGE_SCN_MEM_READ",0x40000000).
pe_section_characteristics("IMAGE_SCN_MEM_WRITE",0x80000000).

section(Name,Size,Addr):-
    binary_format("PE"),
    section_complete(Name,Size,Addr,_,_).

data_section(Section):-
    binary_format("PE"),
    section_complete(Section,_,_,_,Flags),
    pe_section_characteristics("IMAGE_SCN_CNT_INITIALIZED_DATA",Data),
    Flags band Data >0.

bss_section(Section),
data_section(Section):-
    binary_format("PE"),
    section_complete(Section,_,_,_,Flags),
    pe_section_characteristics("IMAGE_SCN_CNT_UNINITIALIZED_DATA",Data),
    Flags band Data >0.

code_section(Section):-
    binary_format("PE"),
    section_complete(Section,_,_,_,Flags),
    pe_section_characteristics("IMAGE_SCN_CNT_CODE",Exec),
    Flags band Exec >0.

// Entries of external libraries
symbol(0,0,"NONE","GLOBAL",0,Function),
got_reference(Address,Function):-
    import_entry(Address,_,Function,_).

//PE binaries have plt-like entries
// These are no delimited to their own section
plt_block(EA,Function):-
    pc_relative_jump(EA,Got_entry),
    unconditional_jump(EA),
    got_reference(Got_entry,Function),
    code_in_refined_block(EA,EA).

// Base Relocation Table
.decl base_relocation_type(Name:symbol,Val:number)
base_relocation_type("IMAGE_REL_BASED_DIR64", 10).

.decl reloc_section(Name:symbol)
reloc_section(Section):-
    binary_format("PE"),
    data_directory(DataDirAddr, DataDirSize, "BASE_RELOCATION_TABLE"),
    DataDirSize > 0,
    section_complete(Section, _, SectionAddr, _, _),
    DataDirAddr = SectionAddr.

.decl base_relocation_field(EA:address,Val:number)
base_relocation_field(EA,Val):-
    data_byte(EA,  Byte0), EA % 4 = 0,
    data_byte(EA+1,Byte1),
    data_byte(EA+2,Byte2),
    data_byte(EA+3,Byte3),
    Val = (Byte3*2^24+ Byte2*2^16 + Byte1*2^8 + Byte0).

.decl base_relocation_block(EA:address,Page:address,Size:number)
.output base_relocation_block
base_relocation_block(EA,Page,Size):-
    reloc_section(Section),
    section(Section,SizeReloc,BegReloc),
    base_relocation_field(EA,  Page),
    base_relocation_field(EA+4,Size),
    EA = BegReloc,
    EA+Size <= BegReloc+SizeReloc,
    Page % 0x1000 = 0.

base_relocation_block(NextEA,NextPage,NextSize):-
    base_relocation_block(EA,_,Size),
    reloc_section(Section),
    section(Section,SizeReloc,BegReloc),
    NextEA = EA+Size,
    base_relocation_field(NextEA,NextPage),
    base_relocation_field(NextEA+4,NextSize),
    NextEA+NextSize <= BegReloc+SizeReloc.

.decl base_relocation_entry(EA:address,Type:number,Offset:number)
.output base_relocation_entry
base_relocation_entry(EA,Type,Offset):-
    base_relocation_block(Addr,_,Size),
    EA >= Addr+8,
    EA % 2 = 0,
    EA+2 <= Addr+Size,
    data_byte(EA,   Byte0),
    data_byte(EA+1, Byte1),
    Type = (Byte1 band 0xF0) / 2^4,
    Offset = ((Byte1 band 0x0F)*2^8 + Byte0).

.decl base_relocation(Addr:address)
.output base_relocation
symbolic_data(Addr,8,Val),
base_relocation(Addr):-
    base_relocation_type("IMAGE_REL_BASED_DIR64", Type),
    base_relocation_block(BlockEA,Page,Size),
    base_relocation_entry(EntryEA,Type,Offset),
    EntryEA > BlockEA,
    EntryEA < BlockEA+Size,
    Addr = Page + Offset,
    address_in_data(Addr, Data),
    base_address(BaseAddr),
    Val = Data - BaseAddr.

.decl base_relative_operand(EA:address,Index:number,Dest:address)
.output base_relative_operand

symbol_minus_symbol(EA_used+Disp_offset,4,ImageBase,Value),
symbolic_operand_point(EA_used,Op_index,-1,"base-relative"),
base_relative_operand(EA_used,Op_index,Value):-
    pc_relative_operand(EA_def,_,0),
    def_used(EA_def,_,EA_used,Op_index),
    symbolic_operand_candidate(EA_used,Op_index,Value,_),
    instruction_displacement_offset(EA_used,Op_index,Disp_offset),
    base_address(ImageBase).

inferred_symbol_name(ImageBase,".L_0","Static"):-
    base_address(ImageBase).

// the call to main is right after the call to "__p___argc"
main_function(EA):-
    code(EA1),
    direct_call(EA1,PLT_ARGC),
    plt_block(PLT_ARGC,"__p___argc"),
    next(EA1,Block),
    code_in_refined_block(EA_call_main,Block),
    direct_call(EA_call_main,EA).
