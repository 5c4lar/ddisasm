//===- traverse_code.dl -----------------------------------------*- C++ -*-===//
//
//  Copyright (C) 2019 GrammaTech, Inc.
//
//  This code is licensed under the GNU Affero General Public License
//  as published by the Free Software Foundation, either version 3 of
//  the License, or (at your option) any later version. See the
//  LICENSE.txt file in the project root for license terms or visit
//  https://www.gnu.org/licenses/agpl.txt.
//
//  This program is distributed in the hope that it will be useful,
//  but WITHOUT ANY WARRANTY; without even the implied warranty of
//  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
//  GNU Affero General Public License for more details.
//
//  This project is sponsored by the Office of Naval Research, One Liberty
//  Center, 875 N. Randolph Street, Arlington, VA 22203 under contract #
//  N68335-17-C-0700.  The content of the information does not necessarily
//  reflect the position or policy of the Government and no official
//  endorsement should be inferred.
//
//===----------------------------------------------------------------------===//
/**
 This component traverses the code forward and recursively.  It
 discovers blocks of code which are stored in the facts
 'likely_ea'. This traversal starts at the locations specified by
 'possible_target' and only traverses instructions contained in
 'possible_ea'.  During the traversal additional new 'possible_target'
 are generated.

 The traversal is recursive in the sense that it generates new targets
 from the found code, and linear in the sense that it continues
 exploring the code after the end of each block.

 Once the forward traversal is done, 'invalid' instructions are
 propagated backwards weakly (only through must_fallthrough). The
 component can receive a set of initial invalid instructions.  An
 instruction is also considere invali if it overlap other instructions
 inside a block and it is not itself in any block.

 Finally remaining_ea is the set of instructions that do not belong to any
 discovered block but are also not classified invalid.
*/
.comp traverse_code {

// INPUTS

// these are the initial ea considered
.decl possible_ea(a:address)

// the block limits to be considered
.decl block_limit(ea:address)

// INPUTS AND OUTPUTS

// the initial targets to be considered
.decl possible_target(ea:address)

// there cannot be a valid instruction in ea
.decl invalid(ea:address)

// OUTPUTS

// likely_ea represents a block of code where each ea in an instruction
// in the block starting in block_head
.decl likely_ea(ea:address,block_head:address)

// Instructions that are not associated to any block but also have not been
// discarded
.decl remaining_ea(ea:address)


// INFERENCE RULES

// start a new block given a possible target
likely_ea(EA,EA):-
	possible_target(EA),
	possible_ea(EA).

// extend the block as long as we are sure to fallthrough and we have not
// reached a block limit
likely_ea(EA,Start):-
	likely_ea(EA2,Start),
	must_fallthrough(EA2,EA),
	!block_limit(EA),
	possible_ea(EA).

// if reached a block limit or an instruction that does not necessarily
// fallthrough continue exploring but start a new block
likely_ea(EA,EA):-
	likely_ea(EA2,Start),
	may_fallthrough(EA2,EA),
	(
	  !must_fallthrough(EA2,EA)
	;
	  block_limit(EA)
	;
	  is_nop(EA2),
	  !is_nop(EA)
	),
	possible_ea(EA).	
	

// in case we cannot fallthrough, we skip any nops that we might find
// and generate a new possible_target once the nops finish
.decl after_end(EA:address,End:address)


after_end(Next,End):-
	likely_ea(End,_),
	(
	   inconditional_jump(End)
	;
	   return(End)
	;
	   halt(End)
	),
	next(End,Next).


after_end(Next,End):-
	after_end(EA,End),
	is_nop(EA),
	next(EA,Next).


possible_target(EA):-
	after_end(EA,_),
	!is_nop(EA).

// forbid overlaps with likely_ea instructions
// grow the initial invalid set 
.decl overlap(ea_overlap:address,ea_likely:address)


// Compute EAs that overlap with EAs of likely instuctions (instructions that belong to blocks)
overlap(EA2+1,EA2):-
	likely_ea(EA2,_),
	next(EA2,End),
	EA2+1 < End.
overlap(EA+1,EA2):-
	overlap(EA,EA2),
	next(EA2,End),
	EA+1 < End.


// if the decoder failed to decode any instruction at EA, EA is invalid
invalid(EA):-
	invalid_op_code(EA).
	
// if EA contains a direct call or jump to something that cannot be code, it is invalid
invalid(EA):-
	(
	direct_jump(EA,Not_code)
	;
	direct_call(EA,Not_code)
	),
	!possible_ea(Not_code).
	
// If the instruction overlaps with an instruction that belong to a block
// and it does not belong to a block itself
invalid(EA):-
	possible_ea(EA),
	(
	// the starting point of EA is in the middle of a likely instruction
	overlap(EA,Ini)
	;
	// the ending point of EA is in the middle of a likely instruction
	next(EA,EA_end),
	overlap(EA_end,Ini)
	),
	// (and it is not itself likely)
	!likely_ea(EA,_).

// propagate the invalid instructions backwards until ret or jmp (encoded in must_fallthrough)
// propagate through direct jumps and calls
invalid(From):-
	invalid(To),
	(
		must_fallthrough(From,To)
	;
		direct_jump(From,To)
	;
		direct_call(From,To)
	;
		pc_relative_jump(From,To)
	;
		pc_relative_call(From,To)
	).

remaining_ea(EA):-
	possible_ea(EA),
	!invalid(EA).
}
