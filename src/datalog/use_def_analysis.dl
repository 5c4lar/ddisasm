//===- use_def_analysis.dl --------------------------------------*- datalog -*-===//
//
//  Copyright (C) 2019 GrammaTech, Inc.
//
//  This code is licensed under the GNU Affero General Public License
//  as published by the Free Software Foundation, either version 3 of
//  the License, or (at your option) any later version. See the
//  LICENSE.txt file in the project root for license terms or visit
//  https://www.gnu.org/licenses/agpl.txt.
//
//  This program is distributed in the hope that it will be useful,
//  but WITHOUT ANY WARRANTY; without even the implied warranty of
//  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
//  GNU Affero General Public License for more details.
//
//  This project is sponsored by the Office of Naval Research, One Liberty
//  Center, 875 N. Randolph Street, Arlington, VA 22203 under contract #
//  N68335-17-C-0700.  The content of the information does not necessarily
//  reflect the position or policy of the Government and no official
//  endorsement should be inferred.
//
//===----------------------------------------------------------------------===//
/**
This modules computes def-uses chains for a subset of the registers (defined in track_register).
and only if those chains are related eventually to an access to memory.

-'def' computes definitions of registers at each of the locations.

-'def_used_for_address' compute the set of live uses backwards at each of the locations.
 However, it only computes uses starting at accesses to memory.

-'def_used' intersects the two previous facts to obtain def-use chains.

-'straight_line_def_used` is a weaker version of 'def_used' that can be used before
code inference.

The traversal of def_used_for_address is kept intra-procedural (not following call edges).
*/


// register is defined in this location
.decl def(EA:address,Reg:register)

/**
Instruction at address 'EA' uses register 'Reg' at operand index 'Index'.
*/
.decl used(EA:address,Reg:register,Index:operand_index)

/**
Instruction at address 'EA' uses register 'Reg' at operand index 'Index'.
This is supposed to be used before code inference.
*/
.decl used_before_code_inference(EA:address,Reg:register,Index:operand_index)

//The 'reg' is defined in 'ea_def' and used in 'ea_used' in the operand with index 'index_used'
.decl def_used(ea_def:address,reg:register,ea_used:address,index_used:operand_index)
.output def_used

// a register is implicitly defined by being compared to a constant and then jumping
// this definition only takes place in between the jump and the target that implies equality
.decl flow_def(EA:address,Reg:register,EA_next:address,Value:number)
//////////////////////////////////////////////////////////////////////////////
//local underapproximation of control flow
.decl local_next(ea:address,ea_next:address) inline

local_next(EA,EA_next):-
    code_in_block(EA,Block),
    may_fallthrough(EA,EA_next),
    code_in_block(EA_next,Block).

.decl inter_procedural_edge(Src:address,Dest:address)

inter_procedural_edge(Src,Dest):-
    unconditional_jump(Src),
    direct_jump(Src,Dest),
    // If a function begins between Src and Dest (including at Dest), then it
    // is an interprocedural edge (assumes that functions are contiguous).
    function_inference.function_entry_initial(Between),
    Src < Between, Between <= Dest.

inter_procedural_edge(Src,Dest):-
    may_fallthrough(Src,Dest),
    !pc_load_call(Src,Dest),
    function_inference.function_entry_initial(Dest).

.decl block_next(Block:address,BlockEnd:address,NextBlock:address)
.output block_next

block_next(Block,EA,Block2):-
    block_last_instruction(Block,EA),
    may_fallthrough(EA,Block2),
    !no_return_call_propagated(EA),
    !inter_procedural_edge(EA,Block2),
    block(Block2).

block_next(Block,EA,EA_next):-
    block_last_instruction(Block,EA),
    !arch.delay_slot(_,EA),
    direct_jump(EA,EA_next),
    !inter_procedural_edge(EA,EA_next).

block_next(Block,EA,EA_next):-
    block_last_instruction(Block,EA),
    arch.delay_slot(JumpEA,EA),
    direct_jump(JumpEA,EA_next),
    !inter_procedural_edge(JumpEA,EA_next).

block_next(Block,EA,Dest):-
    block_last_instruction(Block,EA),
    jump_table_target(EA,Dest).

// Path created by exception handling.
block_next(Block,EA,Block2):-
    lsda_callsite_addresses(Beg,End, Block2),
    block_last_instruction(Block,EA),
    EA >= Beg, EA < End,
    block(Block2).

//////////////////////////////////////////////////////////////////////////////
// Main definitions

/**
Which registers are tracked for use-def and value analysis.
*/
.decl track_register(Reg:register)

track_register(Reg):-
    arch.general_purpose_reg(Reg);
    arch.frame_pointer(Reg);
    arch.stack_pointer(Reg);
    arch.return_reg(Reg);
    arch.condition_flags_reg(Reg).

// Define any registers defined by the instruction
def(EA,Reg):-
    arch.defines_reg(EA,Reg),
    track_register(Reg).

// A call "defines" the return value register
def(EA,Reg):-
    arch.call(EA,_),
    !arch.delay_slot(EA,_),
    arch.return_reg(Reg).

// A call "defines" the return value register (variant for delay slots)
def(EA,Reg):-
    arch.call(Call,_),
    arch.delay_slot(Call,EA),
    arch.return_reg(Reg).

def(EA,Reg):-
    direct_call(EA,EA_pc_thunk),
    get_pc_thunk(EA_pc_thunk,Reg),
    track_register(Reg).

flow_def(EA_jump,Reg,EA_target,Immediate):-
    code(EA),
    cmp_immediate_to_reg(EA,Reg,_,Immediate),
    track_register(Reg),
    next(EA,EA_jump),
    direct_jump(EA_jump,EA_target),
    arch.jump(EA_jump),
    arch.conditional(EA_jump,"E").

flow_def(EA_jump,Reg,EA_target,Immediate):-
    code(EA),
    cmp_immediate_to_reg(EA,Reg,_,Immediate),
    track_register(Reg),
    next(EA,EA_jump),
    direct_jump(EA_jump,_),
    next(EA_jump,EA_target),
    arch.jump(EA_jump),
    arch.conditional(EA_jump,"NE").

.decl must_def(EA:address,Reg:register) inline

must_def(EA,Reg):-
    def(EA,Reg),
    !arch.conditional(EA,_).

.decl defined_in_block(EA:address,Reg:register)

defined_in_block(Block,Reg):-
    def(EA,Reg),
    code_in_block(EA,Block).

/**
The register is explicitly used in an operand.
*/
.decl used_explicit(EA:address,Reg:register,Index:operand_index)

used_explicit(EA,Reg,Index):-
    instruction_get_src_op(EA,Index,Op),
    op_regdirect_contains_reg(Op,Reg),
    track_register(Reg),
    !is_xor_reset(EA).

used_explicit(EA,Reg,Index):-
    instruction_get_op(EA,Index,Op),
    op_indirect_contains_reg(Op,Reg),
    track_register(Reg).

used_before_code_inference(EA,Reg,Index):-
    used_explicit(EA,Reg,Index).

// Implicitly-used registers use an operand index of zero.
used_before_code_inference(EA,Reg,0):-
    arch.uses_reg(EA,Reg),
    track_register(Reg),
    !used_explicit(EA,Reg,_),
    !is_xor_reset(EA).

.decl used_in_block(Block:address,EA_used:address,Reg:register,Index:operand_index)

used_in_block(Block,EA_used,Reg,Index):-
    used(EA_used,Reg,Index),
    code_in_block(EA_used,Block).

used(EA,Reg,Index):-
    used_before_code_inference(EA,Reg,Index).

/**
The last address prior to EA where Reg was defined within the block
*/
.decl block_last_def(EA:address,EA_def:address,Reg:register)

block_last_def(EA_next,EA,Reg):-
    def(EA,Reg),
    local_next(EA,EA_next).

block_last_def(EA_next,EA_def,Reg):-
    block_last_def(EA,EA_def,Reg),
    !must_def(EA,Reg),
    local_next(EA,EA_next).

/**
The last definition(s) of Reg in a given block.

Multiple are possible in conditional cases.
*/
.decl last_def_in_block(Block:address,EA_def:address,Reg:register)

last_def_in_block(Block,EA_def,Reg):-
    block_last_instruction(Block,BlockEnd),
    (
        def(BlockEnd,Reg),
        EA_def=BlockEnd
        ;
        !must_def(BlockEnd,Reg),
        block_last_def(BlockEnd,EA_def,Reg)
    ).

/**
A register is referenced in a block
*/
.decl reg_in_block(Block:address,Reg:register)

reg_in_block(Block,Reg):-
    defined_in_block(Block,Reg);
    used_in_block(Block,_,Reg,_).

/**
A value returned from a function is used.
*/
.decl return_val_used(EA_call:address,Callee:address,Reg:register,EA_used:address,Index_used:operand_index)

return_val_used(EA_call,Callee,Reg,EA_used,Index_used):-
    arch.return_reg(Reg),
    def_used(EA_call,Reg,EA_used,Index_used),
    direct_call(EA_call,Callee).

/**
A value is returned from a called procedure Callee, from the last Block with
the last instruction at BlockEnd.
*/
.decl return_block_end(Callee:address,CalleeEnd:address,Block:address,BlockEnd:address)

return_block_end(Callee,CalleeEnd,Block,BlockEnd):-
    direct_call(_,Callee),
    fde_addresses(Callee,CalleeEnd),
    arch.return(CalleeReturn),
    Callee <= CalleeReturn,
    CalleeReturn < CalleeEnd,
    code_in_block(CalleeReturn,Block),
    block_last_instruction(Block,BlockEnd).

/**
A register is used in a block, but not defined there.
*/
.decl used_not_def_in_block(Block:address,Reg:register,EA_used:address)

// Base case: used in this block
used_not_def_in_block(Block,Reg,EA_used):-
    used_in_block(Block,EA_used,Reg,_),
    !block_last_def(EA_used,_,Reg).

// Base case: returned in this block
used_not_def_in_block(RetBlock,Reg,EA_used):-
    return_block_end(Callee,_,RetBlock,RetBlockEnd),
    !block_last_def(RetBlockEnd,_,Reg),
    return_val_used(_,Callee,Reg,EA_used,_).

/**
Propagate backward from usages to search for defs.

This is faster than propagating forward from defs, since a used value should
always be defined in well-behaved code. In addition, we know to stop
propagating once the definition is found.

The alternative strategy of propagating forward from defs means that it must
propagate indefinitely, in case it is used multiple times. Further, side-effect
definitions are often unused.

To further optimize this strategy, if another use is encountered, we don't
propagate any further. Later, the relation used_used() propagates defs forward
through adjacent uses.
*/
.decl next_used(Block:address,BlockUsed:address,Reg:register)

// Base case
next_used(PrevBlock,Block,Reg):-
    block_next(PrevBlock,PrevBlockEnd,Block),
    used_not_def_in_block(Block,Reg,_),
    !flow_def(PrevBlockEnd,Reg,Block,_).

// Recursive case
next_used(PrevBlock,BlockUsed,Reg):-
    next_used(Block,BlockUsed,Reg),
    !reg_in_block(Block,Reg), // !flow_def is implied by !reg_in_block
    block_next(PrevBlock,_,Block).

/**
An edge between two used() that depend on the same def.
*/
.decl used_used(Reg:register,EA_used:address,Index:operand_index,Next_EA_used:address,NextIndex:operand_index)

used_used(Reg,EA_used,Index,Next_EA_used,NextIndex):-
    next_used(Block,NextUsedBlock,Reg),
    used_in_block(Block,EA_used,Reg,Index),
    !defined_in_block(Block,Reg),
    used_in_block(NextUsedBlock,Next_EA_used,Reg,NextIndex),
    !block_last_def(Next_EA_used,_,Reg).

def_used(EA_def,Reg,EA_used,Index):-
    used(EA_used,Reg,Index),
    block_last_def(EA_used,EA_def,Reg).

def_used(EA_def,Reg,EA_used,Index):-
    return_val_used(_,Callee,Reg,EA_used,Index),
    return_block_end(Callee,_,_,BlockEnd),
    block_last_def(BlockEnd,EA_def,Reg).

def_used(EA_def,Reg,EA_used,Index):-
    next_used(Block,BlockUsed,Reg),
    last_def_in_block(Block,EA_def,Reg),
    used_not_def_in_block(BlockUsed,Reg,EA_used),
    used(EA_used,Reg,Index).

def_used(EA_def,Reg,EA_used,Index):-
    next_used(Block,BlockUsed,Reg),
    !defined_in_block(Block,Reg),
    flow_def(EA_def,Reg,Block,_),
    used_not_def_in_block(BlockUsed,Reg,EA_used),
    used(EA_used,Reg,Index).

// Forward propagate def_used to downstream used
def_used(EA_def,Reg,Next_EA_used,NextIndex):-
    used_used(Reg,EA_used,Index,Next_EA_used,NextIndex),
    def_used(EA_def,Reg,EA_used,Index).

/**
 * The register 'Reg' used as an address at address 'EA'.
 */
.decl used_for_address(EA:address,Reg:register)
.output used_for_address

used_for_address(EA,Reg):-
    used(EA,Reg,Index),
    instruction_get_op(EA,Index,Op),
    op_indirect_contains_reg(Op,Reg).

used_for_address(EA,Reg):-
    reg_jump(EA,Reg),
    used(EA,Reg,_).

used_for_address(EA,Reg):-
    reg_call(EA,Reg),
    used(EA,Reg,_).

/**
 * The register 'Reg' as defined at address 'EA_def' is later used either as an address
 * or to compute an address.
 */
.decl def_used_for_address(EA_def:address,Reg:register)
.output def_used_for_address

def_used_for_address(EA_def,Reg):-
    def_used(EA_def,Reg,EA,_),
    used_for_address(EA,Reg).

def_used_for_address(EA_def,Reg):-
    def_used_for_address(EA_used,_),
    def_used(EA_def,Reg,EA_used,_).

def_used_for_address(EA,Reg):-
    arch.pc_relative_addr(EA,Reg,_).

// straight_line_def_used is a weaker version than def_used
// that can be used BEFORE code inference.

// the last address where a register was defined within the block
.decl straight_line_last_def(EA:address,EA_def:address,Reg:register)

straight_line_last_def(EA_next,EA,Reg):-
    def(EA,Reg),
    possible_ea(EA),
    must_fallthrough(EA,EA_next),
    possible_ea(EA_next).

straight_line_last_def(EA_next,EA_def,Reg):-
    straight_line_last_def(EA,EA_def,Reg),
    !must_def(EA,Reg),
    must_fallthrough(EA,EA_next),
    possible_ea(EA_next).

.decl straight_line_def_used(EA_def:address,Reg:register,EA_used:address,Index:unsigned)
.output straight_line_def_used

straight_line_def_used(EA_def,Reg,EA_used,Index):-
    used_before_code_inference(EA_used,Reg,Index),
    straight_line_last_def(EA_used,EA_def,Reg).
