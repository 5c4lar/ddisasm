//===- use_def_analysis.dl --------------------------------------*- datalog -*-===//
//
//  Copyright (C) 2019 GrammaTech, Inc.
//
//  This code is licensed under the GNU Affero General Public License
//  as published by the Free Software Foundation, either version 3 of
//  the License, or (at your option) any later version. See the
//  LICENSE.txt file in the project root for license terms or visit
//  https://www.gnu.org/licenses/agpl.txt.
//
//  This program is distributed in the hope that it will be useful,
//  but WITHOUT ANY WARRANTY; without even the implied warranty of
//  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
//  GNU Affero General Public License for more details.
//
//  This project is sponsored by the Office of Naval Research, One Liberty
//  Center, 875 N. Randolph Street, Arlington, VA 22203 under contract #
//  N68335-17-C-0700.  The content of the information does not necessarily
//  reflect the position or policy of the Government and no official
//  endorsement should be inferred.
//
//===----------------------------------------------------------------------===//
/**
This modules computes def-uses chains for a subset of the registers (defined in track_register).
and only if those chains are related eventually to an access to memory.

-'def' computes definitions of registers at each of the locations.

-'used_for_address' compute the set of live uses backwards at each of the locations.
 However, it only computes uses starting at accesses to memory.

-'def_used' intersects the two previous facts to obtain def-use chains.

The traversal of used_for_address is kept intra-procedural (not following call edges).

TODO: there is probably a more efficient way of doing this, the tables for usef_for_address
can get very big.
*/


// register is defined in this location
.decl def(EA:address,Reg:register)


// the register 'reg' at address 'ea' is later used in a memory address in 'where'
// in the operand 'index'
.decl used_for_address(ea:address,reg:register,where:address, index:operand_index)


.decl used(EA:address,Reg:register,Index:operand_index)

//The 'reg' is defined in 'ea_def' and used in 'ea_used' in the operand with index 'index_used'	
.decl def_used(ea_def:address,reg:register,ea_used:address,index_used:operand_index)
.output def_used

////////////////////////////////////////////////////////////////////////
// hard-coded facts about the analysis
///////////////////////////////////////////////////
	
// limit the registers that are tracked
// and transform the names to their 64 bits version
.decl track_register(Reg32:register,Reg64:register)

track_register("EAX","RAX").
track_register("RAX","RAX").

track_register("EBX","RBX").
track_register("RBX","RBX").

track_register("ECX","RCX").
track_register("RCX","RCX").


track_register("EDX","RDX").
track_register("RDX","RDX").

track_register("EDI","RDI").
track_register("RDI","RDI").

track_register("ESI","RSI").
track_register("RSI","RSI").

track_register("RBP","RBP").
track_register("EBP","RBP").

track_register("R8","R8").
track_register("R8D","R8").

track_register("R9","R9").
track_register("R9D","R9").

track_register("R10","R10").
track_register("R10D","R10").

track_register("R11","R11").
track_register("R11D","R11").

track_register("R12","R12").
track_register("R12D","R12").

track_register("R13","R13").
track_register("R13D","R13").

track_register("R14","R14").
track_register("R14D","R14").

track_register("R15","R15").
track_register("R15D","R15").

// this specifies the registers whose value is not kept through a function call
// according to the 'System V AMD64 ABI' calling convention.
.decl function_non_maintained_reg(reg:register)

function_non_maintained_reg("RAX").
function_non_maintained_reg("RCX").
function_non_maintained_reg("RDX").
function_non_maintained_reg("RDI").
function_non_maintained_reg("RSI").


function_non_maintained_reg("R8").
function_non_maintained_reg("R9").
function_non_maintained_reg("R10").
function_non_maintained_reg("R11").

////////////////////////////////////////////////////////////////////////
// Auxiliary predicates
/////////////////////////////////////////////////////

.decl op_indirect_contains_reg(op:operand_code,reg:register)

// we ignore segment registers
op_indirect_contains_reg(Op,Reg_uniform):-
	op_indirect(Op,_,Reg2,_,_,_,_),
	track_register(Reg2,Reg_uniform).
	
op_indirect_contains_reg(Op,Reg_uniform):-
	op_indirect(Op,_,_,Reg3,_,_,_),
	track_register(Reg3,Reg_uniform).

.decl op_regdirect_contains_reg(op:operand_code,reg:register)

op_regdirect_contains_reg(Op,Reg_uniform):-
	op_regdirect(Op,Reg),
	track_register(Reg,Reg_uniform).

// special case where a register is compared to another
// there is no data dependency but if one is an address the other is possibly
// an address as well.
.decl reg_compared(EA:address,Reg:register,Index:operand_index,Reg2:register,Index2:operand_index)

reg_compared(EA,Reg,Index,Reg2,Index2):-
	code(EA),
	instruction_get_operation(EA,Operation),
	comparison_operation(Operation),
	//track the other operand
	instruction_get_src_op(EA,Index,Op1),
	op_regdirect_contains_reg(Op1,Reg),
	instruction_get_src_op(EA,Index2,Op2),
	op_regdirect_contains_reg(Op2,Reg2),
	Op2!=Op1.
//////////////////////////////////////////////////////////////////////////////
//local underapproximation of control flow
.decl local_next(ea:address,ea_next:address)

local_next(EA,EA_next):-
	code(EA),
	may_fallthrough(EA,EA_next).


	
local_next(EA,EA_next):-
	code(EA),
	direct_jump(EA,EA_next).

//////////////////////////////////////////////////////////////////////////////
// Main definitions

def(EA,Reg):-
	code(EA),
	instruction_get_dest_op(EA,_,Op),
	op_regdirect_contains_reg(Op,Reg).

def(EA,Reg):-
	code(EA),
	instruction_get_operation(EA,"CALL"),
	function_non_maintained_reg(Reg).

.decl must_def(EA:address,Reg:register)

must_def(EA,Reg):-
	def(EA,Reg),
	!conditional_mov(EA).

.decl defined_in_block(EA:address,Reg:register)

defined_in_block(Block,Reg):-
	def(EA,Reg),
	code_in_block(EA,Block).


used(EA,Reg,Index):-
	code(EA),
	instruction_get_op(EA,Index,Op),
	(
	op_indirect_contains_reg(Op,Reg)
	;
	op_regdirect_contains_reg(Op,Reg)
	).

//BASE CASE: used register for memory here and not accessing the stack
used_for_address(EA,Reg,EA,Index):-
	used(EA,Reg,Index),
	instruction_get_op(EA,Index,Op),
	op_indirect_contains_reg(Op,Reg),
	//lea does not access memory
	!instruction_get_operation(EA,"LEA").
	//Reg!="RBP".

//USED TRANSITIVELY: used to compute something used for memory later
used_for_address(EA,Used_reg,EA,Index):-
	//the instruction defines a register that is used for memory
	used_for_address(EA_next,Reg_defined,_,_),
	local_next(EA,EA_next),
	def(EA,Reg_defined),
	instruction_get_src_op(EA,Index,_),
	used(EA,Used_reg,Index).
	
//SPECIAL CASE: the register is not used to compute an address but it is
// compared to a register possibly containing an address
used_for_address(EA,Reg_compared,EA,Index):-
	used_for_address(EA_next,Reg_used,_,_),
	local_next(EA,EA_next),
	reg_compared(EA,Reg_used,_,Reg_compared,Index).

// the same special case when the block is skipped
used_for_address(EA,Reg_compared,EA,Index):-
	used_for_address(Block,Reg_used,EA_used,_),
	!defined_in_block(Block,Reg_used),
	code_in_block(EA,Block),EA<EA_used,
	reg_compared(EA,Reg_used,_,Reg_compared,Index).


// propagation of uses when the register is not (necessarily) re-defined	
// go one by one if the register is defined in the block
used_for_address(EA,Reg,Where,Index):-
	used_for_address(EA_next,Reg,Where,Index),
	local_next(EA,EA_next),
	code_in_block(EA,Block),
	defined_in_block(Block,Reg),
	!must_def(EA,Reg).

// skip the block if the register is not defined there
used_for_address(Block,Reg,Where,Index):-
	used_for_address(EA_next,Reg,Where,Index),
	local_next(EA,EA_next),
	code_in_block(EA,Block),
	!defined_in_block(Block,Reg).

used_for_address(EA,Reg,Where,Index):-
	used_for_address(Block,Reg,Where,Index),
	code_in_block(EA,Block),
	!defined_in_block(Block,Reg),
	local_next(EA_prev,EA),
	used(EA_prev,Reg,_).


// once we have definitions and live uses, we can compute def_used connections
def_used(EA_def,Reg,EA_used,Index):-
	def(EA_def,Reg),
	local_next(EA_def,EA_next),
	used_for_address(EA_next,Reg,EA_used,Index).
