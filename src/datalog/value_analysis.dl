//////////////////////////////////////////////////////////////////////////////////
// Basic value analysis:
// the value of a register at a point (ea) is expressed as the value of another
// at another point (EA_reg1)
// multiplied by a multiplier plus an offset
// val(Reg,EA) = val(Reg1,EA_reg1)* Multiplier+ Offset
.decl value_reg_edge(EA:address,Reg:register,
                EA_reg1:address,Reg1:register,Multiplier:number,Offset:number)

.output value_reg_edge
.decl value_reg(EA:address,Reg:register,
                EA_reg1:address,Reg1:register,Multiplier:number,Offset:number,steps:number)
.output value_reg

// mov reg immediate
value_reg_edge(EA,Reg,0,"NullReg64",0,Immediate):-
	def_used(EA,Reg,_,_),
	instruction(EA,_,_,"MOV",Op1,Op2,0,0),
	op_immediate(Op1,Immediate),
	op_regdirect_contains_reg(Op2,Reg).

value_reg_edge(EA,Reg,0,"NullReg64",0,Address):-
	def_used(EA,Reg,_,_),
	instruction(EA,Size,_,"LEA",Op1,Op2,0,0),
	op_indirect(Op1,_,"RIP",NullReg,_,Offset,_),
	null_reg(NullReg),
	op_regdirect_contains_reg(Op2,Reg),
	Address=EA+Size+Offset.
	
//mov reg reg_origin
value_reg_edge(EA,Reg,EA_prev,Reg_origin,1,0):-
	def(EA,Reg),
	def_used(EA_prev,Reg_origin,EA,_),
	mov(EA),
	instruction_get_op(EA,1,Op1),
	op_regdirect_contains_reg(Op1,Reg_origin),
	instruction_get_op(EA,2,Op2),
	op_regdirect_contains_reg(Op2,Reg),
	EA!=EA_prev.
	
//reset a register
value_reg_edge(EA,Reg,0,"NullReg64",1,0):-
	def_used(EA,Reg,_,_),
	instruction(EA,_,_,"XOR",Op1,Op2,0,0),
	op_regdirect_contains_reg(Op1,Reg),
	op_regdirect_contains_reg(Op2,Reg).
	
//add reg immediate
value_reg_edge(EA,Reg,EA_prev,Reg,1,Immediate):-
	def_used(EA_prev,Reg,EA,_),
	instruction(EA,_,_,"ADD",Op1,Op2,0,0),
	op_immediate(Op1,Immediate),
	op_regdirect_contains_reg(Op2,Reg),
	EA!=EA_prev.

value_reg_edge(EA,Reg,EA_prev,Reg,1,-Immediate):-
	def_used(EA_prev,Reg,EA,_),
	instruction(EA,_,_,"SUB",Op1,Op2,0,0),
	op_immediate(Op1,Immediate),
	op_regdirect_contains_reg(Op2,Reg),
	EA!=EA_prev.
	
value_reg_edge(EA,Reg,EA_prev,Reg,1,1):-
	def_used(EA_prev,Reg,EA,_),
	instruction(EA,_,_,"INC",Op1,0,0,0),
	op_regdirect_contains_reg(Op1,Reg),
	EA!=EA_prev.
	
value_reg_edge(EA,Reg,EA_prev,Reg,1,-1):-
	def_used(EA_prev,Reg,EA,_),
	instruction(EA,_,_,"DEC",Op1,0,0,0),
	op_regdirect_contains_reg(Op1,Reg),
	EA!=EA_prev.	

//shl reg immediate
value_reg_edge(EA,Reg,EA_prev,Reg,2^Immediate,0):-
	def_used(EA_prev,Reg,EA,_),
	instruction(EA,_,_,"SHL",Op1,Op2,0,0),
	op_immediate(Op1,Immediate),
	op_regdirect_contains_reg(Op2,Reg),
	EA!=EA_prev.

//mul reg reg immediate
value_reg_edge(EA,Reg,EA_prev,Reg2,Immediate,0):-
	def_used(EA_prev,Reg2,EA,_),
	instruction(EA,_,_,"IMUL3",Op1,Op2,Op3,0),
	op_immediate(Op2,Immediate),
	op_regdirect_contains_reg(Op3,Reg),
	op_regdirect_contains_reg(Op1,Reg2),
	EA!=EA_prev.
//mul reg immediate
value_reg_edge(EA,Reg,EA_prev,Reg2,Immediate,0):-
	def_used(EA_prev,Reg2,EA,_),
	instruction(EA,_,_,"IMUL2",Op1,Op2,0,0),
	op_immediate(Op1,Immediate),
	op_regdirect_contains_reg(Op2,Reg),
	EA!=EA_prev.
	
//lea reg [reg_origin*Multiplier+Offset]
value_reg_edge(EA,Reg,EA_prev,Reg_origin,Multiplier,Offset):-
	def(EA,Reg),
	def_used(EA_prev,Reg_origin,EA,1),
	instruction(EA,_,_,"LEA",Op1,Op2,0,0),
	op_indirect(Op1,_,NullReg,Reg_origin_non_uniform,Multiplier,Offset,_),
	null_reg(NullReg),
	track_register(Reg_origin_non_uniform,Reg_origin),
	op_regdirect_contains_reg(Op2,Reg),
	EA!=EA_prev.
//lea reg [reg_origin+reg_origin*Multiplier+Offset]	
value_reg_edge(EA,Reg,EA_prev,Reg_origin,Multiplier+1,Offset):-
	def(EA,Reg),
	def_used(EA_prev,Reg_origin,EA,1),
	instruction(EA,_,_,"LEA",Op1,Op2,0,0),
	op_indirect(Op1,_,Reg_origin_non_uniform,Reg_origin_non_uniform,Multiplier,Offset,_),
	track_register(Reg_origin_non_uniform,Reg_origin),
	op_regdirect_contains_reg(Op2,Reg),
	EA!=EA_prev.	
//lea reg [reg_origin+Offset]
value_reg_edge(EA,Reg,EA_prev,Reg_origin,1,Offset):-
	def(EA,Reg),
	def_used(EA_prev,Reg_origin,EA,1),
	instruction(EA,_,_,"LEA",Op1,Op2,0,0),
	op_indirect(Op1,_,Reg_origin_non_uniform,NullReg,1,Offset,_),
	null_reg(NullReg),
	track_register(Reg_origin_non_uniform,Reg_origin),
	op_regdirect_contains_reg(Op2,Reg),
	EA!=EA_prev.

///////////////////////////////////////////////////////////////////////////////////////
// once we have the edges that relate the values of registers at different
// instructions we propagate these values forward

//base cases
value_reg(EA,Reg,0,Reg_prev,Mult,Immediate,1):-
	value_reg_edge(EA,Reg,0,Reg_prev,Mult,Immediate).
value_reg(EA,Reg,EA,Reg,1,0,1):-
	def_used(EA,Reg,_,_),
	!value_reg_edge(EA,Reg,_,_,_,_).

	

// possible loop
value_reg(EA,Reg,0,"Unknown",Immediate,Base,Steps+1):-
	def_used(EA,Reg,EA,_),
	instruction(EA,_,_,"ADD",Op1,Op2,0,0),
	op_immediate(Op1,Immediate),
	op_regdirect_contains_reg(Op2,Reg),
	// the base case
	value_reg(EA,Reg,0,NullReg,0,Base,Steps),
	null_reg(NullReg),
	Steps+1<8.
value_reg(EA,Reg,0,"Unknown",1,Base,Steps+1):-
	def_used(EA,Reg,EA,_),
	instruction(EA,_,_,"INC",Op1,0,0,0),
	op_regdirect_contains_reg(Op1,Reg),
	// the base case
	value_reg(EA,Reg,0,NullReg,0,Base,Steps),
	null_reg(NullReg),
	Steps+1<8.	
	
// This is an ad-hoc case observed quite often:
// Reg2=Reg2-Reg1
// where Reg2 is defined in terms of Reg1
// Reg2= (Reg1*mult+offset)-Reg1 = Reg1 *(mult-1)+offset
value_reg(EA,Reg2,EA_third,Reg3,Multiplier-Multiplier2,Offset-Offset2,Steps3):-
	def(EA,Reg2),
	instruction(EA,_,_,"SUB",Op1,Op2,0,0),
	op_regdirect_contains_reg(Op1,Reg1),
	op_regdirect_contains_reg(Op2,Reg2),
	// Reg2 is defined in EA_prev in terms of reg1
	def_used(EA_prev,Reg2,EA,_),
	value_reg(EA_prev,Reg2,EA_third,Reg3,Multiplier,Offset,Steps),
	Multiplier>1,
	// Reg1 is defined at the same point
	def_used(EA_def1,Reg1,EA,_),
	value_reg(EA_def1,Reg1,EA_third,Reg3,Multiplier2,Offset2,Steps2),
	EA != EA_def1,
	EA != EA_prev,
	EA!=EA_third,
	Steps3=max(Steps+1,Steps2+1),
	Steps3<8.

value_reg(EA,Reg2,EA_third,Reg3,Multiplier+Multiplier2,Offset+Offset2,Steps3):-
	def(EA,Reg2),
	instruction(EA,_,_,"ADD",Op1,Op2,0,0),
	op_regdirect_contains_reg(Op2,Reg2),
	op_regdirect_contains_reg(Op1,Reg1),
	def_used(EA_def1,Reg1,EA,_),
	def_used(EA_prev,Reg2,EA,_),
	value_reg(EA_def1,Reg1,EA_third,Reg3,Multiplier2,Offset2,Steps2),
	Multiplier2>=1,
	value_reg(EA_prev,Reg2,EA_third,Reg3,Multiplier,Offset,Steps),
	Multiplier>=1,
	EA != EA_def1,
	EA != EA_prev,
	EA!=EA_third,
	Steps3=max(Steps+1,Steps2+1),
	Steps3<8.

// normal propagation
value_reg(EA1,Reg1,EA3,Reg3,Multiplier*Multiplier2,(Offset2*Multiplier)+Offset,Steps2):-
	value_reg(EA2,Reg2,EA3,Reg3,Multiplier2,Offset2,Steps),
	value_reg_edge(EA1,Reg1,EA2,Reg2,Multiplier,Offset),
	EA2!=EA1,
	EA1!=EA3,
	// we allow less back steps
	(
	  EA2<=EA1,
	  Steps2=Steps+1
	  ;
	  EA2>EA1,
	  Steps2=Steps+4
	),
	Steps2<8.
