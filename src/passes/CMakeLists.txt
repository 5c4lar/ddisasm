
#============ Scc pass =================

add_library(scc_pass STATIC
  SccPass.cpp)

target_link_libraries(scc_pass
  gtirb)

if(${CMAKE_CXX_COMPILER_ID} STREQUAL MSVC)
  set_common_msvc_options(scc_pass)
  target_compile_options(scc_pass PRIVATE -wd4275) # Non-dll interface base classes.
  target_compile_options(scc_pass PRIVATE -wd4251) # class 'type' needs to have dll-
                                                   # interface to be used by clients of class
                                                   # 'type2'
endif()

#============ No return pass =================

set(NO_RETURN_DATALOG_SOURCES
    datalog/no_return_analysis.dl)

set(NO_RETURN_CPP "${CMAKE_BINARY_DIR}/src/passes/souffle_no_return.cpp")

if(${CMAKE_CXX_COMPILER_ID} STREQUAL MSVC)
  add_custom_command(OUTPUT ${NO_RETURN_CPP}
    # Souffle includes the path of the output file in the generated
    # program name. Change directory and use a relative path so the name
    # does not depend on build location.
    WORKING_DIRECTORY "${CMAKE_BINARY_DIR}/src/passes"
    COMMAND wsl souffle ../../../src/passes/datalog/no_return_analysis.dl -g souffle_no_return.cpp -j${CORES}
    DEPENDS ${NO_RETURN_DATALOG_SOURCES})
else()
  add_custom_command(OUTPUT ${NO_RETURN_CPP}
    # Souffle includes the path of the output file in the generated
    # program name. Change directory and use a relative path so the name
    # does not depend on build location.
    WORKING_DIRECTORY "${CMAKE_BINARY_DIR}/src/passes"
    COMMAND ${SOUFFLE} ${CMAKE_CURRENT_SOURCE_DIR}/datalog/no_return_analysis.dl -g souffle_no_return.cpp -j${CORES}
    DEPENDS ${NO_RETURN_DATALOG_SOURCES})
endif()



add_library(no_return_pass STATIC
  NoReturnPass.cpp
  ${NO_RETURN_CPP})

target_link_libraries(no_return_pass
  gtirb
  datalog_utils)

target_compile_definitions(no_return_pass PRIVATE __EMBEDDED_SOUFFLE__)
target_compile_definitions(no_return_pass PRIVATE RAM_DOMAIN_SIZE=64)
target_compile_options(no_return_pass PRIVATE ${OPENMP_FLAGS})

if(${CMAKE_CXX_COMPILER_ID} STREQUAL MSVC)
  set_common_msvc_options(no_return_pass)

  target_compile_definitions(no_return_pass PRIVATE _CRT_NONSTDC_NO_WARNINGS)
  target_compile_definitions(no_return_pass PRIVATE _CRT_SECURE_NO_WARNINGS)

  # From cpp generated by souffle:
  target_compile_options(no_return_pass PRIVATE -wd4146) # unary minus operator applied to unsigned type, result still unsigned
  target_compile_options(no_return_pass PRIVATE -wd4189) # 'identifier' : local variable is initialized but not referenced

  # From souffle headers
  target_compile_options(no_return_pass PRIVATE -wd4267) # conversion from 'type1' to 'type2', possible loss of data
  target_compile_options(no_return_pass PRIVATE -wd4244) # 'conversion' conversion from 'type1' to 'type2', possible loss of data
  target_compile_options(no_return_pass PRIVATE -wd4456) # declaration of 'decl' hides previous local declaration

  target_compile_options(no_return_pass PRIVATE -wd4275) # Non-dll interface base classes.
  target_compile_options(no_return_pass PRIVATE -wd4251) # class 'type' needs to have dll-
                                                                  # interface to be used by clients of class
                                                                  # 'type2'

  target_compile_options(no_return_pass PRIVATE -wd4275) # Non-dll interface base classes.
  target_compile_options(no_return_pass PRIVATE -wd4251) # class 'type' needs to have dll-
                                                         # interface to be used by clients of class
                                                         # 'type2'
else()
  target_compile_options(no_return_pass PRIVATE -O3)
endif()

#============ Function inference pass =========

set(FUNCTION_INFERENCE_DATALOG_SOURCES
  datalog/function_inference.dl)

set(FUNCTION_INFERENCE_CPP "${CMAKE_BINARY_DIR}/src/passes/souffle_function_inference.cpp")

if(${CMAKE_CXX_COMPILER_ID} STREQUAL MSVC)
  add_custom_command(OUTPUT ${FUNCTION_INFERENCE_CPP}
    # Souffle includes the path of the output file in the generated
    # program name. Change directory and use a relative path so the name
    # does not depend on build location.
    WORKING_DIRECTORY "${CMAKE_BINARY_DIR}/src/passes"
    COMMAND wsl souffle ../../../src/passes/datalog/function_inference.dl -g souffle_function_inference.cpp -j${CORES}
    DEPENDS ${FUNCTION_INFERENCE_DATALOG_SOURCES})
else()
  add_custom_command(OUTPUT ${FUNCTION_INFERENCE_CPP}
    # Souffle includes the path of the output file in the generated
    # program name. Change directory and use a relative path so the name
    # does not depend on build location.
    WORKING_DIRECTORY "${CMAKE_BINARY_DIR}/src/passes"
    COMMAND ${SOUFFLE} ${CMAKE_CURRENT_SOURCE_DIR}/datalog/function_inference.dl -g souffle_function_inference.cpp -j${CORES}
    DEPENDS ${FUNCTION_INFERENCE_DATALOG_SOURCES})
endif()



add_library(function_inference_pass STATIC
  FunctionInferencePass.cpp
  ${FUNCTION_INFERENCE_CPP})

target_link_libraries(function_inference_pass
  gtirb
  datalog_utils)

target_compile_definitions(function_inference_pass PRIVATE __EMBEDDED_SOUFFLE__)
target_compile_definitions(function_inference_pass PRIVATE RAM_DOMAIN_SIZE=64)
target_compile_options(function_inference_pass PRIVATE ${OPENMP_FLAGS})


if(${CMAKE_CXX_COMPILER_ID} STREQUAL MSVC)
  set_common_msvc_options(function_inference_pass)

  target_compile_definitions(function_inference_pass PRIVATE _SILENCE_CXX17_ITERATOR_BASE_CLASS_DEPRECATION_WARNING)
  target_compile_definitions(function_inference_pass PRIVATE _CRT_NONSTDC_NO_WARNINGS)
  target_compile_definitions(function_inference_pass PRIVATE _CRT_SECURE_NO_WARNINGS)

  # From cpp generated by souffle:
  target_compile_options(function_inference_pass PRIVATE -wd4146) # unary minus operator applied to unsigned type, result still unsigned
  target_compile_options(function_inference_pass PRIVATE -wd4189) # 'identifier' : local variable is initialized but not referenced

  # From souffle headers
  target_compile_options(function_inference_pass PRIVATE -wd4267) # conversion from 'type1' to 'type2', possible loss of data
  target_compile_options(function_inference_pass PRIVATE -wd4244) # 'conversion' conversion from 'type1' to 'type2', possible loss of data
  target_compile_options(function_inference_pass PRIVATE -wd4456) # declaration of 'decl' hides previous local declaration

  target_compile_options(function_inference_pass PRIVATE -wd4275) # Non-dll interface base classes.
  target_compile_options(function_inference_pass PRIVATE -wd4251) # class 'type' needs to have dll-
                                                                  # interface to be used by clients of class
                                                                  # 'type2'
else()
  target_compile_options(function_inference_pass PRIVATE -O3)
endif()