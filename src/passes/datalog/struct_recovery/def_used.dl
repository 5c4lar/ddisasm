.decl local_next(EA:address, EA_next:address)
local_next(EA, EA_next):-
    code_in_refined_block(EA,Block),
    may_fallthrough(EA,EA_next),
    code_in_refined_block(EA_next,Block).
.decl value_def_at(Val: value_desc, EA: address)
value_def_at($Register(EA, Reg, Idx, Type, "in"), EA):-
    value_def($Register(EA, Reg, Idx, Type, "in")).
value_def_at($Memory(EA, Base, Idx, Mult, Offset, "in"), EA):-
    value_def($Memory(EA, Base, Idx, Mult, Offset, "in")).
value_def_at($Global(EA, Address, Idx, Mult, "in"), EA):-
    value_def($Global(EA, Address, Idx, Mult, "in")).
.decl value_used_at(Val: value_desc, EA: address)
value_used_at($Register(EA, Reg, Idx, Type, "out"), EA):-
    value_used($Register(EA, Reg, Idx, Type, "out")).
value_used_at($Memory(EA, Base, Idx, Mult, Offset, "out"), EA):-
    value_used($Memory(EA, Base, Idx, Mult, Offset, "out")).
value_used_at($Global(EA, Address, Idx, Mult, "out"), EA):-
    value_used($Global(EA, Address, Idx, Mult, "out")).
value_used_at($Immediate(EA, Val, "data"), EA):-
    value_used($Immediate(EA, Val, "data")).
.decl value_used_as(Val: value_desc, Type:symbol)
value_used_as($Register(EA, Reg, Idx, Type, "out"), Type):-
    value_used($Register(EA, Reg, Idx, Type, "out")).
.decl value_contains_reg(Val:value_desc, Reg: symbol)
value_contains_reg($Register(EA, Reg, Idx, Type, Direction), Reg):-
    value_def($Register(EA, Reg, Idx, Type, Direction)).
value_contains_reg($Memory(EA, Base, Idx, Mult, Offset, Direction), Reg):-
    value_def($Memory(EA, Base, Idx, Mult, Offset, Direction)),
    (Reg=Base;Reg=Idx).
value_contains_reg($Global(EA, Address, Idx, Mult, Direction), Reg):-
    value_def($Global(EA, Address, Idx, Mult, Direction)),
    Reg=Idx.
.decl value_get_loc(Val: value_desc, Loc: value_loc)
value_get_loc($Register(EA, Reg, Idx, Type, Direction), $RegisterLoc(Reg)):-
    value_def($Register(EA, Reg, Idx, Type, Direction));
    value_used($Register(EA, Reg, Idx, Type, Direction)).
value_get_loc($Memory(EA, Base, Idx, Mult, Offset, Direction), $MemoryLoc(Base, Idx, Mult, Offset)):-
    value_def($Memory(EA, Base, Idx, Mult, Offset, Direction));
    value_used($Memory(EA, Base, Idx, Mult, Offset, Direction)).
value_get_loc($Global(EA, Address, Idx, Mult, Direction), $GlobalLoc(Address, Idx, Mult)):-
    value_def($Global(EA, Address, Idx, Mult, Direction));
    value_used($Global(EA, Address, Idx, Mult, Direction)).
.decl same_loc(Val1: value_desc, Val2:value_desc) inline
same_loc(Val1, Val2):-
    value_def(Val1),
    value_used(Val2),
    value_get_loc(Val1, Loc),
    value_get_loc(Val2, Loc).
.decl loc_killed(Loc: value_loc, EA:address)
// .output loc_killed
.decl loc_killed_in_block(Loc:value_loc, Block: address)
.decl loc_killed_before(Loc:value_loc, EA:address)
// .output loc_killed_before
.decl loc_killed_after(Loc:value_loc, EA:address)
// .output loc_killed_after

function_reg_arg(EA, Callee, Arg):-
    code(EA),
    direct_call(EA, Callee),
    value_block_last_def(EA, $Register(EA_def, Reg, Idx, "reg", "in")),
    !value_def_used($Register(EA_def, Reg, Idx, "reg", "in"), _, _),
    !stack_pointer(Reg),
    !frame_pointer(Reg),
    Arg=$Register(EA_def, Reg, Idx, "reg", "in").

value_def(Val):-
    code(EA),
    instruction_get_dest_op(EA,Index,DestOp),
    op_to_val(EA, DestOp, Index, "in", _, Val).

value_def($Register(EA, Reg, 0, "reg", "in")):-
    code(EA),
    instruction_get_operation(EA,Operation),
    call_operation(Operation),
    return_val_reg(Reg).

value_used(Val):-
    code(EA),
    instruction_get_src_op(EA,Index,SrcOp),
    op_to_val(EA, SrcOp, Index, "out", _, Val).

value_used(Val):-
    code(EA),
    instruction_get_op(EA,Index,Op),
    op_to_val(EA, Op, Index, Type, _, Val),
    (Type="base";Type="idx").

loc_killed(Loc, EA):-
    value_def_at(Val, EA_def),
    value_contains_reg(Val, Reg),
    value_get_loc(Val, Loc),
    value_def($Register(EA, Reg, _, "reg", "in")),
    code_in_refined_block(EA_def, Block1),
    code_in_refined_block(EA, Block), 
    in_function(Block1, Function),
    in_function(Block, Function),
    EA != EA_def.

loc_killed(Loc, EA):-
    value_def_at(Val, EA_def),
    value_get_loc(Val, Loc),
    value_def_at(New, EA),
    value_get_loc(New, Loc),
    code_in_refined_block(EA_def, Block1),
    code_in_refined_block(EA, Block), 
    in_function(Block1, Function),
    in_function(Block, Function).

loc_killed(Loc, EA):-
    code(EA),
    instruction_get_operation(EA,Operation),
    call_operation(Operation),
    function_non_maintained_reg(Reg),
    value_def_at(Val, EA_def),
    value_contains_reg(Val, Reg),
    value_get_loc(Val, Loc),
    code_in_refined_block(EA_def, Block1),
    code_in_refined_block(EA, Block), 
    in_function(Block1, Function),
    in_function(Block, Function).

loc_killed_in_block(Loc, Block):-
    loc_killed(Loc, EA),
    code_in_refined_block(EA, Block).

loc_killed_before(Loc, EA_next):-
    loc_killed(Loc, EA),
    local_next(EA, EA_next).

loc_killed_before(Loc, EA_next):-
    loc_killed_before(Loc, EA),
    local_next(EA, EA_next).

loc_killed_after(Loc, EA):-
    loc_killed(Loc, EA_next),
    local_next(EA, EA_next).

loc_killed_after(Loc, EA):-
    loc_killed_after(Loc, EA_next),
    local_next(EA, EA_next).

value_block_last_def(EA_next, Val):-
    value_def(Val),
    value_def_at(Val, EA),
    local_next(EA, EA_next).

value_block_last_def(EA_next, Val):-
    value_block_last_def(EA, Val),
    value_get_loc(Val, Loc),
    !loc_killed(Loc, EA),
    local_next(EA, EA_next).

value_last_def(Block_next, $Register(Block_end, Reg, 0, "reg", "in")):-
    flow_def(Block_end, Reg, Block_next, _).

value_last_def(Block, Val):-
    value_def(Val),
    value_def_at(Val, EA),
    value_contains_reg(Val, Reg),
    block_next(EA, Block),
    !flow_def(EA, Reg, Block, _).

value_last_def(Block, Val):-
    value_block_last_def(Block_end, Val),
    value_get_loc(Val, Loc),
    !loc_killed(Loc, Block_end),
    block_next(Block_end, Block).

value_last_def(Block_next, Val):-
    value_last_def(Block, Val),
    block_last_instruction(Block, Block_end),
    block_next(Block_end, Block_next),
    value_get_loc(Val, Loc),
    !loc_killed_in_block(Loc, Block),
    value_contains_reg(Val, Reg),
    !flow_def(Block_end, Reg, Block, _).

value_def_used(Def, Used, "intra_block"):-
    value_used(Used),
    value_used_at(Used, EA),
    value_block_last_def(EA, Def),
    same_loc(Def, Used).

value_def_used(Def, Used, "inter_block"):-
    value_used(Used),
    value_used_at(Used, EA_used),
    value_def_at(Def, EA_def),
    code_in_refined_block(EA_used, Block),
    value_last_def(Block, Def),
    value_get_loc(Used, Loc),
    !loc_killed_before(Loc, EA_used),
    (
        !code_in_refined_block(EA_def, Block);
        !loc_killed_after(Loc, EA_def)
    ),
    same_loc(Def, Used).

value_edge(Src, Dst, "mov"):-
    mov(EA),
    value_def_at(Dst, EA),
    value_used_at(Src, EA),
    !value_used_as(Src, "idx"),
    !value_used_as(Src, "base").

value_edge($Register(EA_def, Reg, Idx_def, Type_def, "in"), $Register(EA_used, Reg, Idx, Type, "out"), "callee"):-
    def_used_return_val_reg(EA_def, _, Reg, EA_used, _),
    value_def_at($Register(EA_def, Reg, Idx_def, Type_def, "in"), EA_def),
    value_used_at($Register(EA_used, Reg, Idx, Type, "out"), EA_used).

value_edge(Def, Used, "caller"):-
    value_used_at(Used, EA),
    !value_def_used(_, Used, _),
    code_in_refined_block(EA, Block),
    in_function(Block, Function),
    direct_call(EA_call, Function),
    function_reg_arg(EA_call, Function, Def),
    same_loc(Def, Used).