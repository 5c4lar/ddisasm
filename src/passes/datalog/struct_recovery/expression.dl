value_arithmetic_edge(DstVal, SrcVal2, SrcVal1, Mult, 0):-
    instruction(EA,_,_,Operation,Op1,Op2,0,0,_,_),
    op_to_val(EA, Op2, 2, "in", _, DstVal),
    op_to_val(EA, Op1, 1, "out", _, SrcVal1),
    op_to_val(EA, Op2, 2, "out", _, SrcVal2),
    (Operation="ADD", Mult=1;
    Operation="SUB", Mult=-1).

value_arithmetic_edge(DstVal, SrcVal, $Empty_val(), 1, Offset):-
    instruction(EA,_,_,Operation,Op1,0,0,0,_,_),
    op_to_val(EA, Op1, 1, "in", _, DstVal),
    op_to_val(EA, Op1, 1, "out", _, SrcVal),
    (Operation="INC", Offset=1;
    Operation="DEC", Offset=-1).

value_arithmetic_edge(DstVal, $Empty_val(), SrcVal, Mult, 0):-
    instruction(EA,_,_,Operation,Op1,Op2,0,0,_,_),
    op_to_val(EA, Op2, 2, "in", _, DstVal),
    op_to_val(EA, Op2, 2, "out", _, SrcVal),
    op_immediate(Op1, Val),
    (Operation="SHL", Mult=2^Val;
    Operation="IMUL", Mult=Val).

value_arithmetic_edge(DstVal, $Empty_val(), SrcVal, Mult, 0):-
    instruction(EA,_,_,"IMUL",Op1,Op2,Op3,0,_,_),
    op_to_val(EA, Op3, 3, "in", _, DstVal),
    op_to_val(EA, Op1, 1, "out", _, SrcVal),
    op_immediate(Op2, Mult).

value_arithmetic_edge(DstVal, SrcVal1, SrcVal2, Mult, Offset):-
    instruction(EA,_,_,"LEA",Op1,Op2,0,0,_,_),
    op_indirect(Op1,_,Reg1,Reg2,Mult,Offset,_),
    op_to_val(EA, Op2, 2, "in", _, DstVal),
    (op_to_val(EA, Op1, 1, "base", _, SrcVal1),Reg1!="NONE";SrcVal1=$Empty_val(),Reg1="NONE"),
    (op_to_val(EA, Op1, 1, "idx", _, SrcVal2),Reg2!="NONE";SrcVal2=$Empty_val(),Reg2="NONE").

address_expr(Val, Ptr, Exp):-
    op_to_val(_, _, Index, _, _, Val),
    Val=$Memory(EA, Base, Idx, Mult, Offset, Direction),
    Base=Base, Idx=Idx, Direction=Direction,
    op_to_val(EA, _, Index, "base", _, Base_val),
    evaluate_val(Base_val, Base_exp, _, _, Base_type, _),
    (
        op_to_val(EA, _, Index, "idx", _, Idx_val),
        evaluate_val(Idx_val, Idx_exp, _, _, Idx_type, _);
        Idx_exp=$Number(0),Idx_type="data"
    ),
    (
        Base_type="ptr",Idx_type="data",Ptr=Base_exp,
        Exp=$Add(Base_exp, $Add($Mult(Idx_exp, $Number(Mult)), $Number(Offset)));
        Base_type="data",Idx_type="ptr", Mult=1,Ptr=Idx_exp,
        Exp=$Add(Idx_exp, $Add($Mult(Base_exp, $Number(1)), $Number(Offset)))
    ).

address_expr(Val, $Address(Address), Exp):-
    op_to_val(_, _, Index, _, _, Val),
    Val=$Global(EA, Address, Idx, Mult, Direction),
    Direction=Direction,
    (
        Idx="NONE", Mult=1,
        Index=Index, EA=EA,
        Exp=$Address(Address);
        Idx!="NONE",
        op_to_val(EA, _, Index, "idx", _, Idx_val),
        evaluate_val(Idx_val, Idx_exp, _, _, _, _),
        Exp=$Add($Address(Address), $Mult(Idx_exp, $Number(Mult)))
    ).

address_expr_simplified(Val, Ptr, Exp):-
    address_expr(Val, Ptr, Exp_orig),
    simplify_exp(Exp_orig, Exp).

// value source
simplify_exp(Exp, Exp):-
    evaluate_val(_, Exp, _, _, _, Type),
    (Type="func";Type="symbol";Type="frame";Type="immediate";Type="null").

simplify_exp(Exp, Exp):-
    to_simplify(Exp),
    Exp=$Number(x),
    x=x.

// global address
simplify_exp(Exp, Exp):-
    to_simplify($Address(Address)),
    Exp=$Address(Address).

// Add two numbers
simplify_exp(Exp, Res):-
    to_simplify(Exp),
    Exp=$Add(N1, N2),
    simplify_exp(N1, $Number(x)),
    simplify_exp(N2, $Number(y)),
    Res=$Number(x+y).

// Mult tow numbers
simplify_exp(Exp, Res):-
    to_simplify(Exp),
    Exp=$Mult(N1, N2),
    simplify_exp(N1, $Number(x)),
    simplify_exp(N2, $Number(y)),
    Res=$Number(x*y).

// Add Address to number
simplify_exp(Exp, Res):-
    to_simplify(Exp),
    Exp=$Add(N1, N2),
    simplify_exp(N2, Res_offset),
    (simplify_exp(N1, $Address(x)),
    (Res=$Add($Address(x), Res_offset),Res_offset!=$Number(0);
    Res=$Address(x), Res_offset=$Number(0));
    simplify_exp(N1, $Symbolic(x, y)),
    (Res=$Add($Symbolic(x, y), Res_offset),Res_offset!=$Number(0);
    Res=$Symbolic(x, y), Res_offset=$Number(0))).

// Swap
simplify_exp(Exp, Res):-
    to_simplify(Exp),
    Exp=$Add(N1, N2),
    simplify_exp(N1, Res_offset),
    (simplify_exp(N2, $Address(x)),
    Res=$Add($Address(x), Res_offset);
    simplify_exp(N2, $Symbolic(x, y)),
    Res=$Add($Symbolic(x, y), Res_offset)).

// Absorb
simplify_exp(Exp, Res):-
    to_simplify(Exp),
    (Exp=$Add(N1, N2),
    simplify_exp(N2, $Number(0));
    Exp=$Mult(N1, N2),
    simplify_exp(N2, $Number(1))),
    simplify_exp(N1, Res).

// Absorb left
simplify_exp(Exp, Res):-
    to_simplify(Exp),
    Exp=$Add(N1, Exp1),
    simplify_exp(N1, $Number(0)),
    simplify_exp(Exp1, Res).

// Add Offset
simplify_exp(Exp, Res):-
    to_simplify(Exp),
    (Exp=$Add(N1, Exp1);
    Exp=$Add(Exp1, N1)),
    simplify_exp(N1, $Number(x)),
    x!=0,
    simplify_exp(Exp1, Res1),
    (Res1=$Add(Symbol, $Number(y)),
    Res=$Add(Symbol, $Number(x+y));
    Res1=Symbol,
    Res=$Add(Symbol, $Number(x))),
    evaluate_val(_, Symbol, _, _, _, Type),
    (Type="func";Type="symbol").

// value from function return
evaluate_val($Register(EA_call, Reg, 0, "reg", "in"), $Symbolic(EA_call, Function), [EA_call, 0, 0], Depend, Type, "func"):-
    direct_call(EA_call, Callee),
    return_val_reg(Reg),
    cfg_edge_to_symbol(Callee, Function, _),
    value_depend($Register(EA_call, Reg, 0, "reg", "in"), [EA_call, 0, 0], Depend),
    function_prototype(Function, 0, Type).
    // Type="ptr".

evaluate_val($Register(EA_call, Reg, 0, "reg", "in"), $Symbolic(EA_call, Function), [EA_call, 0, 0], Depend, "ptr", "func"):-
    direct_call(EA_call, Callee),
    return_val_reg(Reg),
    cfg_edge_to_symbol(Callee, Function, _),
    value_depend($Register(EA_call, Reg, 0, "reg", "in"), [EA_call, 0, 0], Depend),
    ptr_candidate(EA_call),
    !function_prototype(Function, 0, _).

evaluate_val($Register(EA_call, Reg, 0, "reg", "in"), $Symbolic(EA_call, Function), [EA_call, 0, 0], Depend, "unkown", "func"):-
    direct_call(EA_call, Callee),
    return_val_reg(Reg),
    cfg_edge_to_symbol(Callee, Function, _),
    value_depend($Register(EA_call, Reg, 0, "reg", "in"), [EA_call, 0, 0], Depend),
    !function_prototype(Function, 0, _).

evaluate_val(Val, Sym, Src, Depend, "unkown", "func") <=
evaluate_val(Val, Sym, Src, Depend, "ptr", "func") :-
    Val=Val.

// evaluate_val($Register(EA_def, Reg, Index, "reg", "in"), $Symbolic(EA, Function)):-
//     function_reg_arg(EA, Callee, $Register(EA_def, Reg, Index, "reg", "in")),
//     cfg_edge_to_symbol(Callee, Function, _),
//     arg_idx(Reg, Idx),
//     function_prototype(Function, Idx, Type).

// value from global_ptr
evaluate_val(Val, $Address(as(Address, address)), [EA, 0, 0], Depend, "ptr", "symbol"):-
    op_to_val(EA, _, _, "in", _, Val),
    op_to_val(EA, _, _, "out", "global", $Global(_, Address, _, _, _)),
    instruction_get_operation(EA, Operation),
    Operation="LEA",
    value_depend(Val, [EA, 0, 0], Depend).
    
// evaluate_val(Val, $Address(as(Address, address)), [EA, 0, 0], Depend, "ptr", "symbol"):-
//     op_to_val(EA, _, _, "in", _, Val),
//     best_symexpr_symbol(as(Address, address), _, _),
//     !is_xor_reset(EA),
//     Address != 0,
//     value_depend(Val, [EA, 0, 0], Depend),
//     value_reg(EA, _, EA, "NONE", 0, Address, _).

// value of frame pointer
evaluate_val($Register(EA, Reg, Index, "reg", "in"), $Symbolic(EA, "frame_pointer"), [EA, 0, 0], Depend, "ptr", "frame"):-
    value_def($Register(EA, Reg, Index, "reg", "in")),
    value_depend($Register(EA, Reg, Index, "reg", "in"), [EA, 0, 0], Depend),
    frame_pointer(Reg).

// immediate
evaluate_val($Immediate(EA, Val, "data"), $Number(Val), [EA, 0, 0], Depend, "data", "immediate"):-
    value_depend($Immediate(EA, Val, "data"), [EA, 0, 0], Depend),
    op_to_val(EA, _, _, "out", _, $Immediate(EA, Val, "data")).

evaluate_val($Immediate(EA, Val, "data"), $Symbolic(EA, "nullptr"), [EA, 0, 0], Depend, "ptr", "immediate"):-
    value_depend($Immediate(EA, Val, "data"), [EA, 0, 0], Depend),
    ptr_candidate(EA),
    op_to_val(EA, _, _, "out", _, $Immediate(EA, Val, "data")),
    Val=0.

evaluate_val(Val, $Number(0), Src, Depend, "data", Reason) <= 
evaluate_val(Val, $Symbolic(EA, "nullptr"), Src, _, "ptr", _):-
    ptr_candidate(EA).

// used from memory
evaluate_val(Val, Val_exp, Src_def, $Load(EA, Address, Addr_depend, Depend), Type, "indirect"):-
    op_to_val(EA, _, Index, "out", _, Val),
    (op_to_val(EA, _, Index, "base", _, Base_val);
    op_to_val(EA, _, Index, "idx", _, Base_val)),
    evaluate_val(Base_val, Ptr, _, Addr_depend, _, _),
    address_expr_simplified(Val, Ptr, Exp),
    op_to_val(_, _, _, "in", _, Src),
    address_expr_simplified(Src, Ptr, Exp),
    value_depend(Val, Src_def, $Load(EA, Address, Addr_depend, Depend)),
    evaluate_val(Src, Val_exp, Src_def, Depend, Type, _),
    !value_def_used(_, Val, _).

evaluate_val(Val, $Address(Addr_val), [EA, Addr, 0], $Load(EA, Exp, Addr_depend, $Leaf(Base)), "ptr", "symbol"):-
    op_to_val(EA, _, Index, "out", _, Val),
    (op_to_val(EA, _, Index, "base", _, Base_val);
    op_to_val(EA, _, Index, "idx", _, Base_val)),
    evaluate_val(Base_val, Ptr, _, Addr_depend, _, _),
    address_expr_simplified(Val, Ptr, Exp),
    initialized_data_segment(Begin, End),
    (Exp=$Address(Base), Addr=Base;
    Exp=$Add($Address(Base), $Number(Offset)), 
    Addr=Base + as(Offset, unsigned)),
    Addr >= Begin,
    Addr < End,
    symbolic_data(Addr, _, Addr_val).

evaluate_val($Empty_val(), $Number(0), [0, 0, 0], $Leaf(0), "data", "null").

// value from def_used
evaluate_val(Used, Exp, Src, Depend, Type, Reason):-
    value_def_used(Def, Used, _),
    evaluate_val(Def, Exp, Src, Depend, Type, Reason).

// value from value edge
evaluate_val(Dst, Exp, Src_def, Depend, Type, Reason):-
    value_edge(Src, Dst, _),
    evaluate_val(Src, Exp, Src_def, Depend, Type, Reason).

// value from calc
evaluate_val(Dst, Exp, [EA, EA1, EA2], $Node(EA, h, Depend1, Depend2), Type, "calc"):-
    op_to_val(EA, _, _, _, _, Dst),
    value_arithmetic_edge(Dst, Src1, Src2, Mult, Offset),
    evaluate_val(Src1, Src1_exp, [EA1, _, _], Depend1, Type1, _),
    evaluate_val(Src2, Src2_exp, [EA2, _, _], Depend2, Type2, _),
    value_depend(Dst, [EA, EA1, EA2], $Node(EA, h, Depend1, Depend2)),
    simplify_exp($Add(Src1_exp, $Add($Mult(Src2_exp, $Number(Mult)), $Number(Offset))), Exp),
    (Type1="ptr",Type2=Type2,Type="ptr";
    Type1=Type1,Type2="ptr",Type="ptr";
    Type1=Type2,Type="data").
    
to_simplify(Exp):-
    value_arithmetic_edge(_, Src1, _, _, _),
    evaluate_val(Src1, Src1_exp, _, _, _, _),
    Exp=Src1_exp.

to_simplify(Exp):-
    value_arithmetic_edge(_, _, Src2, _, _),
    evaluate_val(Src2, Src2_exp, _, _, _, _),
    Exp=Src2_exp.

to_simplify(Exp):-
    value_arithmetic_edge(_, _, Src2, Mult, _),
    evaluate_val(Src2, Src2_exp, _, _, _, _),
    Exp=$Mult(Src2_exp, $Number(Mult)).

to_simplify(Exp):-
    value_arithmetic_edge(_, _, Src2, Mult, Offset),
    evaluate_val(Src2, Src2_exp, _, _, _, _),
    Exp=$Add($Mult(Src2_exp, $Number(Mult)), $Number(Offset)).

to_simplify(Exp):-
    value_arithmetic_edge(_, Src1, Src2, Mult, Offset),
    evaluate_val(Src1, Src1_exp, _,  _, _, _),
    evaluate_val(Src2, Src2_exp, _, _, _, _),
    Exp=$Add(Src1_exp, $Add($Mult(Src2_exp, $Number(Mult)), $Number(Offset))).

to_simplify(Exp):-
    address_expr(_, _, Exp).

to_simplify(Exp):-
    address_expr(_, _, $Add(Exp, _)).

to_simplify(Exp):-
    address_expr(_, _, $Add(_, Exp)).

to_simplify(Exp):-
    address_expr(_, _, $Add(_, $Add(Exp, _))).

to_simplify(Exp):-
    address_expr(_, _, $Add(_, $Add(_, Exp))).

arg_value(EA_call, Function, Idx, $Register(EA_def, Reg, Index, "reg", "in"), Val):-
    function_reg_arg(EA_call, Callee, $Register(EA_def, Reg, Index, "reg", "in")),
    arg_idx(Reg, Idx),
    cfg_edge_to_symbol(Callee, Function, _),
    evaluate_val($Register(EA_def, Reg, Index, "reg", "in"), Val, _, _, _, _).