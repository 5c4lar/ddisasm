function_reg_arg(Caller, Callee, Arg):-
    code(EA),
    direct_call(EA, Callee),
    code_in_refined_block(EA, Block),
    in_function(Block, Caller),
    value_block_last_def(EA, [EA_def, Base, Offset, "reg"]),
    !used_value([EA_def, Base, Offset, "reg"]),
    !stack_pointer(Base),
    !frame_pointer(Base),
    Arg=[EA_def, Base, Offset, "reg"].

value_used_for_address([EA, Base, Offset, "mem"], Size, Direction, Value):-
    src_for_address(Root),
    Value=Root,// (value_root(Value, Root, _);Value=Root),
    (value_used([EA, Base, Offset, "mem"]),Direction="load";
    value_def([EA, Base, Offset, "mem"]),Direction="store"),
    value_root([EA, Base, 0, "base"], Root, _),
    instruction_memory_access_size(EA, _, Size).
    
value_used_for_address([EA, Base, Offset, "mem_bias"], Size, Direction, Value):-
    src_for_address(Root),
    Value=Root,// (value_root(Value, Root, _);Value=Root),
    (value_used([EA, Base, Offset, "mem_bias"]),Direction="load";
    value_def([EA, Base, Offset, "mem_bias"]),Direction="store"),
    value_root([EA, _, 0, Type], Root, _),
    (Type = "idx"; Type = "base"),
    instruction_memory_access_size(EA, _, Size).

value_used_for_address([EA, Base, Offset, Type], Size, Direction, [EA, Base, Offset, Type]):-
    (value_used([EA, Base, Offset, Type]),Direction="load";
    value_def([EA, Base, Offset, Type]),Direction="store"),
    instruction_memory_access_size(EA, _, Size),
    (Type="global";Type="global_bias").

src_for_address(Src):-
    value_src(Src, _, Type),
    value_root([_, _, _, Value_type], Src, _),
    (Value_type="base";Value_type="idx"),
    Type != "immediate",
    Type != "mem_calc".

src_for_address(Src):-
    value_root(Src, Src, "uninit"),
    value_root([_, _, _, "base"], Src, _).

src_for_address([0, "NONE", 0, "global"]).

not_for_address(Root):-
    instruction_memory_access_size(EA, _, Size),
    (value_used([EA, Base, Offset, Value_type]);
    value_def([EA, Base, Offset, Value_type])),
    (Value_type="mem";Value_type="global";Value_type="global_bias"),
    pointer_size(Ptr_size),
    Ptr_size != Size,
    value_root([EA, Base, Offset, Value_type], Root, _).

value_type_helper([EA, Mem_base, Offset, Value_type], Type):-
    value_root([EA, Mem_base, Offset, Value_type], Root, _),
    (Value_type="mem";Value_type="mem_bias";Value_type="global";Value_type="global_bias"),
    src_for_address(Root), Type="ptr".

value_type_helper([EA, Mem_base, Offset, Value_type], Type):-
    value_root([EA, Mem_base, Offset, Value_type], Root, _),
    value_root([EA_arg, Reg, 0, "reg"], Root, _),
    (Value_type="mem";Value_type="mem_bias";Value_type="global";Value_type="global_bias"),
    function_reg_arg(_, Callee, [EA_arg, Reg, 0, "reg"]),
    function_prototype(Function_symbol, Idx, Type),
    cfg_edge_to_symbol(Callee, Function_symbol, _),
    arg_idx(Reg, Idx),
    Idx > 0.

value_type_helper([EA, Mem_base, Offset, Value_type], Type):-
    value_root([EA, Mem_base, Offset, Value_type], Root, _),
    (Value_type="mem";Value_type="mem_bias";Value_type="global";Value_type="global_bias"),
    value_src(Root, EA_call, "function"),
    code(EA_call),
    direct_call(EA_call, Callee),
    function_prototype(Function_symbol, 0, Type),
    cfg_edge_to_symbol(Callee, Function_symbol, _).

value_type_helper([EA1, Mem_base1, Offset, "mem"], Type):-
    value_type_helper([EA, Mem_base, Offset, "mem"], Type),
    value_root([EA, Mem_base, 0, "base"], Root, _),
    resolve_calc(Root, Base, Idx, Mult, Offset_root),
    value_root([EA1, Mem_base1, 0, "base"], Root1, _),
    resolve_calc(Root1, Base, Idx, Mult, Offset_root).

value_type([EA, Mem_base, Offset, Value_type], Type):-
    value_type_helper([EA, Mem_base, Offset, Value_type], Type).

value_type([EA, Mem_base, Offset, Value_type], Type):-
    value_used_for_address([EA, Mem_base, Offset, Value_type], Size, _, _),
    (Value_type="mem";Value_type="mem_bias";Value_type="global";Value_type="global_bias"),
    (!pointer_size(Size), Type="data";pointer_size(Size), Type="unkown"),
    !value_type_helper([EA, Mem_base, Offset, Value_type], _).
    
array_desc(Base, Offset_res, Unit, Len, Mult):-
    object_candidate(Base, Idx, Mult, Offset_res, Unit),
    loop_detected(Start, End, Steps, Idx),
    Len = (End - Start) / Steps.